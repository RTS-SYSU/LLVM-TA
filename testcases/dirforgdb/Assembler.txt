Textual Machine Code Representation
------------------------------------

# Machine code for function adpcm_dec_fabs: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !140; test/adpcm_dec.c:211:8
  Bcc %bb.2, 4, killed $cpsr, debug-location !140; test/adpcm_dec.c:211:8
  B %bb.1, debug-location !140; test/adpcm_dec.c:211:8

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !141; test/adpcm_dec.c:212:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !142 :: (load (s32) from %stack.0); test/adpcm_dec.c:214:9
  renamable $r0 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !142; test/adpcm_dec.c:214:9
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3

bb.3.if.end:
; predecessors: %bb.2, %bb.1

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !143 :: (load (s32) from %stack.1); test/adpcm_dec.c:0
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !144; test/adpcm_dec.c:216:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !144; test/adpcm_dec.c:216:3

# End machine code for function adpcm_dec_fabs.

# Machine code for function adpcm_dec_sin: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
  fi#7: size=4, align=4, at location [SP-40]
  fi#8: size=4, align=4, at location [SP-44]
  fi#9: size=4, align=4, at location [SP-48]
  fi#10: size=4, align=4, at location [SP-4]
  fi#11: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 700102915, align=4
  cp#1: 715827883, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  STRi12 $r0, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVi 138, 14, $noreg, $noreg
  $r2 = ORRri $r2, 6144, 14, $noreg, $noreg
  CMPrr renamable $r0, renamable $r2, 14, $noreg, implicit-def $cpsr, debug-location !146; test/adpcm_dec.c:229:3
  $r1 = MOVr $r2, 14, $noreg, $noreg, debug-location !146; test/adpcm_dec.c:229:3
  $r1 = MOVr renamable $r0, 11, killed $cpsr, $noreg, implicit renamable $r1, debug-location !146; test/adpcm_dec.c:229:3
  renamable $r0 = SUBrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !146; test/adpcm_dec.c:229:3
  $r1 = MOVi 137, 14, $noreg, $noreg
  $r1 = ORRri $r1, 6144, 14, $noreg, $noreg
  renamable $r3 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !146; test/adpcm_dec.c:229:3
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r1, early-clobber renamable $r0 = UMULLv5 killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !146; test/adpcm_dec.c:229:3
  renamable $r1 = MOVsi killed renamable $r0, 83, 14, $noreg, $noreg, debug-location !146; test/adpcm_dec.c:229:3
  early-clobber renamable $r0 = MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !146; test/adpcm_dec.c:229:3
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !146; test/adpcm_dec.c:229:3

bb.1.while.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2, %bb.3

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !146; test/adpcm_dec.c:229:3
  Bcc %bb.3, 1, killed $cpsr, debug-location !146; test/adpcm_dec.c:229:3
  B %bb.2, debug-location !146; test/adpcm_dec.c:229:3

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  B %bb.1, debug-location !146; test/adpcm_dec.c:229:3

bb.3.while.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r3 = LDRi12 $r11, -8, 14, $noreg, debug-location !146 :: (load (s32) from %stack.1); test/adpcm_dec.c:229:3
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !146 :: (load (s32) from %stack.0); test/adpcm_dec.c:229:3
  renamable $r2 = SUBrr renamable $r3, renamable $r1, 14, $noreg, $noreg, debug-location !146; test/adpcm_dec.c:229:3
  $r0 = MVNi 137, 14, $noreg, $noreg
  $r0 = SUBri $r0, 6144, 14, $noreg, $noreg
  CMPrr renamable $r2, renamable $r0, 14, $noreg, implicit-def $cpsr, debug-location !150; test/adpcm_dec.c:233:3
  $r0 = MOVr killed renamable $r2, 12, killed $cpsr, $noreg, implicit renamable $r0, debug-location !150; test/adpcm_dec.c:233:3
  renamable $r0 = ADDrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !150; test/adpcm_dec.c:233:3
  renamable $r1 = SUBrr killed renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !150; test/adpcm_dec.c:233:3
  CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !150; test/adpcm_dec.c:233:3
  $r0 = MOVr $r1, 14, $noreg, $noreg, debug-location !150; test/adpcm_dec.c:233:3
  $r0 = MOVi 1, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !150; test/adpcm_dec.c:233:3
  renamable $r12 = SUBrr killed renamable $r1, renamable $r0, 14, $noreg, $noreg, debug-location !150; test/adpcm_dec.c:233:3
  renamable $lr = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r2, early-clobber renamable $r1 = UMULLv5 killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !150; test/adpcm_dec.c:233:3
  renamable $r1 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 83, 14, $noreg, $noreg, debug-location !150; test/adpcm_dec.c:233:3
  $r2 = MOVi 138, 14, $noreg, $noreg
  $r2 = ORRri $r2, 6144, 14, $noreg, $noreg
  early-clobber renamable $r0 = MLAv5 killed renamable $r1, killed renamable $r2, renamable $r3, 14, $noreg, $noreg, debug-location !150; test/adpcm_dec.c:233:3
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.4, debug-location !150; test/adpcm_dec.c:233:3

bb.4.while.cond1:
; predecessors: %bb.3, %bb.5
  successors: %bb.5, %bb.6

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !150; test/adpcm_dec.c:233:3
  Bcc %bb.6, 1, killed $cpsr, debug-location !150; test/adpcm_dec.c:233:3
  B %bb.5, debug-location !150; test/adpcm_dec.c:233:3

bb.5.while.body3:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  B %bb.4, debug-location !150; test/adpcm_dec.c:233:3

bb.6.while.end4:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !150 :: (load (s32) from %stack.2); test/adpcm_dec.c:233:3
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !150 :: (load (s32) from %stack.0); test/adpcm_dec.c:233:3
  renamable $r1 = SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !150; test/adpcm_dec.c:233:3
  STRi12 $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.6)
  early-clobber renamable $r2 = nsw MULv5 renamable $r1, renamable $r1, 14, $noreg, $noreg, debug-location !153; test/adpcm_dec.c:238:28
  early-clobber renamable $r0 = MULv5 killed renamable $r2, renamable $r1, 14, $noreg, $noreg, debug-location !154; test/adpcm_dec.c:238:17
  renamable $r3 = RSBri killed renamable $r0, 0, 14, $noreg, $noreg, debug-location !154; test/adpcm_dec.c:238:17
  renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r2, early-clobber renamable $r0 = SMULLv5 killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !155; test/adpcm_dec.c:238:40
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 251, 14, $noreg, $noreg, debug-location !155; test/adpcm_dec.c:238:40
  renamable $r1 = nsw ADDrr renamable $r1, renamable $r0, 14, $noreg, $noreg, debug-location !156; test/adpcm_dec.c:239:13
  renamable $r2 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 16, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed $r1, $sp, 20, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.7, debug-location !157; test/adpcm_dec.c:245:3

bb.7.while.cond13:
; predecessors: %bb.6, %bb.8
  successors: %bb.8, %bb.9

  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !158 :: (load (s32) from %stack.5); test/adpcm_dec.c:0
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !158 :: (load (s32) from %stack.4); test/adpcm_dec.c:0
  $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !158 :: (load (s32) from %stack.3); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.7)
  BL_pred @adpcm_dec_fabs, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !159; test/adpcm_dec.c:245:11
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !157; test/adpcm_dec.c:245:3
  Bcc %bb.9, 11, killed $cpsr, debug-location !157; test/adpcm_dec.c:245:3
  B %bb.8, debug-location !157; test/adpcm_dec.c:245:3

bb.8.while.body15:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !161 :: (load (s32) from %stack.7); test/adpcm_dec.c:246:30
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !161 :: (load (s32) from %stack.9); test/adpcm_dec.c:246:30
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !161 :: (load (s32) from %stack.6); test/adpcm_dec.c:246:30
  early-clobber renamable $r1 = nsw MULv5 renamable $r0, renamable $r0, 14, $noreg, $noreg, debug-location !161; test/adpcm_dec.c:246:30
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !162; test/adpcm_dec.c:246:19
  renamable $r0 = RSBri killed renamable $r0, 0, 14, $noreg, $noreg, debug-location !162; test/adpcm_dec.c:246:19
  renamable $r2 = nuw nsw MOVsi renamable $r3, 10, 14, $noreg, $noreg, debug-location !163; test/adpcm_dec.c:246:50
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  renamable $r3 = ORRrsi killed renamable $r1, renamable $r3, 10, 14, $noreg, $noreg, debug-location !165; test/adpcm_dec.c:246:70
  early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !166; test/adpcm_dec.c:246:58
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !167; test/adpcm_dec.c:246:42
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !167 :: (load (s32) from %stack.8); test/adpcm_dec.c:246:42
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !167 :: (load (s32) from %stack.7); test/adpcm_dec.c:246:42
  $r3 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !167; test/adpcm_dec.c:246:42
  $r0 = MOVr $r3, 14, $noreg, $noreg, debug-location !167; test/adpcm_dec.c:246:42
  renamable $r1 = nsw ADDrr renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !168; test/adpcm_dec.c:247:15
  renamable $r2 = nuw nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !169; test/adpcm_dec.c:248:8
  STRi12 killed $r2, $sp, 16, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed $r1, $sp, 20, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.7, debug-location !157; test/adpcm_dec.c:245:3

bb.9.while.end26:
; predecessors: %bb.7

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !172 :: (load (s32) from %stack.8); test/adpcm_dec.c:251:3
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !172; test/adpcm_dec.c:251:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !172; test/adpcm_dec.c:251:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !172; test/adpcm_dec.c:251:3

bb.10 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function adpcm_dec_sin.

# Machine code for function adpcm_dec_cos: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $r1 = MOVr killed $r0, 14, $noreg, $noreg
  $r0 = MOVi 34, 14, $noreg, $noreg
  $r0 = ORRri $r0, 1536, 14, $noreg, $noreg
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !174; test/adpcm_dec.c:257:34
  BL_pred @adpcm_dec_sin, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !175; test/adpcm_dec.c:257:12
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !176; test/adpcm_dec.c:257:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !176; test/adpcm_dec.c:257:3

# End machine code for function adpcm_dec_cos.

# Machine code for function adpcm_dec_decode: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-36]
  fi#3: size=4, align=4, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=4, align=4, at location [SP-52]
  fi#7: size=4, align=4, at location [SP-56]
  fi#8: size=4, align=4, at location [SP-60]
  fi#9: size=4, align=4, at location [SP-64]
  fi#10: size=4, align=4, at location [SP-68]
  fi#11: size=4, align=4, at location [SP-72]
  fi#12: size=4, align=4, at location [SP-76]
  fi#13: size=4, align=4, at location [SP-80]
  fi#14: size=4, align=4, at location [SP-84]
  fi#15: size=4, align=4, at location [SP-88]
  fi#16: size=4, align=4, at location [SP-92]
  fi#17: size=4, align=4, at location [SP-96]
  fi#18: size=4, align=4, at location [SP-100]
  fi#19: size=4, align=4, at location [SP-104]
  fi#20: size=4, align=4, at location [SP-108]
  fi#21: size=4, align=4, at location [SP-112]
  fi#22: size=4, align=4, at location [SP-116]
  fi#23: size=4, align=4, at location [SP-120]
  fi#24: size=4, align=4, at location [SP-124]
  fi#25: size=4, align=4, at location [SP-128]
  fi#26: size=4, align=4, at location [SP-132]
  fi#27: size=4, align=4, at location [SP-136]
  fi#28: size=4, align=4, at location [SP-140]
  fi#29: size=4, align=4, at location [SP-144]
  fi#30: size=4, align=4, at location [SP-148]
  fi#31: size=4, align=4, at location [SP-152]
  fi#32: size=4, align=4, at location [SP-156]
  fi#33: size=4, align=4, at location [SP-160]
  fi#34: size=4, align=4, at location [SP-164]
  fi#35: size=4, align=4, at location [SP-168]
  fi#36: size=4, align=4, at location [SP-172]
  fi#37: size=4, align=4, at location [SP-176]
  fi#38: size=4, align=4, at location [SP-180]
  fi#39: size=4, align=4, at location [SP-184]
  fi#40: size=4, align=4, at location [SP-188]
  fi#41: size=4, align=4, at location [SP-192]
  fi#42: size=4, align=4, at location [SP-196]
  fi#43: size=4, align=4, at location [SP-200]
  fi#44: size=4, align=4, at location [SP-204]
  fi#45: size=4, align=4, at location [SP-208]
  fi#46: size=4, align=4, at location [SP-212]
  fi#47: size=4, align=4, at location [SP-216]
  fi#48: size=4, align=4, at location [SP-4]
  fi#49: size=4, align=4, at location [SP-8]
  fi#50: size=4, align=4, at location [SP-12]
  fi#51: size=4, align=4, at location [SP-16]
  fi#52: size=4, align=4, at location [SP-20]
  fi#53: size=4, align=4, at location [SP-24]
Constant Pool:
  cp#0: @adpcm_dec_ilr, align=4
  cp#1: @adpcm_dec_ih, align=4
  cp#2: @adpcm_dec_dec_del_bpl, align=4
  cp#3: @adpcm_dec_dec_del_dltx, align=4
  cp#4: @adpcm_dec_dec_szl, align=4
  cp#5: @adpcm_dec_dec_rlt1, align=4
  cp#6: @adpcm_dec_dec_al1, align=4
  cp#7: @adpcm_dec_dec_rlt2, align=4
  cp#8: @adpcm_dec_dec_al2, align=4
  cp#9: @adpcm_dec_dec_spl, align=4
  cp#10: @adpcm_dec_dec_sl, align=4
  cp#11: @adpcm_dec_dec_detl, align=4
  cp#12: @adpcm_dec_qq4_code4_table, align=4
  cp#13: @adpcm_dec_dec_dlt, align=4
  cp#14: @adpcm_dec_il, align=4
  cp#15: @adpcm_dec_qq6_code6_table, align=4
  cp#16: @adpcm_dec_dl, align=4
  cp#17: @adpcm_dec_rl, align=4
  cp#18: @adpcm_dec_dec_nbl, align=4
  cp#19: @adpcm_dec_dec_plt, align=4
  cp#20: @adpcm_dec_dec_plt1, align=4
  cp#21: @adpcm_dec_dec_plt2, align=4
  cp#22: @adpcm_dec_dec_rlt, align=4
  cp#23: @adpcm_dec_dec_del_bph, align=4
  cp#24: @adpcm_dec_dec_del_dhx, align=4
  cp#25: @adpcm_dec_dec_szh, align=4
  cp#26: @adpcm_dec_dec_rh1, align=4
  cp#27: @adpcm_dec_dec_ah1, align=4
  cp#28: @adpcm_dec_dec_rh2, align=4
  cp#29: @adpcm_dec_dec_ah2, align=4
  cp#30: @adpcm_dec_dec_sph, align=4
  cp#31: @adpcm_dec_dec_sh, align=4
  cp#32: @adpcm_dec_dec_deth, align=4
  cp#33: @adpcm_dec_qq2_code2_table, align=4
  cp#34: @adpcm_dec_dec_dh, align=4
  cp#35: @adpcm_dec_dec_nbh, align=4
  cp#36: @adpcm_dec_dec_ph, align=4
  cp#37: @adpcm_dec_dec_ph1, align=4
  cp#38: @adpcm_dec_dec_ph2, align=4
  cp#39: @adpcm_dec_rh, align=4
  cp#40: @adpcm_dec_xd, align=4
  cp#41: @adpcm_dec_xs, align=4
  cp#42: @adpcm_dec_h, align=4
  cp#43: @adpcm_dec_accumc, align=4
  cp#44: @adpcm_dec_accumd, align=4
  cp#45: @adpcm_dec_xout1, align=4
  cp#46: @adpcm_dec_xout2, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r4, $r5, $r6, $r7, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r7, -12
  frame-setup CFI_INSTRUCTION offset $r6, -16
  frame-setup CFI_INSTRUCTION offset $r5, -20
  frame-setup CFI_INSTRUCTION offset $r4, -24
  $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 200, 14, $noreg, $noreg
  renamable $r1 = ANDri renamable $r0, 63, 14, $noreg, $noreg, debug-location !178; test/adpcm_dec.c:274:25
  renamable $r2 = LDRi12 %const.0, 0, 14, $noreg, debug-location !179 :: (load (s32) from constant-pool); test/adpcm_dec.c:274:17
  STRi12 $r2, $sp, 72, 14, $noreg :: (store (s32) into %stack.31)
  STRi12 killed renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !179 :: (store (s32) into @adpcm_dec_ilr); test/adpcm_dec.c:274:17
  renamable $r0 = MOVsi killed renamable $r0, 49, 14, $noreg, $noreg, debug-location !180; test/adpcm_dec.c:275:24
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !181 :: (load (s32) from constant-pool); test/adpcm_dec.c:275:16
  STRi12 $r1, $r11, -92, 14, $noreg :: (store (s32) into %stack.18)
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !181 :: (store (s32) into @adpcm_dec_ih); test/adpcm_dec.c:275:16
  renamable $r0 = LDRi12 %const.2, 0, 14, $noreg, debug-location !182 :: (load (s32) from constant-pool); test/adpcm_dec.c:280:23
  STRi12 $r0, $sp, 88, 14, $noreg :: (store (s32) into %stack.27)
  renamable $r1 = LDRi12 %const.3, 0, 14, $noreg, debug-location !182 :: (load (s32) from constant-pool); test/adpcm_dec.c:280:23
  STRi12 $r1, $sp, 84, 14, $noreg :: (store (s32) into %stack.28)
  BL_pred @adpcm_dec_filtez, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !182; test/adpcm_dec.c:280:23
  renamable $r1 = LDRi12 %const.4, 0, 14, $noreg, debug-location !183 :: (load (s32) from constant-pool); test/adpcm_dec.c:280:21
  STRi12 $r1, $sp, 80, 14, $noreg :: (store (s32) into %stack.29)
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !183 :: (store (s32) into @adpcm_dec_dec_szl); test/adpcm_dec.c:280:21
  renamable $r0 = LDRi12 %const.5, 0, 14, $noreg, debug-location !184 :: (load (s32) from constant-pool); test/adpcm_dec.c:284:41
  STRi12 $r0, $sp, 104, 14, $noreg :: (store (s32) into %stack.23)
  renamable $r0 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !184 :: (dereferenceable load (s32) from @adpcm_dec_dec_rlt1); test/adpcm_dec.c:284:41
  renamable $r6 = LDRi12 %const.6, 0, 14, $noreg, debug-location !185 :: (load (s32) from constant-pool); test/adpcm_dec.c:284:61
  renamable $r1 = LDRi12 renamable $r6, 0, 14, $noreg, debug-location !185 :: (dereferenceable load (s32) from @adpcm_dec_dec_al1); test/adpcm_dec.c:284:61
  renamable $r4 = LDRi12 %const.7, 0, 14, $noreg, debug-location !186 :: (load (s32) from constant-pool); test/adpcm_dec.c:285:41
  renamable $r2 = LDRi12 renamable $r4, 0, 14, $noreg, debug-location !186 :: (dereferenceable load (s32) from @adpcm_dec_dec_rlt2); test/adpcm_dec.c:285:41
  renamable $r3 = LDRi12 %const.8, 0, 14, $noreg, debug-location !187 :: (load (s32) from constant-pool); test/adpcm_dec.c:285:61
  STRi12 $r3, $sp, 96, 14, $noreg :: (store (s32) into %stack.25)
  renamable $r3 = LDRi12 renamable $r3, 0, 14, $noreg, debug-location !187 :: (dereferenceable load (s32) from @adpcm_dec_dec_al2); test/adpcm_dec.c:285:61
  BL_pred @adpcm_dec_filtep, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !188; test/adpcm_dec.c:284:23
  $r2 = LDRi12 $sp, 80, 14, $noreg, debug-location !188 :: (load (s32) from %stack.29); test/adpcm_dec.c:284:23
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !188; test/adpcm_dec.c:284:23
  $r0 = LDRi12 $sp, 72, 14, $noreg, debug-location !189 :: (load (s32) from %stack.31); test/adpcm_dec.c:284:21
  renamable $r3 = LDRi12 %const.9, 0, 14, $noreg, debug-location !189 :: (load (s32) from constant-pool); test/adpcm_dec.c:284:21
  STRi12 renamable $r1, killed renamable $r3, 0, 14, $noreg, debug-location !189 :: (store (s32) into @adpcm_dec_dec_spl); test/adpcm_dec.c:284:21
  renamable $r2 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !190 :: (dereferenceable load (s32) from @adpcm_dec_dec_szl); test/adpcm_dec.c:287:42
  renamable $r2 = nsw ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !191; test/adpcm_dec.c:287:40
  renamable $r1 = LDRi12 %const.10, 0, 14, $noreg, debug-location !192 :: (load (s32) from constant-pool); test/adpcm_dec.c:287:20
  STRi12 $r1, $sp, 100, 14, $noreg :: (store (s32) into %stack.24)
  STRi12 killed renamable $r2, renamable $r1, 0, 14, $noreg, debug-location !192 :: (store (s32) into @adpcm_dec_dec_sl); test/adpcm_dec.c:287:20
  renamable $r2 = LDRi12 %const.11, 0, 14, $noreg, debug-location !193 :: (load (s32) from constant-pool); test/adpcm_dec.c:290:33
  STRi12 $r2, $sp, 92, 14, $noreg :: (store (s32) into %stack.26)
  renamable $r12 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !193 :: (dereferenceable load (s32) from @adpcm_dec_dec_detl); test/adpcm_dec.c:290:33
  renamable $r3 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !194 :: (dereferenceable load (s32) from @adpcm_dec_ilr); test/adpcm_dec.c:291:52
  renamable $lr = BICri killed renamable $r3, 3, 14, $noreg, $noreg, debug-location !195; test/adpcm_dec.c:292:29
  renamable $r3 = LDRi12 %const.12, 0, 14, $noreg, debug-location !196 :: (load (s32) from constant-pool); test/adpcm_dec.c:291:25
  renamable $lr = LDRrs killed renamable $r3, killed renamable $lr, 0, 14, $noreg, debug-location !196 :: (load (s32) from %ir.arrayidx); test/adpcm_dec.c:291:25
  early-clobber renamable $r3 = nsw MULv5 killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !197; test/adpcm_dec.c:290:52
  renamable $r3 = MOVsi killed renamable $r3, 121, 14, $noreg, $noreg, debug-location !198; test/adpcm_dec.c:292:38
  renamable $r12 = LDRi12 %const.13, 0, 14, $noreg, debug-location !199 :: (load (s32) from constant-pool); test/adpcm_dec.c:290:21
  STRi12 $r12, $r11, -100, 14, $noreg :: (store (s32) into %stack.20)
  STRi12 killed renamable $r3, renamable $r12, 0, 14, $noreg, debug-location !199 :: (store (s32) into @adpcm_dec_dec_dlt); test/adpcm_dec.c:290:21
  renamable $r3 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !200 :: (dereferenceable load (s32) from @adpcm_dec_dec_detl); test/adpcm_dec.c:295:28
  renamable $r2 = LDRi12 %const.14, 0, 14, $noreg, debug-location !201 :: (load (s32) from constant-pool); test/adpcm_dec.c:296:47
  renamable $r12 = LDRi12 killed renamable $r2, 0, 14, $noreg, debug-location !201 :: (dereferenceable load (s32) from @adpcm_dec_il); test/adpcm_dec.c:296:47
  renamable $r2 = LDRi12 %const.15, 0, 14, $noreg, debug-location !202 :: (load (s32) from constant-pool); test/adpcm_dec.c:296:20
  renamable $r12 = LDRrs killed renamable $r2, killed renamable $r12, 16386, 14, $noreg, debug-location !202 :: (load (s32) from %ir.arrayidx4); test/adpcm_dec.c:296:20
  early-clobber renamable $r2 = nsw MULv5 killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !203; test/adpcm_dec.c:295:47
  renamable $r3 = MOVsi renamable $r2, 121, 14, $noreg, $noreg, debug-location !204; test/adpcm_dec.c:296:64
  renamable $r12 = LDRi12 %const.16, 0, 14, $noreg, debug-location !205 :: (load (s32) from constant-pool); test/adpcm_dec.c:295:16
  STRi12 killed renamable $r3, killed renamable $r12, 0, 14, $noreg, debug-location !205 :: (store (s32) into @adpcm_dec_dl); test/adpcm_dec.c:295:16
  renamable $r1 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !206 :: (dereferenceable load (s32) from @adpcm_dec_dec_sl); test/adpcm_dec.c:299:33
  renamable $r1 = nsw ADDrsi killed renamable $r1, killed renamable $r2, 121, 14, $noreg, $noreg, debug-location !207; test/adpcm_dec.c:299:31
  renamable $r2 = LDRi12 %const.17, 0, 14, $noreg, debug-location !208 :: (load (s32) from constant-pool); test/adpcm_dec.c:299:16
  STRi12 $r2, $r11, -44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !208 :: (store (s32) into @adpcm_dec_rl); test/adpcm_dec.c:299:16
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !209 :: (dereferenceable load (s32) from @adpcm_dec_ilr); test/adpcm_dec.c:302:41
  renamable $r1 = LDRi12 %const.18, 0, 14, $noreg, debug-location !210 :: (load (s32) from constant-pool); test/adpcm_dec.c:302:56
  STRi12 $r1, $sp, 76, 14, $noreg :: (store (s32) into %stack.30)
  renamable $r1 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !210 :: (dereferenceable load (s32) from @adpcm_dec_dec_nbl); test/adpcm_dec.c:302:56
  BL_pred @adpcm_dec_logscl, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !211; test/adpcm_dec.c:302:23
  $r1 = LDRi12 $sp, 76, 14, $noreg, debug-location !211 :: (load (s32) from %stack.30); test/adpcm_dec.c:302:23
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !212 :: (store (s32) into @adpcm_dec_dec_nbl); test/adpcm_dec.c:302:21
  renamable $r1 = MOVi 8, 14, $noreg, $noreg
  BL_pred @adpcm_dec_scalel, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !213; test/adpcm_dec.c:305:24
  $r3 = LDRi12 $sp, 80, 14, $noreg, debug-location !213 :: (load (s32) from %stack.29); test/adpcm_dec.c:305:24
  $r1 = LDRi12 $sp, 84, 14, $noreg, debug-location !213 :: (load (s32) from %stack.28); test/adpcm_dec.c:305:24
  $r2 = LDRi12 $sp, 88, 14, $noreg, debug-location !213 :: (load (s32) from %stack.27); test/adpcm_dec.c:305:24
  $lr = LDRi12 $sp, 92, 14, $noreg, debug-location !213 :: (load (s32) from %stack.26); test/adpcm_dec.c:305:24
  $r12 = MOVr $r0, 14, $noreg, $noreg, debug-location !213; test/adpcm_dec.c:305:24
  $r0 = LDRi12 $r11, -100, 14, $noreg, debug-location !214 :: (load (s32) from %stack.20); test/adpcm_dec.c:305:22
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !214 :: (store (s32) into @adpcm_dec_dec_detl); test/adpcm_dec.c:305:22
  renamable $r0 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !215 :: (dereferenceable load (s32) from @adpcm_dec_dec_dlt); test/adpcm_dec.c:309:23
  renamable $r3 = LDRi12 killed renamable $r3, 0, 14, $noreg, debug-location !216 :: (dereferenceable load (s32) from @adpcm_dec_dec_szl); test/adpcm_dec.c:309:43
  renamable $r3 = nsw ADDrr renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !217; test/adpcm_dec.c:309:41
  renamable $r12 = LDRi12 %const.19, 0, 14, $noreg, debug-location !218 :: (load (s32) from constant-pool); test/adpcm_dec.c:309:21
  STRi12 $r12, $r11, -96, 14, $noreg :: (store (s32) into %stack.19)
  STRi12 killed renamable $r3, renamable $r12, 0, 14, $noreg, debug-location !218 :: (store (s32) into @adpcm_dec_dec_plt); test/adpcm_dec.c:309:21
  BL_pred @adpcm_dec_upzero, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !219; test/adpcm_dec.c:312:3
  $r1 = LDRi12 $sp, 96, 14, $noreg, debug-location !219 :: (load (s32) from %stack.25); test/adpcm_dec.c:312:3
  $r2 = LDRi12 $r11, -96, 14, $noreg, debug-location !219 :: (load (s32) from %stack.19); test/adpcm_dec.c:312:3
  renamable $r0 = LDRi12 renamable $r6, 0, 14, $noreg, debug-location !220 :: (dereferenceable load (s32) from @adpcm_dec_dec_al1); test/adpcm_dec.c:316:41
  renamable $r1 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !221 :: (dereferenceable load (s32) from @adpcm_dec_dec_al2); test/adpcm_dec.c:316:60
  renamable $r2 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !222 :: (dereferenceable load (s32) from @adpcm_dec_dec_plt); test/adpcm_dec.c:317:41
  renamable $r3 = LDRi12 %const.20, 0, 14, $noreg, debug-location !223 :: (load (s32) from constant-pool); test/adpcm_dec.c:317:60
  STRi12 $r3, $r11, -104, 14, $noreg :: (store (s32) into %stack.21)
  renamable $r3 = LDRi12 renamable $r3, 0, 14, $noreg, debug-location !223 :: (dereferenceable load (s32) from @adpcm_dec_dec_plt1); test/adpcm_dec.c:317:60
  renamable $r12 = LDRi12 %const.21, 0, 14, $noreg, debug-location !224 :: (load (s32) from constant-pool); test/adpcm_dec.c:318:41
  STRi12 $r12, $sp, 108, 14, $noreg :: (store (s32) into %stack.22)
  renamable $r12 = LDRi12 renamable $r12, 0, 14, $noreg, debug-location !224 :: (dereferenceable load (s32) from @adpcm_dec_dec_plt2); test/adpcm_dec.c:318:41
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !225; test/adpcm_dec.c:316:23
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !225 :: (store (s32) into stack); test/adpcm_dec.c:316:23
  BL_pred @adpcm_dec_uppol2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !225; test/adpcm_dec.c:316:23
  $r2 = LDRi12 $r11, -96, 14, $noreg, debug-location !225 :: (load (s32) from %stack.19); test/adpcm_dec.c:316:23
  $r3 = LDRi12 $r11, -104, 14, $noreg, debug-location !225 :: (load (s32) from %stack.21); test/adpcm_dec.c:316:23
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !225; test/adpcm_dec.c:316:23
  $r0 = LDRi12 $sp, 96, 14, $noreg, debug-location !226 :: (load (s32) from %stack.25); test/adpcm_dec.c:316:21
  STRi12 renamable $r1, killed renamable $r0, 0, 14, $noreg, debug-location !226 :: (store (s32) into @adpcm_dec_dec_al2); test/adpcm_dec.c:316:21
  renamable $r0 = LDRi12 renamable $r6, 0, 14, $noreg, debug-location !227 :: (dereferenceable load (s32) from @adpcm_dec_dec_al1); test/adpcm_dec.c:321:41
  renamable $r2 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !228 :: (dereferenceable load (s32) from @adpcm_dec_dec_plt); test/adpcm_dec.c:322:41
  renamable $r3 = LDRi12 renamable $r3, 0, 14, $noreg, debug-location !229 :: (dereferenceable load (s32) from @adpcm_dec_dec_plt1); test/adpcm_dec.c:322:60
  BL_pred @adpcm_dec_uppol1, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !230; test/adpcm_dec.c:321:23
  $r2 = LDRi12 $sp, 100, 14, $noreg, debug-location !230 :: (load (s32) from %stack.24); test/adpcm_dec.c:321:23
  $r12 = LDRi12 $sp, 104, 14, $noreg, debug-location !230 :: (load (s32) from %stack.23); test/adpcm_dec.c:321:23
  $r3 = LDRi12 $sp, 108, 14, $noreg, debug-location !230 :: (load (s32) from %stack.22); test/adpcm_dec.c:321:23
  $r1 = LDRi12 $r11, -104, 14, $noreg, debug-location !230 :: (load (s32) from %stack.21); test/adpcm_dec.c:321:23
  $lr = LDRi12 $r11, -100, 14, $noreg, debug-location !230 :: (load (s32) from %stack.20); test/adpcm_dec.c:321:23
  $r5 = MOVr $r0, 14, $noreg, $noreg, debug-location !230; test/adpcm_dec.c:321:23
  $r0 = LDRi12 $r11, -96, 14, $noreg, debug-location !231 :: (load (s32) from %stack.19); test/adpcm_dec.c:321:21
  STRi12 killed renamable $r5, killed renamable $r6, 0, 14, $noreg, debug-location !231 :: (store (s32) into @adpcm_dec_dec_al1); test/adpcm_dec.c:321:21
  renamable $r2 = LDRi12 killed renamable $r2, 0, 14, $noreg, debug-location !232 :: (dereferenceable load (s32) from @adpcm_dec_dec_sl); test/adpcm_dec.c:325:23
  renamable $lr = LDRi12 killed renamable $lr, 0, 14, $noreg, debug-location !233 :: (dereferenceable load (s32) from @adpcm_dec_dec_dlt); test/adpcm_dec.c:325:42
  renamable $r2 = nsw ADDrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, debug-location !234; test/adpcm_dec.c:325:40
  renamable $lr = LDRi12 %const.22, 0, 14, $noreg, debug-location !235 :: (load (s32) from constant-pool); test/adpcm_dec.c:325:21
  STRi12 renamable $r2, killed renamable $lr, 0, 14, $noreg, debug-location !235 :: (store (s32) into @adpcm_dec_dec_rlt); test/adpcm_dec.c:325:21
  renamable $lr = LDRi12 renamable $r12, 0, 14, $noreg, debug-location !236 :: (dereferenceable load (s32) from @adpcm_dec_dec_rlt1); test/adpcm_dec.c:328:24
  STRi12 killed renamable $lr, killed renamable $r4, 0, 14, $noreg, debug-location !237 :: (store (s32) into @adpcm_dec_dec_rlt2); test/adpcm_dec.c:328:22
  STRi12 killed renamable $r2, killed renamable $r12, 0, 14, $noreg, debug-location !238 :: (store (s32) into @adpcm_dec_dec_rlt1); test/adpcm_dec.c:329:22
  renamable $r2 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !239 :: (dereferenceable load (s32) from @adpcm_dec_dec_plt1); test/adpcm_dec.c:330:24
  STRi12 killed renamable $r2, killed renamable $r3, 0, 14, $noreg, debug-location !240 :: (store (s32) into @adpcm_dec_dec_plt2); test/adpcm_dec.c:330:22
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !241 :: (dereferenceable load (s32) from @adpcm_dec_dec_plt); test/adpcm_dec.c:331:24
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !242 :: (store (s32) into @adpcm_dec_dec_plt1); test/adpcm_dec.c:331:22
  renamable $r0 = LDRi12 %const.23, 0, 14, $noreg, debug-location !243 :: (load (s32) from constant-pool); test/adpcm_dec.c:336:23
  STRi12 $r0, $r11, -76, 14, $noreg :: (store (s32) into %stack.14)
  renamable $r1 = LDRi12 %const.24, 0, 14, $noreg, debug-location !243 :: (load (s32) from constant-pool); test/adpcm_dec.c:336:23
  STRi12 $r1, $r11, -80, 14, $noreg :: (store (s32) into %stack.15)
  BL_pred @adpcm_dec_filtez, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !243; test/adpcm_dec.c:336:23
  renamable $r1 = LDRi12 %const.25, 0, 14, $noreg, debug-location !244 :: (load (s32) from constant-pool); test/adpcm_dec.c:336:21
  STRi12 $r1, $r11, -84, 14, $noreg :: (store (s32) into %stack.16)
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !244 :: (store (s32) into @adpcm_dec_dec_szh); test/adpcm_dec.c:336:21
  renamable $r4 = LDRi12 %const.26, 0, 14, $noreg, debug-location !245 :: (load (s32) from constant-pool); test/adpcm_dec.c:340:41
  renamable $r0 = LDRi12 renamable $r4, 0, 14, $noreg, debug-location !245 :: (dereferenceable load (s32) from @adpcm_dec_dec_rh1); test/adpcm_dec.c:340:41
  renamable $r7 = LDRi12 %const.27, 0, 14, $noreg, debug-location !246 :: (load (s32) from constant-pool); test/adpcm_dec.c:340:60
  renamable $r1 = LDRi12 renamable $r7, 0, 14, $noreg, debug-location !246 :: (dereferenceable load (s32) from @adpcm_dec_dec_ah1); test/adpcm_dec.c:340:60
  renamable $r6 = LDRi12 %const.28, 0, 14, $noreg, debug-location !247 :: (load (s32) from constant-pool); test/adpcm_dec.c:341:41
  renamable $r2 = LDRi12 renamable $r6, 0, 14, $noreg, debug-location !247 :: (dereferenceable load (s32) from @adpcm_dec_dec_rh2); test/adpcm_dec.c:341:41
  renamable $r3 = LDRi12 %const.29, 0, 14, $noreg, debug-location !248 :: (load (s32) from constant-pool); test/adpcm_dec.c:341:60
  STRi12 $r3, $r11, -68, 14, $noreg :: (store (s32) into %stack.12)
  renamable $r3 = LDRi12 renamable $r3, 0, 14, $noreg, debug-location !248 :: (dereferenceable load (s32) from @adpcm_dec_dec_ah2); test/adpcm_dec.c:341:60
  BL_pred @adpcm_dec_filtep, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !249; test/adpcm_dec.c:340:23
  $r2 = LDRi12 $r11, -84, 14, $noreg, debug-location !249 :: (load (s32) from %stack.16); test/adpcm_dec.c:340:23
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !249; test/adpcm_dec.c:340:23
  $r0 = LDRi12 $r11, -92, 14, $noreg, debug-location !250 :: (load (s32) from %stack.18); test/adpcm_dec.c:340:21
  renamable $r3 = LDRi12 %const.30, 0, 14, $noreg, debug-location !250 :: (load (s32) from constant-pool); test/adpcm_dec.c:340:21
  STRi12 renamable $r1, killed renamable $r3, 0, 14, $noreg, debug-location !250 :: (store (s32) into @adpcm_dec_dec_sph); test/adpcm_dec.c:340:21
  renamable $r2 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !251 :: (dereferenceable load (s32) from @adpcm_dec_dec_szh); test/adpcm_dec.c:344:42
  renamable $r1 = nsw ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !252; test/adpcm_dec.c:344:40
  renamable $r2 = LDRi12 %const.31, 0, 14, $noreg, debug-location !253 :: (load (s32) from constant-pool); test/adpcm_dec.c:344:20
  STRi12 $r2, $r11, -64, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !253 :: (store (s32) into @adpcm_dec_dec_sh); test/adpcm_dec.c:344:20
  renamable $r1 = LDRi12 %const.32, 0, 14, $noreg, debug-location !254 :: (load (s32) from constant-pool); test/adpcm_dec.c:347:32
  STRi12 $r1, $r11, -72, 14, $noreg :: (store (s32) into %stack.13)
  renamable $r2 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !254 :: (dereferenceable load (s32) from @adpcm_dec_dec_deth); test/adpcm_dec.c:347:32
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !255 :: (dereferenceable load (s32) from @adpcm_dec_ih); test/adpcm_dec.c:348:51
  renamable $r1 = LDRi12 %const.33, 0, 14, $noreg, debug-location !256 :: (load (s32) from constant-pool); test/adpcm_dec.c:348:24
  renamable $r3 = LDRrs killed renamable $r1, renamable $r0, 16386, 14, $noreg, debug-location !256 :: (load (s32) from %ir.arrayidx17); test/adpcm_dec.c:348:24
  early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !257; test/adpcm_dec.c:347:51
  renamable $r1 = MOVsi killed renamable $r1, 121, 14, $noreg, $noreg, debug-location !258; test/adpcm_dec.c:348:68
  renamable $r2 = LDRi12 %const.34, 0, 14, $noreg, debug-location !259 :: (load (s32) from constant-pool); test/adpcm_dec.c:347:20
  STRi12 $r2, $r11, -60, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !259 :: (store (s32) into @adpcm_dec_dec_dh); test/adpcm_dec.c:347:20
  renamable $r1 = LDRi12 %const.35, 0, 14, $noreg, debug-location !260 :: (load (s32) from constant-pool); test/adpcm_dec.c:351:55
  STRi12 $r1, $r11, -88, 14, $noreg :: (store (s32) into %stack.17)
  renamable $r1 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !260 :: (dereferenceable load (s32) from @adpcm_dec_dec_nbh); test/adpcm_dec.c:351:55
  BL_pred @adpcm_dec_logsch, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !261; test/adpcm_dec.c:351:23
  $r1 = LDRi12 $r11, -88, 14, $noreg, debug-location !261 :: (load (s32) from %stack.17); test/adpcm_dec.c:351:23
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !262 :: (store (s32) into @adpcm_dec_dec_nbh); test/adpcm_dec.c:351:21
  renamable $r1 = MOVi 10, 14, $noreg, $noreg
  BL_pred @adpcm_dec_scalel, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !263; test/adpcm_dec.c:354:24
  $r3 = LDRi12 $r11, -84, 14, $noreg, debug-location !263 :: (load (s32) from %stack.16); test/adpcm_dec.c:354:24
  $r1 = LDRi12 $r11, -80, 14, $noreg, debug-location !263 :: (load (s32) from %stack.15); test/adpcm_dec.c:354:24
  $r2 = LDRi12 $r11, -76, 14, $noreg, debug-location !263 :: (load (s32) from %stack.14); test/adpcm_dec.c:354:24
  $lr = LDRi12 $r11, -72, 14, $noreg, debug-location !263 :: (load (s32) from %stack.13); test/adpcm_dec.c:354:24
  $r12 = MOVr $r0, 14, $noreg, $noreg, debug-location !263; test/adpcm_dec.c:354:24
  $r0 = LDRi12 $r11, -60, 14, $noreg, debug-location !264 :: (load (s32) from %stack.10); test/adpcm_dec.c:354:22
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !264 :: (store (s32) into @adpcm_dec_dec_deth); test/adpcm_dec.c:354:22
  renamable $r0 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !265 :: (dereferenceable load (s32) from @adpcm_dec_dec_dh); test/adpcm_dec.c:357:22
  renamable $r3 = LDRi12 killed renamable $r3, 0, 14, $noreg, debug-location !266 :: (dereferenceable load (s32) from @adpcm_dec_dec_szh); test/adpcm_dec.c:357:41
  renamable $r3 = nsw ADDrr renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !267; test/adpcm_dec.c:357:39
  renamable $r12 = LDRi12 %const.36, 0, 14, $noreg, debug-location !268 :: (load (s32) from constant-pool); test/adpcm_dec.c:357:20
  STRi12 $r12, $r11, -56, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed renamable $r3, renamable $r12, 0, 14, $noreg, debug-location !268 :: (store (s32) into @adpcm_dec_dec_ph); test/adpcm_dec.c:357:20
  BL_pred @adpcm_dec_upzero, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !269; test/adpcm_dec.c:360:3
  $r1 = LDRi12 $r11, -68, 14, $noreg, debug-location !269 :: (load (s32) from %stack.12); test/adpcm_dec.c:360:3
  $r2 = LDRi12 $r11, -56, 14, $noreg, debug-location !269 :: (load (s32) from %stack.9); test/adpcm_dec.c:360:3
  renamable $r0 = LDRi12 renamable $r7, 0, 14, $noreg, debug-location !270 :: (dereferenceable load (s32) from @adpcm_dec_dec_ah1); test/adpcm_dec.c:364:41
  renamable $r1 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !271 :: (dereferenceable load (s32) from @adpcm_dec_dec_ah2); test/adpcm_dec.c:364:60
  renamable $r2 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !272 :: (dereferenceable load (s32) from @adpcm_dec_dec_ph); test/adpcm_dec.c:365:41
  renamable $r3 = LDRi12 %const.37, 0, 14, $noreg, debug-location !273 :: (load (s32) from constant-pool); test/adpcm_dec.c:365:59
  STRi12 $r3, $r11, -52, 14, $noreg :: (store (s32) into %stack.8)
  renamable $r3 = LDRi12 renamable $r3, 0, 14, $noreg, debug-location !273 :: (dereferenceable load (s32) from @adpcm_dec_dec_ph1); test/adpcm_dec.c:365:59
  renamable $r12 = LDRi12 %const.38, 0, 14, $noreg, debug-location !274 :: (load (s32) from constant-pool); test/adpcm_dec.c:365:78
  STRi12 $r12, $r11, -48, 14, $noreg :: (store (s32) into %stack.7)
  renamable $r12 = LDRi12 renamable $r12, 0, 14, $noreg, debug-location !274 :: (dereferenceable load (s32) from @adpcm_dec_dec_ph2); test/adpcm_dec.c:365:78
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !275; test/adpcm_dec.c:364:23
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !275 :: (store (s32) into stack); test/adpcm_dec.c:364:23
  BL_pred @adpcm_dec_uppol2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !275; test/adpcm_dec.c:364:23
  $r2 = LDRi12 $r11, -56, 14, $noreg, debug-location !275 :: (load (s32) from %stack.9); test/adpcm_dec.c:364:23
  $r3 = LDRi12 $r11, -52, 14, $noreg, debug-location !275 :: (load (s32) from %stack.8); test/adpcm_dec.c:364:23
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !275; test/adpcm_dec.c:364:23
  $r0 = LDRi12 $r11, -68, 14, $noreg, debug-location !276 :: (load (s32) from %stack.12); test/adpcm_dec.c:364:21
  STRi12 renamable $r1, killed renamable $r0, 0, 14, $noreg, debug-location !276 :: (store (s32) into @adpcm_dec_dec_ah2); test/adpcm_dec.c:364:21
  renamable $r0 = LDRi12 renamable $r7, 0, 14, $noreg, debug-location !277 :: (dereferenceable load (s32) from @adpcm_dec_dec_ah1); test/adpcm_dec.c:368:41
  renamable $r2 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !278 :: (dereferenceable load (s32) from @adpcm_dec_dec_ph); test/adpcm_dec.c:369:41
  renamable $r3 = LDRi12 renamable $r3, 0, 14, $noreg, debug-location !279 :: (dereferenceable load (s32) from @adpcm_dec_dec_ph1); test/adpcm_dec.c:369:59
  BL_pred @adpcm_dec_uppol1, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !280; test/adpcm_dec.c:368:23
  $r1 = LDRi12 $r11, -64, 14, $noreg, debug-location !280 :: (load (s32) from %stack.11); test/adpcm_dec.c:368:23
  $r12 = LDRi12 $r11, -60, 14, $noreg, debug-location !280 :: (load (s32) from %stack.10); test/adpcm_dec.c:368:23
  $r2 = LDRi12 $r11, -56, 14, $noreg, debug-location !280 :: (load (s32) from %stack.9); test/adpcm_dec.c:368:23
  $r3 = LDRi12 $r11, -52, 14, $noreg, debug-location !280 :: (load (s32) from %stack.8); test/adpcm_dec.c:368:23
  $lr = LDRi12 $r11, -48, 14, $noreg, debug-location !280 :: (load (s32) from %stack.7); test/adpcm_dec.c:368:23
  $r5 = MOVr $r0, 14, $noreg, $noreg, debug-location !280; test/adpcm_dec.c:368:23
  $r0 = LDRi12 $r11, -44, 14, $noreg, debug-location !281 :: (load (s32) from %stack.6); test/adpcm_dec.c:368:21
  STRi12 killed renamable $r5, killed renamable $r7, 0, 14, $noreg, debug-location !281 :: (store (s32) into @adpcm_dec_dec_ah1); test/adpcm_dec.c:368:21
  renamable $r1 = LDRi12 killed renamable $r1, 0, 14, $noreg, debug-location !282 :: (dereferenceable load (s32) from @adpcm_dec_dec_sh); test/adpcm_dec.c:372:18
  renamable $r12 = LDRi12 killed renamable $r12, 0, 14, $noreg, debug-location !283 :: (dereferenceable load (s32) from @adpcm_dec_dec_dh); test/adpcm_dec.c:372:37
  renamable $r12 = nsw ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !284; test/adpcm_dec.c:372:35
  renamable $r1 = LDRi12 %const.39, 0, 14, $noreg, debug-location !285 :: (load (s32) from constant-pool); test/adpcm_dec.c:372:16
  STRi12 renamable $r12, renamable $r1, 0, 14, $noreg, debug-location !285 :: (store (s32) into @adpcm_dec_rh); test/adpcm_dec.c:372:16
  renamable $r5 = LDRi12 renamable $r4, 0, 14, $noreg, debug-location !286 :: (dereferenceable load (s32) from @adpcm_dec_dec_rh1); test/adpcm_dec.c:375:23
  STRi12 killed renamable $r5, killed renamable $r6, 0, 14, $noreg, debug-location !287 :: (store (s32) into @adpcm_dec_dec_rh2); test/adpcm_dec.c:375:21
  STRi12 killed renamable $r12, killed renamable $r4, 0, 14, $noreg, debug-location !288 :: (store (s32) into @adpcm_dec_dec_rh1); test/adpcm_dec.c:376:21
  renamable $r12 = LDRi12 renamable $r3, 0, 14, $noreg, debug-location !289 :: (dereferenceable load (s32) from @adpcm_dec_dec_ph1); test/adpcm_dec.c:377:23
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !290 :: (store (s32) into @adpcm_dec_dec_ph2); test/adpcm_dec.c:377:21
  renamable $r2 = LDRi12 killed renamable $r2, 0, 14, $noreg, debug-location !291 :: (dereferenceable load (s32) from @adpcm_dec_dec_ph); test/adpcm_dec.c:378:23
  STRi12 killed renamable $r2, killed renamable $r3, 0, 14, $noreg, debug-location !292 :: (store (s32) into @adpcm_dec_dec_ph1); test/adpcm_dec.c:378:21
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !293 :: (dereferenceable load (s32) from @adpcm_dec_rl); test/adpcm_dec.c:383:18
  renamable $r1 = LDRi12 killed renamable $r1, 0, 14, $noreg, debug-location !294 :: (dereferenceable load (s32) from @adpcm_dec_rh); test/adpcm_dec.c:383:33
  renamable $r2 = nsw SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !295; test/adpcm_dec.c:383:31
  renamable $r3 = LDRi12 %const.40, 0, 14, $noreg, debug-location !296 :: (load (s32) from constant-pool); test/adpcm_dec.c:383:16
  STRi12 renamable $r2, killed renamable $r3, 0, 14, $noreg, debug-location !296 :: (store (s32) into @adpcm_dec_xd); test/adpcm_dec.c:383:16
  renamable $r3 = nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !297; test/adpcm_dec.c:384:31
  renamable $r0 = LDRi12 %const.41, 0, 14, $noreg, debug-location !298 :: (load (s32) from constant-pool); test/adpcm_dec.c:384:16
  STRi12 renamable $r3, killed renamable $r0, 0, 14, $noreg, debug-location !298 :: (store (s32) into @adpcm_dec_xs); test/adpcm_dec.c:384:16
  renamable $r0 = LDRi12 %const.42, 0, 14, $noreg, debug-location !299 :: (load (s32) from constant-pool); test/adpcm_dec.c:390:35
  renamable $lr = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !299 :: (dereferenceable load (s32) from `i32* getelementptr inbounds ([24 x i32], [24 x i32]* @adpcm_dec_h, i32 0, i32 0)`); test/adpcm_dec.c:390:35
  renamable $r12 = LDRi12 renamable $r0, 4, 14, $noreg, debug-location !301 :: (dereferenceable load (s32) from `i32* getelementptr inbounds ([24 x i32], [24 x i32]* @adpcm_dec_h, i32 0, i32 1)`); test/adpcm_dec.c:391:35
  early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, debug-location !300; test/adpcm_dec.c:390:31
  early-clobber renamable $r2 = nsw MULv5 killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !302; test/adpcm_dec.c:391:31
  renamable $r3 = nuw ADDri killed renamable $r0, 8, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r12 = LDRi12 %const.43, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $lr = LDRi12 %const.44, 0, 14, $noreg :: (load (s32) from constant-pool)
  STRi12 killed $lr, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r3, $r11, -32, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r2, $r11, -28, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $r11, -24, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -20, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !303; test/adpcm_dec.c:395:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !304 :: (load (s32) from %stack.5); test/adpcm_dec.c:0
  $r2 = LDRi12 $r11, -36, 14, $noreg, debug-location !304 :: (load (s32) from %stack.4); test/adpcm_dec.c:0
  $r3 = LDRi12 $r11, -32, 14, $noreg, debug-location !304 :: (load (s32) from %stack.3); test/adpcm_dec.c:0
  $r12 = LDRi12 $r11, -28, 14, $noreg, debug-location !304 :: (load (s32) from %stack.2); test/adpcm_dec.c:0
  $lr = LDRi12 $r11, -24, 14, $noreg, debug-location !304 :: (load (s32) from %stack.1); test/adpcm_dec.c:0
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !304 :: (load (s32) from %stack.0); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 48, 14, $noreg :: (store (s32) into %stack.37)
  STRi12 killed $lr, $sp, 52, 14, $noreg :: (store (s32) into %stack.36)
  STRi12 killed $r12, $sp, 56, 14, $noreg :: (store (s32) into %stack.35)
  STRi12 killed $r3, $sp, 60, 14, $noreg :: (store (s32) into %stack.34)
  STRi12 killed $r2, $sp, 64, 14, $noreg :: (store (s32) into %stack.33)
  STRi12 killed $r1, $sp, 68, 14, $noreg :: (store (s32) into %stack.32)
  CMPri renamable $r0, 10, 14, $noreg, implicit-def $cpsr, debug-location !306; test/adpcm_dec.c:395:3
  Bcc %bb.4, 0, killed $cpsr, debug-location !306; test/adpcm_dec.c:395:3
  B %bb.2, debug-location !306; test/adpcm_dec.c:395:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  B %bb.3, debug-location !307; test/adpcm_dec.c:398:3

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 48, 14, $noreg, debug-location !308 :: (load (s32) from %stack.37); test/adpcm_dec.c:397:22
  $r6 = LDRi12 $sp, 52, 14, $noreg, debug-location !308 :: (load (s32) from %stack.36); test/adpcm_dec.c:397:22
  $r12 = LDRi12 $sp, 64, 14, $noreg, debug-location !308 :: (load (s32) from %stack.33); test/adpcm_dec.c:397:22
  $r1 = LDRi12 $sp, 60, 14, $noreg, debug-location !308 :: (load (s32) from %stack.34); test/adpcm_dec.c:397:22
  $r7 = LDRi12 $sp, 56, 14, $noreg, debug-location !308 :: (load (s32) from %stack.35); test/adpcm_dec.c:397:22
  $lr = LDRi12 $sp, 68, 14, $noreg, debug-location !308 :: (load (s32) from %stack.32); test/adpcm_dec.c:397:22
  renamable $r3, renamable $lr = LDR_POST_IMM renamable $lr(tied-def 1), $noreg, 4, 14, $noreg, debug-location !308 :: (load (s32) from %ir.ad_ptr.0); test/adpcm_dec.c:397:22
  renamable $r5 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !316 :: (load (s32) from %ir.h_ptr.0); test/adpcm_dec.c:396:38
  renamable $r4 = LDRi12 renamable $r1, 4, 14, $noreg, debug-location !310 :: (load (s32) from %ir.incdec.ptr31); test/adpcm_dec.c:397:38
  early-clobber renamable $r2 = nsw MLAv5 killed renamable $r3, killed renamable $r4, renamable $r7, 14, $noreg, $noreg, debug-location !312; test/adpcm_dec.c:397:9
  renamable $r3 = nuw ADDri renamable $r1, 8, 14, $noreg, $noreg, debug-location !313; test/adpcm_dec.c:397:44
  renamable $r4, renamable $r12 = LDR_POST_IMM renamable $r12(tied-def 1), $noreg, 4, 14, $noreg, debug-location !315 :: (load (s32) from %ir.ac_ptr.0); test/adpcm_dec.c:396:22
  early-clobber renamable $r1 = nsw MLAv5 killed renamable $r4, killed renamable $r5, renamable $r6, 14, $noreg, $noreg, debug-location !318; test/adpcm_dec.c:396:9
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !320; test/adpcm_dec.c:395:25
  STRi12 killed $lr, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r3, $r11, -32, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r2, $r11, -28, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $r11, -24, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -20, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !306; test/adpcm_dec.c:395:3

bb.4.for.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r4 = LDRi12 $sp, 56, 14, $noreg, debug-location !322 :: (load (s32) from %stack.35); test/adpcm_dec.c:401:20
  $r12 = LDRi12 $sp, 52, 14, $noreg, debug-location !322 :: (load (s32) from %stack.36); test/adpcm_dec.c:401:20
  renamable $r2 = LDRi12 %const.43, 0, 14, $noreg, debug-location !322 :: (load (s32) from constant-pool); test/adpcm_dec.c:401:20
  renamable $r0, renamable $r2 = LDR_PRE_IMM renamable $r2(tied-def 1), 40, 14, $noreg, debug-location !322 :: (load (s32) from `i32* getelementptr inbounds ([11 x i32], [11 x i32]* @adpcm_dec_accumc, i32 0, i32 10)`); test/adpcm_dec.c:401:20
  renamable $r1 = LDRi12 %const.42, 0, 14, $noreg, debug-location !323 :: (load (s32) from constant-pool); test/adpcm_dec.c:401:34
  renamable $r3 = LDRi12 renamable $r1, 88, 14, $noreg, debug-location !323 :: (dereferenceable load (s32) from `i32* getelementptr inbounds ([24 x i32], [24 x i32]* @adpcm_dec_h, i32 0, i32 22)`); test/adpcm_dec.c:401:34
  renamable $lr = LDRi12 killed renamable $r1, 92, 14, $noreg, debug-location !327 :: (dereferenceable load (s32) from `i32* getelementptr inbounds ([24 x i32], [24 x i32]* @adpcm_dec_h, i32 0, i32 23)`); test/adpcm_dec.c:402:34
  early-clobber renamable $r1 = nsw MLAv5 killed renamable $r0, killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !325; test/adpcm_dec.c:401:7
  renamable $r12 = LDRi12 %const.44, 0, 14, $noreg, debug-location !326 :: (load (s32) from constant-pool); test/adpcm_dec.c:402:20
  renamable $r3, renamable $r12 = LDR_PRE_IMM renamable $r12(tied-def 1), 40, 14, $noreg, debug-location !326 :: (load (s32) from `i32* getelementptr inbounds ([11 x i32], [11 x i32]* @adpcm_dec_accumd, i32 0, i32 10)`); test/adpcm_dec.c:402:20
  early-clobber renamable $r0 = nsw MLAv5 killed renamable $r3, killed renamable $lr, renamable $r4, 14, $noreg, $noreg, debug-location !329; test/adpcm_dec.c:402:7
  renamable $r1 = MOVsi killed renamable $r1, 113, 14, $noreg, $noreg, debug-location !330; test/adpcm_dec.c:405:25
  renamable $r3 = LDRi12 %const.45, 0, 14, $noreg, debug-location !331 :: (load (s32) from constant-pool); test/adpcm_dec.c:405:19
  STRi12 killed renamable $r1, killed renamable $r3, 0, 14, $noreg, debug-location !331 :: (store (s32) into @adpcm_dec_xout1); test/adpcm_dec.c:405:19
  renamable $r0 = MOVsi killed renamable $r0, 113, 14, $noreg, $noreg, debug-location !332; test/adpcm_dec.c:406:25
  renamable $r1 = LDRi12 %const.46, 0, 14, $noreg, debug-location !333 :: (load (s32) from constant-pool); test/adpcm_dec.c:406:19
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !333 :: (store (s32) into @adpcm_dec_xout2); test/adpcm_dec.c:406:19
  renamable $r0 = SUBri renamable $r12, 4, 14, $noreg, $noreg
  renamable $r3 = SUBri renamable $r2, 4, 14, $noreg, $noreg
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 28, 14, $noreg :: (store (s32) into %stack.42)
  STRi12 killed $r3, $sp, 32, 14, $noreg :: (store (s32) into %stack.41)
  STRi12 killed $r2, $sp, 36, 14, $noreg :: (store (s32) into %stack.40)
  STRi12 killed $r1, $sp, 40, 14, $noreg :: (store (s32) into %stack.39)
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.38)
  B %bb.5, debug-location !334; test/adpcm_dec.c:413:9

bb.5.for.cond47:
; predecessors: %bb.4, %bb.7
  successors: %bb.8, %bb.6

  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !304 :: (load (s32) from %stack.42); test/adpcm_dec.c:0
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !304 :: (load (s32) from %stack.41); test/adpcm_dec.c:0
  $r3 = LDRi12 $sp, 36, 14, $noreg, debug-location !304 :: (load (s32) from %stack.40); test/adpcm_dec.c:0
  $r0 = LDRi12 $sp, 40, 14, $noreg, debug-location !304 :: (load (s32) from %stack.39); test/adpcm_dec.c:0
  $r12 = LDRi12 $sp, 44, 14, $noreg, debug-location !304 :: (load (s32) from %stack.38); test/adpcm_dec.c:0
  STRi12 killed $r12, $sp, 8, 14, $noreg :: (store (s32) into %stack.47)
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.46)
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.45)
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.44)
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.43)
  CMPri renamable $r0, 10, 14, $noreg, implicit-def $cpsr, debug-location !336; test/adpcm_dec.c:413:3
  Bcc %bb.8, 0, killed $cpsr, debug-location !336; test/adpcm_dec.c:413:3
  B %bb.6, debug-location !336; test/adpcm_dec.c:413:3

bb.6.for.body49:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !337 :: (load (s32) from %stack.43); test/adpcm_dec.c:414:17
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !337 :: (load (s32) from %stack.47); test/adpcm_dec.c:414:17
  $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !337 :: (load (s32) from %stack.45); test/adpcm_dec.c:414:17
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !337 :: (load (s32) from %stack.44); test/adpcm_dec.c:414:17
  renamable $r2 = LDRi12 renamable $r2, 0, 14, $noreg, debug-location !337 :: (load (s32) from %ir.ac_ptr1.0); test/adpcm_dec.c:414:17
  STRi12 killed renamable $r2, renamable $r3, 0, 14, $noreg, debug-location !338 :: (store (s32) into %ir.ac_ptr.1); test/adpcm_dec.c:414:15
  renamable $r0 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !339 :: (load (s32) from %ir.ad_ptr1.0); test/adpcm_dec.c:415:17
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !340 :: (store (s32) into %ir.ad_ptr.1); test/adpcm_dec.c:415:15
  B %bb.7, debug-location !341; test/adpcm_dec.c:416:3

bb.7.for.inc54:
; predecessors: %bb.6
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !342 :: (load (s32) from %stack.46); test/adpcm_dec.c:415:12
  $r3 = LDRi12 $sp, 20, 14, $noreg, debug-location !342 :: (load (s32) from %stack.44); test/adpcm_dec.c:415:12
  $r2 = LDRi12 $sp, 16, 14, $noreg, debug-location !342 :: (load (s32) from %stack.45); test/adpcm_dec.c:415:12
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !342 :: (load (s32) from %stack.47); test/adpcm_dec.c:415:12
  $r12 = LDRi12 $sp, 24, 14, $noreg, debug-location !342 :: (load (s32) from %stack.43); test/adpcm_dec.c:415:12
  renamable $r12 = SUBri renamable $r12, 4, 14, $noreg, $noreg, debug-location !342; test/adpcm_dec.c:415:12
  renamable $r0 = SUBri renamable $r0, 4, 14, $noreg, $noreg, debug-location !343; test/adpcm_dec.c:415:25
  renamable $r2 = SUBri renamable $r2, 4, 14, $noreg, $noreg, debug-location !344; test/adpcm_dec.c:414:12
  renamable $r3 = SUBri renamable $r3, 4, 14, $noreg, $noreg, debug-location !345; test/adpcm_dec.c:414:25
  renamable $r1 = nuw nsw ADDri renamable $r1, 1, 14, $noreg, $noreg, debug-location !346; test/adpcm_dec.c:413:25
  STRi12 killed $r12, $sp, 28, 14, $noreg :: (store (s32) into %stack.42)
  STRi12 killed $r3, $sp, 32, 14, $noreg :: (store (s32) into %stack.41)
  STRi12 killed $r2, $sp, 36, 14, $noreg :: (store (s32) into %stack.40)
  STRi12 killed $r1, $sp, 40, 14, $noreg :: (store (s32) into %stack.39)
  STRi12 killed $r0, $sp, 44, 14, $noreg :: (store (s32) into %stack.38)
  B %bb.5, debug-location !336; test/adpcm_dec.c:413:3

bb.8.for.end56:
; predecessors: %bb.5

  renamable $r0 = LDRi12 %const.40, 0, 14, $noreg, debug-location !348 :: (load (s32) from constant-pool); test/adpcm_dec.c:418:13
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !348 :: (dereferenceable load (s32) from @adpcm_dec_xd); test/adpcm_dec.c:418:13
  renamable $r1 = LDRi12 %const.43, 0, 14, $noreg, debug-location !349 :: (load (s32) from constant-pool); test/adpcm_dec.c:418:11
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !349 :: (store (s32) into `i32* getelementptr inbounds ([11 x i32], [11 x i32]* @adpcm_dec_accumc, i32 0, i32 0)`); test/adpcm_dec.c:418:11
  renamable $r0 = LDRi12 %const.41, 0, 14, $noreg, debug-location !350 :: (load (s32) from constant-pool); test/adpcm_dec.c:419:13
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !350 :: (dereferenceable load (s32) from @adpcm_dec_xs); test/adpcm_dec.c:419:13
  renamable $r1 = LDRi12 %const.44, 0, 14, $noreg, debug-location !351 :: (load (s32) from constant-pool); test/adpcm_dec.c:419:11
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !351 :: (store (s32) into `i32* getelementptr inbounds ([11 x i32], [11 x i32]* @adpcm_dec_accumd, i32 0, i32 0)`); test/adpcm_dec.c:419:11
  $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !352; test/adpcm_dec.c:421:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r11, def $lr, debug-location !352; test/adpcm_dec.c:421:3
  BX_RET 14, $noreg, debug-location !352; test/adpcm_dec.c:421:3

bb.9 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4
  CONSTPOOL_ENTRY 4, %const.4, 4
  CONSTPOOL_ENTRY 5, %const.5, 4
  CONSTPOOL_ENTRY 6, %const.6, 4
  CONSTPOOL_ENTRY 7, %const.7, 4
  CONSTPOOL_ENTRY 8, %const.8, 4
  CONSTPOOL_ENTRY 9, %const.9, 4
  CONSTPOOL_ENTRY 10, %const.10, 4
  CONSTPOOL_ENTRY 11, %const.11, 4
  CONSTPOOL_ENTRY 12, %const.12, 4
  CONSTPOOL_ENTRY 13, %const.13, 4
  CONSTPOOL_ENTRY 14, %const.14, 4
  CONSTPOOL_ENTRY 15, %const.15, 4
  CONSTPOOL_ENTRY 16, %const.16, 4
  CONSTPOOL_ENTRY 17, %const.17, 4
  CONSTPOOL_ENTRY 18, %const.18, 4
  CONSTPOOL_ENTRY 19, %const.19, 4
  CONSTPOOL_ENTRY 20, %const.20, 4
  CONSTPOOL_ENTRY 21, %const.21, 4
  CONSTPOOL_ENTRY 22, %const.22, 4
  CONSTPOOL_ENTRY 23, %const.23, 4
  CONSTPOOL_ENTRY 24, %const.24, 4
  CONSTPOOL_ENTRY 25, %const.25, 4
  CONSTPOOL_ENTRY 26, %const.26, 4
  CONSTPOOL_ENTRY 27, %const.27, 4
  CONSTPOOL_ENTRY 28, %const.28, 4
  CONSTPOOL_ENTRY 29, %const.29, 4
  CONSTPOOL_ENTRY 30, %const.30, 4
  CONSTPOOL_ENTRY 31, %const.31, 4
  CONSTPOOL_ENTRY 32, %const.32, 4
  CONSTPOOL_ENTRY 33, %const.33, 4
  CONSTPOOL_ENTRY 34, %const.34, 4
  CONSTPOOL_ENTRY 35, %const.35, 4
  CONSTPOOL_ENTRY 36, %const.36, 4
  CONSTPOOL_ENTRY 37, %const.37, 4
  CONSTPOOL_ENTRY 38, %const.38, 4
  CONSTPOOL_ENTRY 39, %const.39, 4
  CONSTPOOL_ENTRY 40, %const.40, 4
  CONSTPOOL_ENTRY 41, %const.41, 4
  CONSTPOOL_ENTRY 42, %const.42, 4
  CONSTPOOL_ENTRY 43, %const.43, 4
  CONSTPOOL_ENTRY 44, %const.44, 4
  CONSTPOOL_ENTRY 45, %const.45, 4
  CONSTPOOL_ENTRY 46, %const.46, 4

# End machine code for function adpcm_dec_decode.

# Machine code for function adpcm_dec_filtez: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-44]
  fi#7: size=4, align=4, at location [SP-48]
  fi#8: size=4, align=4, at location [SP-4]
  fi#9: size=4, align=4, at location [SP-8]
  fi#10: size=4, align=4, at location [SP-12]
  fi#11: size=4, align=4, at location [SP-16]
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 32, 14, $noreg, $noreg
  renamable $r2 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !354 :: (load (s32) from %ir.bpl); test/adpcm_dec.c:433:18
  renamable $r12 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !355 :: (load (s32) from %ir.dlt); test/adpcm_dec.c:433:31
  early-clobber renamable $r3 = nsw MULv5 killed renamable $r2, killed renamable $r12, 14, $noreg, $noreg, debug-location !356; test/adpcm_dec.c:433:27
  renamable $r2 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !357; test/adpcm_dec.c:437:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r3 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  $r1 = LDRi12 $r11, -16, 14, $noreg :: (load (s32) from %stack.1)
  $r2 = LDRi12 $r11, -12, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r3, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  renamable $r2 = nuw ADDri killed renamable $r2, 4, 14, $noreg, $noreg, debug-location !358; test/adpcm_dec.c:0
  STRi12 killed $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r1 = nuw ADDri killed renamable $r1, 4, 14, $noreg, $noreg, debug-location !358; test/adpcm_dec.c:0
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  CMPri renamable $r0, 6, 14, $noreg, implicit-def $cpsr, debug-location !360; test/adpcm_dec.c:437:3
  Bcc %bb.4, 0, killed $cpsr, debug-location !360; test/adpcm_dec.c:437:3
  B %bb.2, debug-location !360; test/adpcm_dec.c:437:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  B %bb.3, debug-location !361; test/adpcm_dec.c:438:5

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !362 :: (load (s32) from %stack.5); test/adpcm_dec.c:438:21
  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !362 :: (load (s32) from %stack.4); test/adpcm_dec.c:438:21
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !362 :: (load (s32) from %stack.7); test/adpcm_dec.c:438:21
  $r4 = LDRi12 $sp, 4, 14, $noreg, debug-location !362 :: (load (s32) from %stack.6); test/adpcm_dec.c:438:21
  renamable $r12 = LDRi12 renamable $r0, 0, 14, $noreg, debug-location !362 :: (load (s32) from %ir.bpl.addr.0); test/adpcm_dec.c:438:21
  renamable $lr = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !363 :: (load (s32) from %ir.dlt.addr.0); test/adpcm_dec.c:438:34
  early-clobber renamable $r3 = nsw MLAv5 killed renamable $r12, killed renamable $lr, renamable $r4, 14, $noreg, $noreg, debug-location !365; test/adpcm_dec.c:438:8
  renamable $r2 = nuw nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !366; test/adpcm_dec.c:437:24
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !360; test/adpcm_dec.c:437:3

bb.4.for.end:
; predecessors: %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !369 :: (load (s32) from %stack.6); test/adpcm_dec.c:440:24
  renamable $r0 = MOVsi killed renamable $r0, 113, 14, $noreg, $noreg, debug-location !369; test/adpcm_dec.c:440:24
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !370; test/adpcm_dec.c:440:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !370; test/adpcm_dec.c:440:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !370; test/adpcm_dec.c:440:3

# End machine code for function adpcm_dec_filtez.

# Machine code for function adpcm_dec_filtep: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3
  $r12 = MOVr killed $r1, 14, $noreg, $noreg
  $r1 = MOVr killed $r0, 14, $noreg, $noreg
  early-clobber renamable $r0 = MULv5 killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !373; test/adpcm_dec.c:452:21
  renamable $r0 = MOVsi killed renamable $r0, 10, 14, $noreg, $noreg, debug-location !373; test/adpcm_dec.c:452:21
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !375; test/adpcm_dec.c:454:22
  renamable $r0 = nsw ADDrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !376; test/adpcm_dec.c:454:6
  renamable $r0 = MOVsi killed renamable $r0, 121, 14, $noreg, $noreg, debug-location !377; test/adpcm_dec.c:456:24
  BX_RET 14, $noreg, implicit killed $r0, debug-location !378; test/adpcm_dec.c:456:3

# End machine code for function adpcm_dec_filtep.

# Machine code for function adpcm_dec_logscl: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @adpcm_dec_wl_code_table, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  renamable $r1 = RSBrsi killed renamable $r1, renamable $r1, 58, 14, $noreg, $noreg, debug-location !380; test/adpcm_dec.c:467:22
  renamable $r2 = BICri killed renamable $r0, 3, 14, $noreg, $noreg, debug-location !382; test/adpcm_dec.c:468:49
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !383 :: (load (s32) from constant-pool); test/adpcm_dec.c:468:21
  renamable $r0 = LDRrs killed renamable $r0, killed renamable $r2, 0, 14, $noreg, debug-location !383 :: (load (s32) from %ir.arrayidx); test/adpcm_dec.c:468:21
  renamable $r0 = nsw ADDrsi killed renamable $r0, killed renamable $r1, 57, 14, $noreg, $noreg, debug-location !384; test/adpcm_dec.c:468:19
  CMNri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !386; test/adpcm_dec.c:470:8
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  Bcc %bb.2, 12, killed $cpsr, debug-location !386; test/adpcm_dec.c:470:8
  B %bb.1, debug-location !386; test/adpcm_dec.c:470:8

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.2, debug-location !387; test/adpcm_dec.c:471:5

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !388 :: (load (s32) from %stack.0); test/adpcm_dec.c:0
  CMPri renamable $r0, 18432, 14, $noreg, implicit-def $cpsr, debug-location !390; test/adpcm_dec.c:472:8
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  Bcc %bb.4, 13, killed $cpsr, debug-location !390; test/adpcm_dec.c:472:8
  B %bb.3, debug-location !390; test/adpcm_dec.c:472:8

bb.3.if.then3:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  renamable $r0 = MOVi 18432, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.4, debug-location !391; test/adpcm_dec.c:473:5

bb.4.if.end4:
; predecessors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !388 :: (load (s32) from %stack.1); test/adpcm_dec.c:0
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !392; test/adpcm_dec.c:475:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !392; test/adpcm_dec.c:475:3

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function adpcm_dec_logscl.

# Machine code for function adpcm_dec_scalel: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @adpcm_dec_ilb_table, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r0 = MOVi 124, 14, $noreg, $noreg
  renamable $r3 = ANDrsi killed renamable $r0, renamable $r2, 35, 14, $noreg, $noreg, debug-location !397; test/adpcm_dec.c:487:9
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !397 :: (load (s32) from constant-pool); test/adpcm_dec.c:487:9
  renamable $r0 = LDRrs killed renamable $r0, killed renamable $r3, 0, 14, $noreg, debug-location !397 :: (load (s32) from %ir.arrayidx); test/adpcm_dec.c:487:9
  renamable $r1 = SUBrsi killed renamable $r1, killed renamable $r2, 89, 14, $noreg, $noreg, debug-location !399; test/adpcm_dec.c:487:60
  renamable $r1 = ADDri killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !399; test/adpcm_dec.c:487:60
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !400; test/adpcm_dec.c:487:36
  renamable $r0 = MOVsi killed renamable $r0, 26, 14, $noreg, $noreg, debug-location !401; test/adpcm_dec.c:489:16
  BX_RET 14, $noreg, implicit killed $r0, debug-location !402; test/adpcm_dec.c:489:3

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function adpcm_dec_scalel.

# Machine code for function adpcm_dec_upzero: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-24]
  fi#6: size=4, align=4, at location [SP-28]
  fi#7: size=4, align=4, at location [SP-32]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1, %bb.6
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 32, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !405; test/adpcm_dec.c:501:8
  Bcc %bb.6, 1, killed $cpsr, debug-location !405; test/adpcm_dec.c:501:8
  B %bb.1, debug-location !405; test/adpcm_dec.c:501:8

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.2, debug-location !406; test/adpcm_dec.c:503:11

bb.2.for.cond:
; predecessors: %bb.1, %bb.4
  successors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !407 :: (load (s32) from %stack.3); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  CMPri renamable $r0, 6, 14, $noreg, implicit-def $cpsr, debug-location !409; test/adpcm_dec.c:503:5
  Bcc %bb.5, 0, killed $cpsr, debug-location !409; test/adpcm_dec.c:503:5
  B %bb.3, debug-location !409; test/adpcm_dec.c:503:5

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !410 :: (load (s32) from %stack.2); test/adpcm_dec.c:504:36
  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !410 :: (load (s32) from %stack.4); test/adpcm_dec.c:504:36
  renamable $r0 = LDRrs renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !410 :: (load (s32) from %ir.arrayidx); test/adpcm_dec.c:504:36
  renamable $r0 = RSBrsi killed renamable $r0, renamable $r0, 66, 14, $noreg, $noreg, debug-location !411; test/adpcm_dec.c:504:34
  renamable $r0 = MOVsi killed renamable $r0, 65, 14, $noreg, $noreg, debug-location !412; test/adpcm_dec.c:504:47
  STRrs killed renamable $r0, renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !414 :: (store (s32) into %ir.arrayidx2); test/adpcm_dec.c:504:16
  B %bb.4, debug-location !415; test/adpcm_dec.c:505:5

bb.4.for.inc:
; predecessors: %bb.3
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !416 :: (load (s32) from %stack.4); test/adpcm_dec.c:503:26
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !416; test/adpcm_dec.c:503:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.2, debug-location !409; test/adpcm_dec.c:503:5

bb.5.for.end:
; predecessors: %bb.2
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  B %bb.14, debug-location !418; test/adpcm_dec.c:507:3

bb.6.if.else:
; predecessors: %bb.0
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.7, debug-location !419; test/adpcm_dec.c:509:11

bb.7.for.cond3:
; predecessors: %bb.6, %bb.12
  successors: %bb.13, %bb.8

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !407 :: (load (s32) from %stack.5); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  CMPri renamable $r0, 6, 14, $noreg, implicit-def $cpsr, debug-location !421; test/adpcm_dec.c:509:5
  Bcc %bb.13, 0, killed $cpsr, debug-location !421; test/adpcm_dec.c:509:5
  B %bb.8, debug-location !421; test/adpcm_dec.c:509:5

bb.8.for.body5:
; predecessors: %bb.7
  successors: %bb.9, %bb.10

  $r2 = LDRi12 $sp, 28, 14, $noreg, debug-location !422 :: (load (s32) from %stack.0); test/adpcm_dec.c:510:26
  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !422 :: (load (s32) from %stack.1); test/adpcm_dec.c:510:26
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !422 :: (load (s32) from %stack.6); test/adpcm_dec.c:510:26
  renamable $r1 = LDRrs renamable $r0, renamable $r1, 16386, 14, $noreg, debug-location !422 :: (load (s32) from %ir.arrayidx6); test/adpcm_dec.c:510:26
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !423; test/adpcm_dec.c:510:24
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !425; test/adpcm_dec.c:510:12
  Bcc %bb.10, 4, killed $cpsr, debug-location !425; test/adpcm_dec.c:510:12
  B %bb.9, debug-location !425; test/adpcm_dec.c:510:12

bb.9.if.then9:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  renamable $r0 = MOVi 128, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.7)
  B %bb.11, debug-location !426; test/adpcm_dec.c:511:9

bb.10.if.else10:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  renamable $r0 = MVNi 127, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.7)
  B %bb.11

bb.11.if.end:
; predecessors: %bb.10, %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !407 :: (load (s32) from %stack.2); test/adpcm_dec.c:0
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !407 :: (load (s32) from %stack.6); test/adpcm_dec.c:0
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !407 :: (load (s32) from %stack.7); test/adpcm_dec.c:0
  renamable $r3 = LDRrs renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !427 :: (load (s32) from %ir.arrayidx11); test/adpcm_dec.c:515:31
  renamable $r3 = RSBrsi killed renamable $r3, renamable $r3, 66, 14, $noreg, $noreg, debug-location !428; test/adpcm_dec.c:515:29
  renamable $r0 = nsw ADDrsi killed renamable $r0, killed renamable $r3, 65, 14, $noreg, $noreg, debug-location !430; test/adpcm_dec.c:516:22
  STRrs killed renamable $r0, renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !432 :: (store (s32) into %ir.arrayidx14); test/adpcm_dec.c:516:16
  B %bb.12, debug-location !433; test/adpcm_dec.c:517:5

bb.12.for.inc15:
; predecessors: %bb.11
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !434 :: (load (s32) from %stack.6); test/adpcm_dec.c:509:26
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !434; test/adpcm_dec.c:509:26
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.7, debug-location !421; test/adpcm_dec.c:509:5

bb.13.for.end17:
; predecessors: %bb.7
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  B %bb.14

bb.14.if.end18:
; predecessors: %bb.13, %bb.5

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !436 :: (load (s32) from %stack.0); test/adpcm_dec.c:522:15
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !436 :: (load (s32) from %stack.1); test/adpcm_dec.c:522:15
  renamable $r2 = LDRi12 renamable $r1, 16, 14, $noreg, debug-location !436 :: (load (s32) from %ir.arrayidx19); test/adpcm_dec.c:522:15
  STRi12 killed renamable $r2, renamable $r1, 20, 14, $noreg, debug-location !438 :: (store (s32) into %ir.arrayidx20); test/adpcm_dec.c:522:13
  renamable $r2 = LDRi12 renamable $r1, 12, 14, $noreg, debug-location !439 :: (load (s32) from %ir.arrayidx21); test/adpcm_dec.c:523:15
  STRi12 killed renamable $r2, renamable $r1, 16, 14, $noreg, debug-location !441 :: (store (s32) into %ir.arrayidx22); test/adpcm_dec.c:523:13
  renamable $r2 = LDRi12 renamable $r1, 8, 14, $noreg, debug-location !442 :: (load (s32) from %ir.arrayidx23); test/adpcm_dec.c:524:15
  STRi12 killed renamable $r2, renamable $r1, 12, 14, $noreg, debug-location !444 :: (store (s32) into %ir.arrayidx24); test/adpcm_dec.c:524:13
  renamable $r2 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !445 :: (load (s32) from %ir.dlti); test/adpcm_dec.c:525:15
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !447 :: (store (s32) into %ir.arrayidx26); test/adpcm_dec.c:525:13
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !448 :: (store (s32) into %ir.dlti); test/adpcm_dec.c:526:13
  $sp = frame-destroy ADDri killed $sp, 32, 14, $noreg, $noreg, debug-location !449; test/adpcm_dec.c:528:3
  BX_RET 14, $noreg, debug-location !449; test/adpcm_dec.c:528:3

# End machine code for function adpcm_dec_upzero.

# Machine code for function adpcm_dec_uppol2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-24]
  fi#6: size=4, align=4, at location [SP-28]
  fi#7: size=4, align=4, at location [SP-32]
  fi#8: size=4, align=4, at location [SP-36]
Constant Pool:
  cp#0: -12288, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 36, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 36
  STRi12 $r2, $sp, 16, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r1, $sp, 20, 14, $noreg :: (store (s32) into %stack.3)
  renamable $r1 = LDRi12 $sp, 36, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = nsw MOVsi killed renamable $r0, 18, 14, $noreg, $noreg, debug-location !451; test/adpcm_dec.c:540:12
  STRi12 $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.1)
  early-clobber renamable $r1 = nsw MULv5 renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !452; test/adpcm_dec.c:541:20
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !454; test/adpcm_dec.c:541:8
  STRi12 killed $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.0)
  Bcc %bb.2, 4, killed $cpsr, debug-location !454; test/adpcm_dec.c:541:8
  B %bb.1, debug-location !454; test/adpcm_dec.c:541:8

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !455 :: (load (s32) from %stack.1); test/adpcm_dec.c:542:11
  renamable $r0 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !455; test/adpcm_dec.c:542:11
  STRi12 killed $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.2, debug-location !456; test/adpcm_dec.c:542:5

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3, %bb.4

  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !457 :: (load (s32) from %stack.4); test/adpcm_dec.c:0
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !457 :: (load (s32) from %stack.2); test/adpcm_dec.c:0
  $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !457 :: (load (s32) from %stack.0); test/adpcm_dec.c:0
  renamable $r0 = MOVsi killed renamable $r0, 57, 14, $noreg, $noreg, debug-location !458; test/adpcm_dec.c:543:13
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.5)
  early-clobber renamable $r0 = nsw MULv5 renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !459; test/adpcm_dec.c:545:20
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !461; test/adpcm_dec.c:545:8
  Bcc %bb.4, 4, killed $cpsr, debug-location !461; test/adpcm_dec.c:545:8
  B %bb.3, debug-location !461; test/adpcm_dec.c:545:8

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !462 :: (load (s32) from %stack.5); test/adpcm_dec.c:546:15
  renamable $r0 = nsw ADDri renamable $r0, 128, 14, $noreg, $noreg, debug-location !462; test/adpcm_dec.c:546:15
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.6)
  B %bb.5, debug-location !463; test/adpcm_dec.c:547:3

bb.4.if.else:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !464 :: (load (s32) from %stack.5); test/adpcm_dec.c:548:15
  renamable $r0 = nsw SUBri renamable $r0, 128, 14, $noreg, $noreg, debug-location !464; test/adpcm_dec.c:548:15
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.6)
  B %bb.5

bb.5.if.end6:
; predecessors: %bb.4, %bb.3
  successors: %bb.6, %bb.7

  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !457 :: (load (s32) from %stack.3); test/adpcm_dec.c:0
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !457 :: (load (s32) from %stack.6); test/adpcm_dec.c:0
  renamable $r1 = RSBrsi renamable $r1, renamable $r1, 58, 14, $noreg, $noreg, debug-location !465; test/adpcm_dec.c:549:23
  renamable $r0 = nsw ADDrsi killed renamable $r0, killed renamable $r1, 57, 14, $noreg, $noreg, debug-location !467; test/adpcm_dec.c:549:14
  CMPri renamable $r0, 12288, 14, $noreg, implicit-def $cpsr, debug-location !469; test/adpcm_dec.c:552:8
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.7)
  Bcc %bb.7, 13, killed $cpsr, debug-location !469; test/adpcm_dec.c:552:8
  B %bb.6, debug-location !469; test/adpcm_dec.c:552:8

bb.6.if.then11:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $r0 = MOVi 12288, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.7)
  B %bb.7, debug-location !470; test/adpcm_dec.c:553:5

bb.7.if.end12:
; predecessors: %bb.5, %bb.6
  successors: %bb.8, %bb.9

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !457 :: (load (s32) from %stack.7); test/adpcm_dec.c:0
  CMNri renamable $r0, 12288, 14, $noreg, implicit-def $cpsr, debug-location !472; test/adpcm_dec.c:554:8
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.8)
  Bcc %bb.9, 10, killed $cpsr, debug-location !472; test/adpcm_dec.c:554:8
  B %bb.8, debug-location !472; test/adpcm_dec.c:554:8

bb.8.if.then14:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.9, debug-location !473; test/adpcm_dec.c:555:5

bb.9.if.end15:
; predecessors: %bb.7, %bb.8

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !457 :: (load (s32) from %stack.8); test/adpcm_dec.c:0
  $sp = frame-destroy ADDri killed $sp, 36, 14, $noreg, $noreg, debug-location !474; test/adpcm_dec.c:557:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !474; test/adpcm_dec.c:557:3

bb.10 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function adpcm_dec_uppol2.

# Machine code for function adpcm_dec_uppol1: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-24]
  fi#6: size=4, align=4, at location [SP-28]
  fi#7: size=4, align=4, at location [SP-32]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 32, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = RSBrsi killed renamable $r0, renamable $r0, 66, 14, $noreg, $noreg, debug-location !476; test/adpcm_dec.c:569:23
  renamable $r0 = MOVsi killed renamable $r0, 65, 14, $noreg, $noreg, debug-location !477; test/adpcm_dec.c:569:32
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.0)
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !478; test/adpcm_dec.c:570:20
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !480; test/adpcm_dec.c:570:8
  Bcc %bb.2, 4, killed $cpsr, debug-location !480; test/adpcm_dec.c:570:8
  B %bb.1, debug-location !480; test/adpcm_dec.c:570:8

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !481 :: (load (s32) from %stack.0); test/adpcm_dec.c:571:23
  renamable $r0 = nsw ADDri renamable $r0, 192, 14, $noreg, $noreg, debug-location !481; test/adpcm_dec.c:571:23
  STRi12 killed $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.3, debug-location !482; test/adpcm_dec.c:572:3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !483 :: (load (s32) from %stack.0); test/adpcm_dec.c:573:23
  renamable $r0 = nsw SUBri renamable $r0, 192, 14, $noreg, $noreg, debug-location !483; test/adpcm_dec.c:573:23
  STRi12 killed $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.3

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4, %bb.5

  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !484 :: (load (s32) from %stack.1); test/adpcm_dec.c:0
  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !484 :: (load (s32) from %stack.2); test/adpcm_dec.c:0
  renamable $r2 = SUBri renamable $r1, 15360, 14, $noreg, $noreg, debug-location !485; test/adpcm_dec.c:576:15
  STRi12 $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r1 = nsw RSBri renamable $r1, 15360, 14, $noreg, $noreg, debug-location !485; test/adpcm_dec.c:576:15
  STRi12 $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !487; test/adpcm_dec.c:577:8
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  Bcc %bb.5, 13, killed $cpsr, debug-location !487; test/adpcm_dec.c:577:8
  B %bb.4, debug-location !487; test/adpcm_dec.c:577:8

bb.4.if.then4:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.5, debug-location !488; test/adpcm_dec.c:578:5

bb.5.if.end5:
; predecessors: %bb.3, %bb.4
  successors: %bb.6, %bb.7

  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !484 :: (load (s32) from %stack.5); test/adpcm_dec.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !484 :: (load (s32) from %stack.3); test/adpcm_dec.c:0
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !490; test/adpcm_dec.c:579:8
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.7)
  Bcc %bb.7, 10, killed $cpsr, debug-location !490; test/adpcm_dec.c:579:8
  B %bb.6, debug-location !490; test/adpcm_dec.c:579:8

bb.6.if.then8:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg :: (load (s32) from %stack.6)
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.7)
  B %bb.7, debug-location !491; test/adpcm_dec.c:580:5

bb.7.if.end10:
; predecessors: %bb.5, %bb.6

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !484 :: (load (s32) from %stack.7); test/adpcm_dec.c:0
  $sp = frame-destroy ADDri killed $sp, 32, 14, $noreg, $noreg, debug-location !492; test/adpcm_dec.c:582:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !492; test/adpcm_dec.c:582:3

# End machine code for function adpcm_dec_uppol1.

# Machine code for function adpcm_dec_logsch: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @adpcm_dec_wh_code_table, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r1 = RSBrsi killed renamable $r1, renamable $r1, 58, 14, $noreg, $noreg, debug-location !494; test/adpcm_dec.c:593:22
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !496 :: (load (s32) from constant-pool); test/adpcm_dec.c:594:14
  renamable $r0 = LDRrs killed renamable $r0, killed renamable $r2, 16386, 14, $noreg, debug-location !496 :: (load (s32) from %ir.arrayidx); test/adpcm_dec.c:594:14
  renamable $r0 = nsw ADDrsi killed renamable $r0, killed renamable $r1, 57, 14, $noreg, $noreg, debug-location !497; test/adpcm_dec.c:594:12
  CMNri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !499; test/adpcm_dec.c:596:8
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  Bcc %bb.2, 12, killed $cpsr, debug-location !499; test/adpcm_dec.c:596:8
  B %bb.1, debug-location !499; test/adpcm_dec.c:596:8

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.2, debug-location !500; test/adpcm_dec.c:597:5

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !501 :: (load (s32) from %stack.0); test/adpcm_dec.c:0
  CMPri renamable $r0, 22528, 14, $noreg, implicit-def $cpsr, debug-location !503; test/adpcm_dec.c:598:8
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  Bcc %bb.4, 13, killed $cpsr, debug-location !503; test/adpcm_dec.c:598:8
  B %bb.3, debug-location !503; test/adpcm_dec.c:598:8

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  renamable $r0 = MOVi 22528, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.4, debug-location !504; test/adpcm_dec.c:599:5

bb.4.if.end3:
; predecessors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !501 :: (load (s32) from %stack.1); test/adpcm_dec.c:0
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !505; test/adpcm_dec.c:601:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !505; test/adpcm_dec.c:601:3

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function adpcm_dec_logsch.

# Machine code for function adpcm_dec_reset: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-24]
  fi#6: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: @adpcm_dec_dec_detl, align=4
  cp#1: @adpcm_dec_detl, align=4
  cp#2: @adpcm_dec_dec_deth, align=4
  cp#3: @adpcm_dec_deth, align=4
  cp#4: @adpcm_dec_rlt2, align=4
  cp#5: @adpcm_dec_rlt1, align=4
  cp#6: @adpcm_dec_plt2, align=4
  cp#7: @adpcm_dec_plt1, align=4
  cp#8: @adpcm_dec_al2, align=4
  cp#9: @adpcm_dec_al1, align=4
  cp#10: @adpcm_dec_nbl, align=4
  cp#11: @adpcm_dec_rh2, align=4
  cp#12: @adpcm_dec_rh1, align=4
  cp#13: @adpcm_dec_ph2, align=4
  cp#14: @adpcm_dec_ph1, align=4
  cp#15: @adpcm_dec_ah2, align=4
  cp#16: @adpcm_dec_ah1, align=4
  cp#17: @adpcm_dec_nbh, align=4
  cp#18: @adpcm_dec_dec_rlt2, align=4
  cp#19: @adpcm_dec_dec_rlt1, align=4
  cp#20: @adpcm_dec_dec_plt2, align=4
  cp#21: @adpcm_dec_dec_plt1, align=4
  cp#22: @adpcm_dec_dec_al2, align=4
  cp#23: @adpcm_dec_dec_al1, align=4
  cp#24: @adpcm_dec_dec_nbl, align=4
  cp#25: @adpcm_dec_dec_rh2, align=4
  cp#26: @adpcm_dec_dec_rh1, align=4
  cp#27: @adpcm_dec_dec_ph2, align=4
  cp#28: @adpcm_dec_dec_ph1, align=4
  cp#29: @adpcm_dec_dec_ah2, align=4
  cp#30: @adpcm_dec_dec_ah1, align=4
  cp#31: @adpcm_dec_dec_nbh, align=4
  cp#32: @adpcm_dec_delay_dhx, align=4
  cp#33: @adpcm_dec_dec_del_dltx, align=4
  cp#34: @adpcm_dec_dec_del_dhx, align=4
  cp#35: @adpcm_dec_delay_bph, align=4
  cp#36: @adpcm_dec_dec_del_bpl, align=4
  cp#37: @adpcm_dec_dec_del_bph, align=4
  cp#38: @adpcm_dec_accumc, align=4
  cp#39: @adpcm_dec_accumd, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $sp = frame-setup SUBri killed $sp, 28, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 28
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !507 :: (load (s32) from constant-pool); test/adpcm_dec.c:615:39
  renamable $r0 = MOVi 32, 14, $noreg, $noreg
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !507 :: (store (s32) into @adpcm_dec_dec_detl); test/adpcm_dec.c:615:39
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !508 :: (load (s32) from constant-pool); test/adpcm_dec.c:615:18
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !508 :: (store (s32) into @adpcm_dec_detl); test/adpcm_dec.c:615:18
  renamable $r1 = LDRi12 %const.2, 0, 14, $noreg, debug-location !509 :: (load (s32) from constant-pool); test/adpcm_dec.c:616:39
  renamable $r0 = MOVi 8, 14, $noreg, $noreg
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !509 :: (store (s32) into @adpcm_dec_dec_deth); test/adpcm_dec.c:616:39
  renamable $r1 = LDRi12 %const.3, 0, 14, $noreg, debug-location !510 :: (load (s32) from constant-pool); test/adpcm_dec.c:616:18
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !510 :: (store (s32) into @adpcm_dec_deth); test/adpcm_dec.c:616:18
  renamable $r1 = LDRi12 %const.4, 0, 14, $noreg, debug-location !511 :: (load (s32) from constant-pool); test/adpcm_dec.c:618:69
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !511 :: (store (s32) into @adpcm_dec_rlt2); test/adpcm_dec.c:618:69
  renamable $r1 = LDRi12 %const.5, 0, 14, $noreg, debug-location !512 :: (load (s32) from constant-pool); test/adpcm_dec.c:618:52
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !512 :: (store (s32) into @adpcm_dec_rlt1); test/adpcm_dec.c:618:52
  renamable $r1 = LDRi12 %const.6, 0, 14, $noreg, debug-location !513 :: (load (s32) from constant-pool); test/adpcm_dec.c:618:35
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !513 :: (store (s32) into @adpcm_dec_plt2); test/adpcm_dec.c:618:35
  renamable $r1 = LDRi12 %const.7, 0, 14, $noreg, debug-location !514 :: (load (s32) from constant-pool); test/adpcm_dec.c:617:66
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !514 :: (store (s32) into @adpcm_dec_plt1); test/adpcm_dec.c:617:66
  renamable $r1 = LDRi12 %const.8, 0, 14, $noreg, debug-location !515 :: (load (s32) from constant-pool); test/adpcm_dec.c:617:49
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !515 :: (store (s32) into @adpcm_dec_al2); test/adpcm_dec.c:617:49
  renamable $r1 = LDRi12 %const.9, 0, 14, $noreg, debug-location !516 :: (load (s32) from constant-pool); test/adpcm_dec.c:617:33
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !516 :: (store (s32) into @adpcm_dec_al1); test/adpcm_dec.c:617:33
  renamable $r1 = LDRi12 %const.10, 0, 14, $noreg, debug-location !517 :: (load (s32) from constant-pool); test/adpcm_dec.c:617:17
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !517 :: (store (s32) into @adpcm_dec_nbl); test/adpcm_dec.c:617:17
  renamable $r1 = LDRi12 %const.11, 0, 14, $noreg, debug-location !518 :: (load (s32) from constant-pool); test/adpcm_dec.c:620:67
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !518 :: (store (s32) into @adpcm_dec_rh2); test/adpcm_dec.c:620:67
  renamable $r1 = LDRi12 %const.12, 0, 14, $noreg, debug-location !519 :: (load (s32) from constant-pool); test/adpcm_dec.c:620:51
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !519 :: (store (s32) into @adpcm_dec_rh1); test/adpcm_dec.c:620:51
  renamable $r1 = LDRi12 %const.13, 0, 14, $noreg, debug-location !520 :: (load (s32) from constant-pool); test/adpcm_dec.c:619:81
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !520 :: (store (s32) into @adpcm_dec_ph2); test/adpcm_dec.c:619:81
  renamable $r1 = LDRi12 %const.14, 0, 14, $noreg, debug-location !521 :: (load (s32) from constant-pool); test/adpcm_dec.c:619:65
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !521 :: (store (s32) into @adpcm_dec_ph1); test/adpcm_dec.c:619:65
  renamable $r1 = LDRi12 %const.15, 0, 14, $noreg, debug-location !522 :: (load (s32) from constant-pool); test/adpcm_dec.c:619:49
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !522 :: (store (s32) into @adpcm_dec_ah2); test/adpcm_dec.c:619:49
  renamable $r1 = LDRi12 %const.16, 0, 14, $noreg, debug-location !523 :: (load (s32) from constant-pool); test/adpcm_dec.c:619:33
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !523 :: (store (s32) into @adpcm_dec_ah1); test/adpcm_dec.c:619:33
  renamable $r1 = LDRi12 %const.17, 0, 14, $noreg, debug-location !524 :: (load (s32) from constant-pool); test/adpcm_dec.c:619:17
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !524 :: (store (s32) into @adpcm_dec_nbh); test/adpcm_dec.c:619:17
  renamable $r1 = LDRi12 %const.18, 0, 14, $noreg, debug-location !525 :: (load (s32) from constant-pool); test/adpcm_dec.c:622:68
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !525 :: (store (s32) into @adpcm_dec_dec_rlt2); test/adpcm_dec.c:622:68
  renamable $r1 = LDRi12 %const.19, 0, 14, $noreg, debug-location !526 :: (load (s32) from constant-pool); test/adpcm_dec.c:622:47
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !526 :: (store (s32) into @adpcm_dec_dec_rlt1); test/adpcm_dec.c:622:47
  renamable $r1 = LDRi12 %const.20, 0, 14, $noreg, debug-location !527 :: (load (s32) from constant-pool); test/adpcm_dec.c:622:26
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !527 :: (store (s32) into @adpcm_dec_dec_plt2); test/adpcm_dec.c:622:26
  renamable $r1 = LDRi12 %const.21, 0, 14, $noreg, debug-location !528 :: (load (s32) from constant-pool); test/adpcm_dec.c:621:82
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !528 :: (store (s32) into @adpcm_dec_dec_plt1); test/adpcm_dec.c:621:82
  renamable $r1 = LDRi12 %const.22, 0, 14, $noreg, debug-location !529 :: (load (s32) from constant-pool); test/adpcm_dec.c:621:61
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !529 :: (store (s32) into @adpcm_dec_dec_al2); test/adpcm_dec.c:621:61
  renamable $r1 = LDRi12 %const.23, 0, 14, $noreg, debug-location !530 :: (load (s32) from constant-pool); test/adpcm_dec.c:621:41
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !530 :: (store (s32) into @adpcm_dec_dec_al1); test/adpcm_dec.c:621:41
  renamable $r1 = LDRi12 %const.24, 0, 14, $noreg, debug-location !531 :: (load (s32) from constant-pool); test/adpcm_dec.c:621:21
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !531 :: (store (s32) into @adpcm_dec_dec_nbl); test/adpcm_dec.c:621:21
  renamable $r1 = LDRi12 %const.25, 0, 14, $noreg, debug-location !532 :: (load (s32) from constant-pool); test/adpcm_dec.c:624:65
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !532 :: (store (s32) into @adpcm_dec_dec_rh2); test/adpcm_dec.c:624:65
  renamable $r1 = LDRi12 %const.26, 0, 14, $noreg, debug-location !533 :: (load (s32) from constant-pool); test/adpcm_dec.c:624:45
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !533 :: (store (s32) into @adpcm_dec_dec_rh1); test/adpcm_dec.c:624:45
  renamable $r1 = LDRi12 %const.27, 0, 14, $noreg, debug-location !534 :: (load (s32) from constant-pool); test/adpcm_dec.c:624:25
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !534 :: (store (s32) into @adpcm_dec_dec_ph2); test/adpcm_dec.c:624:25
  renamable $r1 = LDRi12 %const.28, 0, 14, $noreg, debug-location !535 :: (load (s32) from constant-pool); test/adpcm_dec.c:623:81
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !535 :: (store (s32) into @adpcm_dec_dec_ph1); test/adpcm_dec.c:623:81
  renamable $r1 = LDRi12 %const.29, 0, 14, $noreg, debug-location !536 :: (load (s32) from constant-pool); test/adpcm_dec.c:623:61
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !536 :: (store (s32) into @adpcm_dec_dec_ah2); test/adpcm_dec.c:623:61
  renamable $r1 = LDRi12 %const.30, 0, 14, $noreg, debug-location !537 :: (load (s32) from constant-pool); test/adpcm_dec.c:623:41
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !537 :: (store (s32) into @adpcm_dec_dec_ah1); test/adpcm_dec.c:623:41
  renamable $r1 = LDRi12 %const.31, 0, 14, $noreg, debug-location !538 :: (load (s32) from constant-pool); test/adpcm_dec.c:623:21
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !538 :: (store (s32) into @adpcm_dec_dec_nbh); test/adpcm_dec.c:623:21
  STRi12 killed $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !539; test/adpcm_dec.c:627:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !540 :: (load (s32) from %stack.0); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.2)
  CMPri renamable $r0, 6, 14, $noreg, implicit-def $cpsr, debug-location !542; test/adpcm_dec.c:627:3
  Bcc %bb.4, 0, killed $cpsr, debug-location !542; test/adpcm_dec.c:627:3
  B %bb.2, debug-location !542; test/adpcm_dec.c:627:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r2 = LDRi12 $sp, 16, 14, $noreg, debug-location !543 :: (load (s32) from %stack.2); test/adpcm_dec.c:629:5
  renamable $r1 = LDRi12 %const.32, 0, 14, $noreg, debug-location !543 :: (load (s32) from constant-pool); test/adpcm_dec.c:629:5
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !544 :: (store (s32) into %ir.arrayidx); test/adpcm_dec.c:629:30
  renamable $r1 = LDRi12 %const.33, 0, 14, $noreg, debug-location !545 :: (load (s32) from constant-pool); test/adpcm_dec.c:630:5
  STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !546 :: (store (s32) into %ir.arrayidx1); test/adpcm_dec.c:630:33
  renamable $r1 = LDRi12 %const.34, 0, 14, $noreg, debug-location !547 :: (load (s32) from constant-pool); test/adpcm_dec.c:631:5
  STRrs killed renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !548 :: (store (s32) into %ir.arrayidx2); test/adpcm_dec.c:631:32
  B %bb.3, debug-location !549; test/adpcm_dec.c:632:3

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !550 :: (load (s32) from %stack.2); test/adpcm_dec.c:627:24
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !550; test/adpcm_dec.c:627:24
  STRi12 killed $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !542; test/adpcm_dec.c:627:3

bb.4.for.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.5, debug-location !552; test/adpcm_dec.c:635:9

bb.5.for.cond3:
; predecessors: %bb.4, %bb.7
  successors: %bb.8, %bb.6

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !540 :: (load (s32) from %stack.3); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.4)
  CMPri renamable $r0, 6, 14, $noreg, implicit-def $cpsr, debug-location !554; test/adpcm_dec.c:635:3
  Bcc %bb.8, 0, killed $cpsr, debug-location !554; test/adpcm_dec.c:635:3
  B %bb.6, debug-location !554; test/adpcm_dec.c:635:3

bb.6.for.body5:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !555 :: (load (s32) from %stack.4); test/adpcm_dec.c:637:5
  renamable $r1 = LDRi12 %const.35, 0, 14, $noreg, debug-location !555 :: (load (s32) from constant-pool); test/adpcm_dec.c:637:5
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !556 :: (store (s32) into %ir.arrayidx6); test/adpcm_dec.c:637:30
  renamable $r1 = LDRi12 %const.36, 0, 14, $noreg, debug-location !557 :: (load (s32) from constant-pool); test/adpcm_dec.c:638:5
  STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !558 :: (store (s32) into %ir.arrayidx7); test/adpcm_dec.c:638:32
  renamable $r1 = LDRi12 %const.37, 0, 14, $noreg, debug-location !559 :: (load (s32) from constant-pool); test/adpcm_dec.c:639:5
  STRrs killed renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !560 :: (store (s32) into %ir.arrayidx8); test/adpcm_dec.c:639:32
  B %bb.7, debug-location !561; test/adpcm_dec.c:640:3

bb.7.for.inc9:
; predecessors: %bb.6
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !562 :: (load (s32) from %stack.4); test/adpcm_dec.c:635:24
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !562; test/adpcm_dec.c:635:24
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.5, debug-location !554; test/adpcm_dec.c:635:3

bb.8.for.end11:
; predecessors: %bb.5
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !564; test/adpcm_dec.c:643:9

bb.9.for.cond12:
; predecessors: %bb.8, %bb.11
  successors: %bb.12, %bb.10

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !540 :: (load (s32) from %stack.5); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.6)
  CMPri renamable $r0, 11, 14, $noreg, implicit-def $cpsr, debug-location !566; test/adpcm_dec.c:643:3
  Bcc %bb.12, 0, killed $cpsr, debug-location !566; test/adpcm_dec.c:643:3
  B %bb.10, debug-location !566; test/adpcm_dec.c:643:3

bb.10.for.body14:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !567 :: (load (s32) from %stack.6); test/adpcm_dec.c:644:5
  renamable $r1 = LDRi12 %const.38, 0, 14, $noreg, debug-location !567 :: (load (s32) from constant-pool); test/adpcm_dec.c:644:5
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !568 :: (store (s32) into %ir.arrayidx15); test/adpcm_dec.c:644:27
  renamable $r1 = LDRi12 %const.39, 0, 14, $noreg, debug-location !569 :: (load (s32) from constant-pool); test/adpcm_dec.c:645:5
  STRrs killed renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !570 :: (store (s32) into %ir.arrayidx16); test/adpcm_dec.c:645:27
  B %bb.11, debug-location !571; test/adpcm_dec.c:646:3

bb.11.for.inc17:
; predecessors: %bb.10
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !572 :: (load (s32) from %stack.6); test/adpcm_dec.c:643:25
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !572; test/adpcm_dec.c:643:25
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !566; test/adpcm_dec.c:643:3

bb.12.for.end19:
; predecessors: %bb.9

  $sp = frame-destroy ADDri killed $sp, 28, 14, $noreg, $noreg, debug-location !574; test/adpcm_dec.c:648:3
  BX_RET 14, $noreg, debug-location !574; test/adpcm_dec.c:648:3

bb.13 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4
  CONSTPOOL_ENTRY 4, %const.4, 4
  CONSTPOOL_ENTRY 5, %const.5, 4
  CONSTPOOL_ENTRY 6, %const.6, 4
  CONSTPOOL_ENTRY 7, %const.7, 4
  CONSTPOOL_ENTRY 8, %const.8, 4
  CONSTPOOL_ENTRY 9, %const.9, 4
  CONSTPOOL_ENTRY 10, %const.10, 4
  CONSTPOOL_ENTRY 11, %const.11, 4
  CONSTPOOL_ENTRY 12, %const.12, 4
  CONSTPOOL_ENTRY 13, %const.13, 4
  CONSTPOOL_ENTRY 14, %const.14, 4
  CONSTPOOL_ENTRY 15, %const.15, 4
  CONSTPOOL_ENTRY 16, %const.16, 4
  CONSTPOOL_ENTRY 17, %const.17, 4
  CONSTPOOL_ENTRY 18, %const.18, 4
  CONSTPOOL_ENTRY 19, %const.19, 4
  CONSTPOOL_ENTRY 20, %const.20, 4
  CONSTPOOL_ENTRY 21, %const.21, 4
  CONSTPOOL_ENTRY 22, %const.22, 4
  CONSTPOOL_ENTRY 23, %const.23, 4
  CONSTPOOL_ENTRY 24, %const.24, 4
  CONSTPOOL_ENTRY 25, %const.25, 4
  CONSTPOOL_ENTRY 26, %const.26, 4
  CONSTPOOL_ENTRY 27, %const.27, 4
  CONSTPOOL_ENTRY 28, %const.28, 4
  CONSTPOOL_ENTRY 29, %const.29, 4
  CONSTPOOL_ENTRY 30, %const.30, 4
  CONSTPOOL_ENTRY 31, %const.31, 4
  CONSTPOOL_ENTRY 32, %const.32, 4
  CONSTPOOL_ENTRY 33, %const.33, 4
  CONSTPOOL_ENTRY 34, %const.34, 4
  CONSTPOOL_ENTRY 35, %const.35, 4
  CONSTPOOL_ENTRY 36, %const.36, 4
  CONSTPOOL_ENTRY 37, %const.37, 4
  CONSTPOOL_ENTRY 38, %const.38, 4
  CONSTPOOL_ENTRY 39, %const.39, 4

# End machine code for function adpcm_dec_reset.

# Machine code for function adpcm_dec_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 6282000, align=4
  cp#1: @adpcm_dec_test_data, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 renamable $r0, $r11, -4, 14, $noreg, debug-location !576 :: (volatile store (s32) into %ir.x); test/adpcm_dec.c:654:16
  BL_pred @adpcm_dec_reset, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !577; test/adpcm_dec.c:660:3
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !577 :: (load (s32) from %stack.2); test/adpcm_dec.c:660:3
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.1, debug-location !578; test/adpcm_dec.c:667:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !579 :: (load (s32) from %stack.1); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  CMPri renamable $r0, 3, 14, $noreg, implicit-def $cpsr, debug-location !581; test/adpcm_dec.c:667:3
  Bcc %bb.4, 0, killed $cpsr, debug-location !581; test/adpcm_dec.c:667:3
  B %bb.2, debug-location !581; test/adpcm_dec.c:667:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 0, 14, $noreg :: (load (s32) from %stack.3)
  renamable $r2 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = nuw nsw MULv5 renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !582; test/adpcm_dec.c:668:66
  BL_pred @adpcm_dec_cos, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !583; test/adpcm_dec.c:668:44
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !583 :: (load (s32) from %stack.3); test/adpcm_dec.c:668:44
  renamable $r3 = ADDrsi killed renamable $r0, renamable $r0, 18, 14, $noreg, $noreg, debug-location !584; test/adpcm_dec.c:668:42
  renamable $r0 = MOVsi renamable $r3, 10, 14, $noreg, $noreg, debug-location !584; test/adpcm_dec.c:668:42
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !585 :: (load (s32) from constant-pool); test/adpcm_dec.c:668:5
  STRrs killed renamable $r0, renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !586 :: (store (s32) into %ir.arrayidx); test/adpcm_dec.c:668:30
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !587 :: (volatile dereferenceable load (s32) from %ir.x); test/adpcm_dec.c:671:33
  renamable $r0 = nsw ADDrsi killed renamable $r0, killed renamable $r3, 10, 14, $noreg, $noreg, debug-location !589; test/adpcm_dec.c:671:30
  STRrs killed renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !589 :: (store (s32) into %ir.arrayidx3); test/adpcm_dec.c:671:30
  B %bb.3, debug-location !590; test/adpcm_dec.c:672:3

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !591 :: (load (s32) from %stack.3); test/adpcm_dec.c:667:29
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !591; test/adpcm_dec.c:667:29
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.1, debug-location !581; test/adpcm_dec.c:667:3

bb.4.for.end:
; predecessors: %bb.1

  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !593; test/adpcm_dec.c:673:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !593; test/adpcm_dec.c:673:1
  BX_RET 14, $noreg, debug-location !593; test/adpcm_dec.c:673:1

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function adpcm_dec_init.

# Machine code for function adpcm_dec_return: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @adpcm_dec_result, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !595; test/adpcm_dec.c:680:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.2, %bb.4

  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !596 :: (load (s32) from %stack.1); test/adpcm_dec.c:0
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !596 :: (load (s32) from %stack.0); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  CMPri renamable $r0, 3, 14, $noreg, implicit-def $cpsr, debug-location !598; test/adpcm_dec.c:680:3
  Bcc %bb.4, 8, killed $cpsr, debug-location !598; test/adpcm_dec.c:680:3
  B %bb.2, debug-location !598; test/adpcm_dec.c:680:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  B %bb.3, debug-location !599; test/adpcm_dec.c:681:5

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !600 :: (load (s32) from %stack.3); test/adpcm_dec.c:681:20
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !600 :: (load (s32) from %stack.2); test/adpcm_dec.c:681:20
  renamable $r3 = LDRi12 %const.0, 0, 14, $noreg, debug-location !600 :: (load (s32) from constant-pool); test/adpcm_dec.c:681:20
  renamable $r2 = LDRrs renamable $r3, renamable $r0, 16386, 14, $noreg, debug-location !600 :: (load (s32) from %ir.arrayidx); test/adpcm_dec.c:681:20
  renamable $r12 = ORRri renamable $r0, 1, 14, $noreg, $noreg, debug-location !602; test/adpcm_dec.c:681:44
  renamable $r3 = LDRrs killed renamable $r3, killed renamable $r12, 16386, 14, $noreg, debug-location !602 :: (load (s32) from %ir.arrayidx1); test/adpcm_dec.c:681:44
  renamable $r2 = nsw ADDrr killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !603; test/adpcm_dec.c:681:42
  renamable $r1 = nsw ADDrr renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !604; test/adpcm_dec.c:681:15
  renamable $r0 = nuw nsw ADDri renamable $r0, 2, 14, $noreg, $noreg, debug-location !605; test/adpcm_dec.c:680:30
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !598; test/adpcm_dec.c:680:3

bb.4.for.end:
; predecessors: %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg :: (load (s32) from %stack.2)
  renamable $r1 = MVNi 1, 14, $noreg, $noreg
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, def $cpsr, debug-location !608; test/adpcm_dec.c:683:20
  $r0 = MOVi 1, 1, killed $cpsr, $noreg, implicit renamable $r0, debug-location !608; test/adpcm_dec.c:683:20
  $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !609; test/adpcm_dec.c:683:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !609; test/adpcm_dec.c:683:3

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function adpcm_dec_return.

# Machine code for function adpcm_dec_adpcm_dec: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @adpcm_dec_compressed, align=4
  cp#1: @adpcm_dec_xout1, align=4
  cp#2: @adpcm_dec_result, align=4
  cp#3: @adpcm_dec_xout2, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !611; test/adpcm_dec.c:695:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.2, %bb.4

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !612 :: (load (s32) from %stack.0); test/adpcm_dec.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  CMPri renamable $r0, 3, 14, $noreg, implicit-def $cpsr, debug-location !614; test/adpcm_dec.c:695:3
  Bcc %bb.4, 8, killed $cpsr, debug-location !614; test/adpcm_dec.c:695:3
  B %bb.2, debug-location !614; test/adpcm_dec.c:695:3

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !615 :: (load (s32) from %stack.1); test/adpcm_dec.c:696:23
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !615 :: (load (s32) from constant-pool); test/adpcm_dec.c:696:23
  renamable $r0 = LDRrs killed renamable $r0, renamable $r1, 16385, 14, $noreg, debug-location !615 :: (load (s32) from %ir.arrayidx); test/adpcm_dec.c:696:23
  BL_pred @adpcm_dec_decode, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, debug-location !616; test/adpcm_dec.c:696:5
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !616 :: (load (s32) from %stack.1); test/adpcm_dec.c:696:5
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !617 :: (load (s32) from constant-pool); test/adpcm_dec.c:697:29
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !617 :: (dereferenceable load (s32) from @adpcm_dec_xout1); test/adpcm_dec.c:697:29
  renamable $r1 = LDRi12 %const.2, 0, 14, $noreg, debug-location !618 :: (load (s32) from constant-pool); test/adpcm_dec.c:697:5
  STRrs killed renamable $r0, renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !619 :: (store (s32) into %ir.arrayidx1); test/adpcm_dec.c:697:27
  renamable $r0 = LDRi12 %const.3, 0, 14, $noreg, debug-location !620 :: (load (s32) from constant-pool); test/adpcm_dec.c:698:33
  renamable $r0 = LDRi12 killed renamable $r0, 0, 14, $noreg, debug-location !620 :: (dereferenceable load (s32) from @adpcm_dec_xout2); test/adpcm_dec.c:698:33
  renamable $r2 = ORRri renamable $r2, 1, 14, $noreg, $noreg, debug-location !622; test/adpcm_dec.c:698:5
  STRrs killed renamable $r0, killed renamable $r1, killed renamable $r2, 16386, 14, $noreg, debug-location !623 :: (store (s32) into %ir.arrayidx2); test/adpcm_dec.c:698:31
  B %bb.3, debug-location !624; test/adpcm_dec.c:699:3

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !625 :: (load (s32) from %stack.1); test/adpcm_dec.c:695:32
  renamable $r0 = nuw nsw ADDri renamable $r0, 2, 14, $noreg, $noreg, debug-location !625; test/adpcm_dec.c:695:32
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !614; test/adpcm_dec.c:695:3

bb.4.for.end:
; predecessors: %bb.1

  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !627; test/adpcm_dec.c:701:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !627; test/adpcm_dec.c:701:1
  BX_RET 14, $noreg, debug-location !627; test/adpcm_dec.c:701:1

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function adpcm_dec_adpcm_dec.

# Machine code for function adpcm_dec: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  BL_pred @adpcm_dec_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !629; test/adpcm_dec.c:706:3
  BL_pred @adpcm_dec_adpcm_dec, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !630; test/adpcm_dec.c:707:3
  BL_pred @adpcm_dec_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !631; test/adpcm_dec.c:709:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !632; test/adpcm_dec.c:710:1
  BX_RET 14, $noreg, debug-location !632; test/adpcm_dec.c:710:1

# End machine code for function adpcm_dec.

# Machine code for function bs: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  renamable $r0 = MOVi 8, 14, $noreg, $noreg
  BL_pred @binary_search, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !635; test/bs.c:73:2
  renamable $r0 = IMPLICIT_DEF
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !636; test/bs.c:74:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !636; test/bs.c:74:1

# End machine code for function bs.

# Machine code for function binary_search: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-24]
  fi#6: size=4, align=4, at location [SP-28]
  fi#7: size=4, align=4, at location [SP-32]
  fi#8: size=4, align=4, at location [SP-36]
  fi#9: size=4, align=4, at location [SP-40]
  fi#10: size=4, align=4, at location [SP-44]
  fi#11: size=4, align=4, at location [SP-48]
  fi#12: size=4, align=4, at location [SP-52]
Constant Pool:
  cp#0: @data, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0
  $sp = frame-setup SUBri killed $sp, 52, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 52
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.3)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r1 = MVNi 0, 14, $noreg, $noreg
  renamable $r2 = MOVi 14, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 40, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $sp, 48, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !638; test/bs.c:83:3

bb.1.while.cond:
; predecessors: %bb.0, %bb.8
  successors: %bb.9, %bb.2

  $r1 = LDRi12 $sp, 40, 14, $noreg, debug-location !640 :: (load (s32) from %stack.2); test/bs.c:80:7
  $r2 = LDRi12 $sp, 44, 14, $noreg, debug-location !640 :: (load (s32) from %stack.1); test/bs.c:80:7
  $r0 = LDRi12 $sp, 48, 14, $noreg, debug-location !640 :: (load (s32) from %stack.0); test/bs.c:80:7
  STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 $r1, $sp, 32, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !638; test/bs.c:83:3
  Bcc %bb.9, 12, killed $cpsr, debug-location !638; test/bs.c:83:3
  B %bb.2, debug-location !638; test/bs.c:83:3

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !642 :: (load (s32) from %stack.3); test/bs.c:84:16
  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !642 :: (load (s32) from %stack.6); test/bs.c:84:16
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !642 :: (load (s32) from %stack.4); test/bs.c:84:16
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !642; test/bs.c:84:16
  renamable $r2 = MOVsi killed renamable $r0, 9, 14, $noreg, $noreg, debug-location !643; test/bs.c:84:22
  STRi12 $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.7)
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !644 :: (load (s32) from constant-pool); test/bs.c:85:20
  renamable $r0 = LDRrs killed renamable $r0, renamable $r2, 16387, 14, $noreg, debug-location !644 :: (load (s32) from %ir.key); test/bs.c:85:20
  CMPrr killed renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !646; test/bs.c:85:10
  Bcc %bb.4, 1, killed $cpsr, debug-location !646; test/bs.c:85:10
  B %bb.3, debug-location !646; test/bs.c:85:10

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !647 :: (load (s32) from %stack.6); test/bs.c:86:16
  $r3 = LDRi12 $sp, 20, 14, $noreg, debug-location !647 :: (load (s32) from %stack.7); test/bs.c:86:16
  renamable $r2 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !647; test/bs.c:86:16
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !648 :: (load (s32) from constant-pool); test/bs.c:87:26
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r3, 26, 14, $noreg, $noreg, debug-location !648; test/bs.c:87:26
  renamable $r1 = LDRi12 killed renamable $r1, 4, 14, $noreg, debug-location !648 :: (load (s32) from %ir.value); test/bs.c:87:26
  STRi12 killed $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.8, debug-location !649; test/bs.c:91:5

bb.4.if.else:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !650 :: (load (s32) from %stack.3); test/bs.c:93:22
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !650 :: (load (s32) from %stack.7); test/bs.c:93:22
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !650 :: (load (s32) from constant-pool); test/bs.c:93:22
  renamable $r0 = LDRrs killed renamable $r0, renamable $r2, 16387, 14, $noreg, debug-location !650 :: (load (s32) from %ir.key4); test/bs.c:93:22
  CMPrr killed renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !652; test/bs.c:93:12
  Bcc %bb.6, 13, killed $cpsr, debug-location !652; test/bs.c:93:12
  B %bb.5, debug-location !652; test/bs.c:93:12

bb.5.if.then6:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !653 :: (load (s32) from %stack.6); test/bs.c:94:11
  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !653 :: (load (s32) from %stack.7); test/bs.c:94:11
  renamable $r1 = nsw SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !653; test/bs.c:94:11
  STRi12 killed $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.11)
  B %bb.7, debug-location !654; test/bs.c:98:7

bb.6.if.else8:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !655 :: (load (s32) from %stack.4); test/bs.c:100:25
  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !655 :: (load (s32) from %stack.7); test/bs.c:100:25
  renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !655; test/bs.c:100:25
  STRi12 killed $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.11)
  B %bb.7

bb.7.if.end:
; predecessors: %bb.6, %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !639 :: (load (s32) from %stack.5); test/bs.c:0
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !639 :: (load (s32) from %stack.12); test/bs.c:0
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !639 :: (load (s32) from %stack.11); test/bs.c:0
  STRi12 killed $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.8

bb.8.if.end10:
; predecessors: %bb.7, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !640 :: (load (s32) from %stack.10); test/bs.c:80:7
  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !640 :: (load (s32) from %stack.9); test/bs.c:80:7
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !640 :: (load (s32) from %stack.8); test/bs.c:80:7
  STRi12 killed $r2, $sp, 40, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $sp, 48, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !638; test/bs.c:83:3

bb.9.while.end:
; predecessors: %bb.1

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !658 :: (load (s32) from %stack.5); test/bs.c:112:3
  $sp = frame-destroy ADDri killed $sp, 52, 14, $noreg, $noreg, debug-location !658; test/bs.c:112:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !658; test/bs.c:112:3

bb.10 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function binary_search.

# Machine code for function expint: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  renamable $r0 = MOVi 50, 14, $noreg, $noreg
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  BL_pred @expint_expint, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !661; test/expint.c:33:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !662; test/expint.c:38:1
  BX_RET 14, $noreg, debug-location !662; test/expint.c:38:1

# End machine code for function expint.

# Machine code for function expint_expint: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-44]
  fi#7: size=4, align=4, at location [SP-48]
  fi#8: size=4, align=4, at location [SP-52]
  fi#9: size=4, align=4, at location [SP-56]
  fi#10: size=4, align=4, at location [SP-60]
  fi#11: size=4, align=4, at location [SP-64]
  fi#12: size=4, align=4, at location [SP-68]
  fi#13: size=4, align=4, at location [SP-72]
  fi#14: size=4, align=4, at location [SP-76]
  fi#15: size=4, align=4, at location [SP-80]
  fi#16: size=4, align=4, at location [SP-84]
  fi#17: size=4, align=4, at location [SP-88]
  fi#18: size=4, align=4, at location [SP-92]
  fi#19: size=4, align=4, at location [SP-96]
  fi#20: size=4, align=4, at location [SP-100]
  fi#21: size=4, align=4, at location [SP-104]
  fi#22: size=4, align=4, at location [SP-108]
  fi#23: size=4, align=4, at location [SP-112]
  fi#24: size=4, align=4, at location [SP-116]
  fi#25: size=4, align=4, at location [SP-120]
  fi#26: size=4, align=4, at location [SP-124]
  fi#27: size=4, align=4, at location [SP-128]
  fi#28: size=4, align=4, at location [SP-132]
  fi#29: size=4, align=4, at location [SP-136]
  fi#30: size=4, align=4, at location [SP-140]
  fi#31: size=4, align=4, at location [SP-144]
  fi#32: size=4, align=4, at location [SP-4]
  fi#33: size=4, align=4, at location [SP-8]
  fi#34: size=4, align=4, at location [SP-12]
  fi#35: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: 30000000, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.8
  liveins: $r0, $r1, $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 128, 14, $noreg, $noreg
  STRi12 $r1, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !664; test/expint.c:66:8
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r1, 2, 14, $noreg, implicit-def $cpsr, debug-location !666; test/expint.c:70:6
  Bcc %bb.8, 11, killed $cpsr, debug-location !666; test/expint.c:70:6
  B %bb.1, debug-location !666; test/expint.c:70:6

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !667 :: (load (s32) from %stack.2); test/expint.c:74:10
  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !667 :: (load (s32) from %stack.1); test/expint.c:74:10
  renamable $r2 = nsw ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !667; test/expint.c:74:10
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  $r3 = MOVi 1152, 14, $noreg, $noreg
  $r3 = ORRri $r3, 1998848, 14, $noreg, $noreg
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $r11, -40, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r3, $r11, -36, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r2, $r11, -32, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.2, debug-location !668; test/expint.c:84:12

bb.2.for.cond:
; predecessors: %bb.1, %bb.6
  successors: %bb.7, %bb.3

  $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !669 :: (load (s32) from %stack.7); test/expint.c:0
  $r2 = LDRi12 $r11, -36, 14, $noreg, debug-location !669 :: (load (s32) from %stack.6); test/expint.c:0
  $r3 = LDRi12 $r11, -32, 14, $noreg, debug-location !669 :: (load (s32) from %stack.5); test/expint.c:0
  $r12 = LDRi12 $r11, -28, 14, $noreg, debug-location !669 :: (load (s32) from %stack.4); test/expint.c:0
  $r0 = LDRi12 $r11, -24, 14, $noreg, debug-location !669 :: (load (s32) from %stack.3); test/expint.c:0
  STRi12 $r0, $r11, -60, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 killed $r12, $r11, -56, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r3, $r11, -52, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r2, $r11, -48, 14, $noreg :: (store (s32) into %stack.9)
  STRi12 killed $r1, $r11, -44, 14, $noreg :: (store (s32) into %stack.8)
  CMPri renamable $r0, 101, 14, $noreg, implicit-def $cpsr, debug-location !671; test/expint.c:84:7
  Bcc %bb.7, 0, killed $cpsr, debug-location !671; test/expint.c:84:7
  B %bb.3, debug-location !671; test/expint.c:84:7

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.4, %bb.5

  $r1 = LDRi12 $r11, -48, 14, $noreg, debug-location !672 :: (load (s32) from %stack.9); test/expint.c:88:22
  $r3 = LDRi12 $r11, -44, 14, $noreg, debug-location !672 :: (load (s32) from %stack.8); test/expint.c:88:22
  $r2 = LDRi12 $r11, -52, 14, $noreg, debug-location !672 :: (load (s32) from %stack.10); test/expint.c:88:22
  $r12 = LDRi12 $r11, -60, 14, $noreg, debug-location !672 :: (load (s32) from %stack.12); test/expint.c:88:22
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !672 :: (load (s32) from %stack.0); test/expint.c:88:22
  renamable $lr = nsw ADDrr renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !672; test/expint.c:88:22
  early-clobber renamable $r0 = MULv5 renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !673; test/expint.c:88:17
  renamable $r0 = RSBri killed renamable $r0, 0, 14, $noreg, $noreg, debug-location !673; test/expint.c:88:17
  renamable $r12 = nsw ADDri renamable $r2, 2, 14, $noreg, $noreg, debug-location !674; test/expint.c:90:13
  STRi12 $r12, $sp, 64, 14, $noreg :: (store (s32) into %stack.15)
  early-clobber renamable $r2 = nsw MLAv5 renamable $r3, renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !676; test/expint.c:92:20
  renamable $r2 = ADDrsi killed renamable $r2, renamable $r2, 18, 14, $noreg, $noreg, debug-location !677; test/expint.c:92:15
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !677; test/expint.c:92:15
  STRi12 $r2, $sp, 60, 14, $noreg :: (store (s32) into %stack.16)
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !678; test/expint.c:94:16
  $r3 = LDRi12 $sp, 60, 14, $noreg, debug-location !678 :: (load (s32) from %stack.16); test/expint.c:94:16
  $r2 = LDRi12 $r11, -56, 14, $noreg, debug-location !678 :: (load (s32) from %stack.11); test/expint.c:94:16
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !678; test/expint.c:94:16
  $r0 = LDRi12 $sp, 64, 14, $noreg, debug-location !679 :: (load (s32) from %stack.15); test/expint.c:94:14
  renamable $r1 = nsw ADDrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !679; test/expint.c:94:14
  STRi12 $r1, $sp, 68, 14, $noreg :: (store (s32) into %stack.14)
  early-clobber renamable $r0 = nsw MULv5 renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !680; test/expint.c:96:16
  early-clobber renamable $r1 = nsw MULv5 renamable $r2, renamable $r0, 14, $noreg, $noreg, debug-location !681; test/expint.c:98:13
  STRi12 killed $r1, $r11, -64, 14, $noreg :: (store (s32) into %stack.13)
  $r1 = MOVi 15, 14, $noreg, $noreg
  $r1 = ORRri $r1, 9984, 14, $noreg, $noreg
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !683; test/expint.c:100:15
  Bcc %bb.5, 12, killed $cpsr, debug-location !683; test/expint.c:100:15
  B %bb.4, debug-location !683; test/expint.c:100:15

bb.4.if.then12:
; predecessors: %bb.3
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  $r1 = LDRi12 $r11, -64, 14, $noreg, debug-location !684 :: (load (s32) from %stack.13); test/expint.c:104:20
  $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !684 :: (load (s32) from %stack.2); test/expint.c:104:20
  early-clobber renamable $r0 = MULv5 renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !684; test/expint.c:104:20
  renamable $r0 = RSBri killed renamable $r0, 0, 14, $noreg, $noreg, debug-location !684; test/expint.c:104:20
  STRi12 killed $r0, $sp, 56, 14, $noreg :: (store (s32) into %stack.17)
  B %bb.21, debug-location !685; test/expint.c:106:15

bb.5.if.end:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  B %bb.6, debug-location !686; test/expint.c:110:9

bb.6.for.inc:
; predecessors: %bb.5
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $r1 = LDRi12 $r11, -64, 14, $noreg, debug-location !687 :: (load (s32) from %stack.13); test/expint.c:84:24
  $r2 = LDRi12 $sp, 64, 14, $noreg, debug-location !687 :: (load (s32) from %stack.15); test/expint.c:84:24
  $r3 = LDRi12 $sp, 68, 14, $noreg, debug-location !687 :: (load (s32) from %stack.14); test/expint.c:84:24
  $r12 = LDRi12 $sp, 60, 14, $noreg, debug-location !687 :: (load (s32) from %stack.16); test/expint.c:84:24
  $r0 = LDRi12 $r11, -60, 14, $noreg, debug-location !687 :: (load (s32) from %stack.12); test/expint.c:84:24
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !687; test/expint.c:84:24
  STRi12 killed $r12, $r11, -40, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r3, $r11, -36, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r2, $r11, -32, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.2, debug-location !671; test/expint.c:84:7

bb.7.for.end:
; predecessors: %bb.2
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  renamable $r0 = IMPLICIT_DEF
  B %bb.20, debug-location !689; test/expint.c:112:5

bb.8.if.else:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r12 = LDRi12 $r11, -16, 14, $noreg :: (load (s32) from %stack.1)
  $r1 = LDRi12 $r11, -12, 14, $noreg :: (load (s32) from %stack.0)
  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !691; test/expint.c:122:13
  $r0 = MOVi 1000, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !691; test/expint.c:122:13
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  CMPri renamable $r12, 1, 14, $noreg, implicit-def $cpsr, debug-location !692; test/expint.c:126:12
  $r2 = MOVr $r1, 14, $noreg, $noreg, debug-location !692; test/expint.c:126:12
  $r2 = MOVr renamable $r12, 12, killed $cpsr, $noreg, implicit renamable $r2, debug-location !692; test/expint.c:126:12
  renamable $r3 = nsw SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !692; test/expint.c:126:12
  renamable $r4 = nsw SUBri killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !692; test/expint.c:126:12
  early-clobber renamable $r2, early-clobber renamable $lr = UMULLv5 renamable $r3, killed renamable $r4, 14, $noreg, $noreg, debug-location !692; test/expint.c:126:12
  renamable $lr = ANDri killed renamable $lr, 1, 14, $noreg, $noreg, debug-location !692; test/expint.c:126:12
  $lr = MOVsi killed renamable $lr, 11, 14, $noreg, def $cpsr, debug-location !692; test/expint.c:126:12
  $lr = MOVsi killed renamable $r2, 5, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !692; test/expint.c:126:12
  early-clobber renamable $r2 = MLAv5 killed renamable $r3, renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !692; test/expint.c:126:12
  renamable $r2 = ADDri killed renamable $r2, 255, 14, $noreg, $noreg, debug-location !692; test/expint.c:126:12
  STRi12 killed $r2, $sp, 36, 14, $noreg :: (store (s32) into %stack.22)
  renamable $r2 = MVNi 0, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 40, 14, $noreg :: (store (s32) into %stack.21)
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 44, 14, $noreg :: (store (s32) into %stack.20)
  STRi12 killed $r1, $sp, 48, 14, $noreg :: (store (s32) into %stack.19)
  STRi12 killed $r0, $sp, 52, 14, $noreg :: (store (s32) into %stack.18)
  B %bb.9, debug-location !692; test/expint.c:126:12

bb.9.for.cond16:
; predecessors: %bb.8, %bb.18
  successors: %bb.19, %bb.10

  $r1 = LDRi12 $sp, 40, 14, $noreg, debug-location !669 :: (load (s32) from %stack.21); test/expint.c:0
  $r2 = LDRi12 $sp, 44, 14, $noreg, debug-location !669 :: (load (s32) from %stack.20); test/expint.c:0
  $r0 = LDRi12 $sp, 48, 14, $noreg, debug-location !669 :: (load (s32) from %stack.19); test/expint.c:0
  $r3 = LDRi12 $sp, 52, 14, $noreg, debug-location !669 :: (load (s32) from %stack.18); test/expint.c:0
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.26)
  STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.25)
  STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.24)
  STRi12 killed $r1, $sp, 32, 14, $noreg :: (store (s32) into %stack.23)
  CMPri renamable $r0, 101, 14, $noreg, implicit-def $cpsr, debug-location !694; test/expint.c:126:7
  Bcc %bb.19, 0, killed $cpsr, debug-location !694; test/expint.c:126:7
  B %bb.10, debug-location !694; test/expint.c:126:7

bb.10.for.body18:
; predecessors: %bb.9
  successors: %bb.12, %bb.11

  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !695 :: (load (s32) from %stack.25); test/expint.c:130:21
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !695 :: (load (s32) from %stack.2); test/expint.c:130:21
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !695; test/expint.c:130:21
  $r12 = LDRi12 $sp, 28, 14, $noreg, debug-location !695 :: (load (s32) from %stack.24); test/expint.c:130:21
  $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !695 :: (load (s32) from %stack.0); test/expint.c:130:21
  $lr = LDRi12 $sp, 32, 14, $noreg, debug-location !695 :: (load (s32) from %stack.23); test/expint.c:130:21
  $r3 = MOVr $r0, 14, $noreg, $noreg, debug-location !695; test/expint.c:130:21
  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !696 :: (load (s32) from %stack.25); test/expint.c:130:16
  early-clobber renamable $r2 = MULv5 renamable $lr, renamable $r3, 14, $noreg, $noreg, debug-location !696; test/expint.c:130:16
  STRi12 killed $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.28)
  early-clobber renamable $r2 = MULv5 killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !696; test/expint.c:130:16
  STRi12 killed $r2, $sp, 16, 14, $noreg :: (store (s32) into %stack.27)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !698; test/expint.c:132:15
  Bcc %bb.12, 0, killed $cpsr, debug-location !698; test/expint.c:132:15
  B %bb.11, debug-location !698; test/expint.c:132:15

bb.11.if.then23:
; predecessors: %bb.10
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !699 :: (load (s32) from %stack.28); test/expint.c:134:27
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !699 :: (load (s32) from %stack.25); test/expint.c:134:27
  $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !699 :: (load (s32) from %stack.0); test/expint.c:134:27
  renamable $r1 = nsw SUBrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !699; test/expint.c:134:27
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !700; test/expint.c:134:24
  renamable $r0 = nsw RSBri killed renamable $r0, 0, 14, $noreg, $noreg, debug-location !700; test/expint.c:134:24
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.29)
  B %bb.17, debug-location !701; test/expint.c:134:13

bb.12.if.else27:
; predecessors: %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  B %bb.13, debug-location !702; test/expint.c:142:20

bb.13.for.cond28:
; predecessors: %bb.12, %bb.15
  successors: %bb.14, %bb.16

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !703; test/expint.c:142:15
  Bcc %bb.16, 1, killed $cpsr, debug-location !703; test/expint.c:142:15
  B %bb.14, debug-location !703; test/expint.c:142:15

bb.14.for.body30:
; predecessors: %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  B %bb.15, debug-location !704; test/expint.c:144:17

bb.15.for.inc33:
; predecessors: %bb.14
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  B %bb.13, debug-location !703; test/expint.c:142:15

bb.16.for.end35:
; predecessors: %bb.13
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !707 :: (load (s32) from %stack.2); test/expint.c:146:28
  BL_pred @foo, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !707; test/expint.c:146:28
  $r3 = LDRi12 $sp, 36, 14, $noreg, debug-location !707 :: (load (s32) from %stack.22); test/expint.c:146:28
  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !707 :: (load (s32) from %stack.28); test/expint.c:146:28
  $r2 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !707; test/expint.c:146:28
  early-clobber renamable $r0 = nsw MLAv5 renamable $r1, killed renamable $r2, renamable $r3, 14, $noreg, $noreg, debug-location !709; test/expint.c:146:22
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.29)
  B %bb.17

bb.17.if.end38:
; predecessors: %bb.11, %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !669 :: (load (s32) from %stack.29); test/expint.c:0
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.30)
  B %bb.18, debug-location !710; test/expint.c:154:9

bb.18.for.inc40:
; predecessors: %bb.17
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !711 :: (load (s32) from %stack.28); test/expint.c:150:15
  $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !711 :: (load (s32) from %stack.27); test/expint.c:150:15
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !711 :: (load (s32) from %stack.25); test/expint.c:150:15
  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !711 :: (load (s32) from %stack.26); test/expint.c:150:15
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !711 :: (load (s32) from %stack.30); test/expint.c:150:15
  renamable $r0 = nsw ADDrr renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !711; test/expint.c:150:15
  renamable $r1 = nuw nsw ADDri renamable $r1, 1, 14, $noreg, $noreg, debug-location !712; test/expint.c:126:24
  STRi12 killed $r3, $sp, 40, 14, $noreg :: (store (s32) into %stack.21)
  STRi12 killed $r2, $sp, 44, 14, $noreg :: (store (s32) into %stack.20)
  STRi12 killed $r1, $sp, 48, 14, $noreg :: (store (s32) into %stack.19)
  STRi12 killed $r0, $sp, 52, 14, $noreg :: (store (s32) into %stack.18)
  B %bb.9, debug-location !694; test/expint.c:126:7

bb.19.for.end42:
; predecessors: %bb.9
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.26)
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.31)
  B %bb.20

bb.20.if.end43:
; predecessors: %bb.19, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg :: (load (s32) from %stack.31)
  STRi12 killed $r0, $sp, 56, 14, $noreg :: (store (s32) into %stack.17)
  B %bb.21, debug-location !714; test/expint.c:160:3

bb.21.return:
; predecessors: %bb.4, %bb.20

  $r0 = LDRi12 $sp, 56, 14, $noreg, debug-location !669 :: (load (s32) from %stack.17); test/expint.c:0
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !715; test/expint.c:162:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !715; test/expint.c:162:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !715; test/expint.c:162:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function expint_expint.

# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  $r1 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = ADDri renamable $r1, 8, 14, $noreg, $noreg, debug-location !717; test/expint.c:44:13
  early-clobber renamable $r0 = MULv5 killed renamable $r2, renamable $r1, 14, $noreg, $noreg, debug-location !717; test/expint.c:44:13
  renamable $r1 = nsw RSBri killed renamable $r1, 4, 14, $noreg, $noreg, debug-location !718; test/expint.c:44:22
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !719; test/expint.c:44:19
  BX_RET 14, $noreg, implicit killed $r0, debug-location !720; test/expint.c:44:3

# End machine code for function foo.

# Machine code for function lms_sinus: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-20]
Constant Pool:
  cp#0: 1717986919, align=4
  cp#1: @lms_sintab, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  renamable $r3 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r1, early-clobber renamable $r2 = SMULLv5 renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !723; test/lms.c:58:13
  renamable $r1 = MOVsi renamable $r2, 25, 14, $noreg, $noreg, debug-location !723; test/lms.c:58:13
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r2, 251, 14, $noreg, $noreg, debug-location !723; test/lms.c:58:13
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 18, 14, $noreg, $noreg, debug-location !723; test/lms.c:58:13
  renamable $r0 = SUBrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !723; test/lms.c:58:13
  STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, 10, 14, $noreg, implicit-def $cpsr, debug-location !725; test/lms.c:59:7
  Bcc %bb.5, 11, killed $cpsr, debug-location !725; test/lms.c:59:7
  B %bb.1, debug-location !725; test/lms.c:59:7

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !727 :: (load (s32) from %stack.0); test/lms.c:60:24
  CMPri renamable $r0, 16, 14, $noreg, implicit-def $cpsr, debug-location !727; test/lms.c:60:24
  Bcc %bb.3, 11, killed $cpsr, debug-location !727; test/lms.c:60:24
  B %bb.2, debug-location !727; test/lms.c:60:24

bb.2.cond.true:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !728 :: (load (s32) from %stack.0); test/lms.c:60:59
  renamable $r0 = nsw RSBri renamable $r0, 20, 14, $noreg, $noreg, debug-location !728; test/lms.c:60:59
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.4, debug-location !727; test/lms.c:60:24

bb.3.cond.false:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !729 :: (load (s32) from %stack.0); test/lms.c:61:48
  renamable $r0 = nsw SUBri renamable $r0, 10, 14, $noreg, $noreg, debug-location !729; test/lms.c:61:48
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.4, debug-location !727; test/lms.c:60:24

bb.4.cond.end:
; predecessors: %bb.3, %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !727 :: (load (s32) from %stack.1); test/lms.c:60:24
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !730 :: (load (s32) from constant-pool); test/lms.c:60:13
  renamable $r0 = ADDrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !730; test/lms.c:60:13
  renamable $d0 = VLDRD killed renamable $r0, 0, 14, $noreg, debug-location !730 :: (load (s64) from %ir.arrayidx); test/lms.c:60:13
  renamable $d0 = VNEGD killed renamable $d0, 14, $noreg, debug-location !731; test/lms.c:60:12
  VSTRD killed $d0, $sp, 2, 14, $noreg :: (store (s64) into %stack.2)
  B %bb.9, debug-location !732; test/lms.c:60:5

bb.5.if.end:
; predecessors: %bb.0
  successors: %bb.6, %bb.7

  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !734 :: (load (s32) from %stack.0); test/lms.c:62:21
  CMPri renamable $r0, 6, 14, $noreg, implicit-def $cpsr, debug-location !734; test/lms.c:62:21
  Bcc %bb.7, 11, killed $cpsr, debug-location !734; test/lms.c:62:21
  B %bb.6, debug-location !734; test/lms.c:62:21

bb.6.cond.true4:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !735 :: (load (s32) from %stack.0); test/lms.c:62:52
  renamable $r0 = nsw RSBri renamable $r0, 10, 14, $noreg, $noreg, debug-location !735; test/lms.c:62:52
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.8, debug-location !734; test/lms.c:62:21

bb.7.cond.false6:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.8, debug-location !734; test/lms.c:62:21

bb.8.cond.end7:
; predecessors: %bb.7, %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !734 :: (load (s32) from %stack.3); test/lms.c:62:21
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !736 :: (load (s32) from constant-pool); test/lms.c:62:10
  renamable $r0 = ADDrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !736; test/lms.c:62:10
  renamable $d0 = VLDRD killed renamable $r0, 0, 14, $noreg, debug-location !736 :: (load (s64) from %ir.arrayidx9); test/lms.c:62:10
  VSTRD killed $d0, $sp, 2, 14, $noreg :: (store (s64) into %stack.2)
  B %bb.9, debug-location !737; test/lms.c:62:3

bb.9.return:
; predecessors: %bb.8, %bb.4

  $d0 = VLDRD $sp, 2, 14, $noreg, debug-location !738 :: (load (s64) from %stack.2); test/lms.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !739; test/lms.c:63:1
  BX_RET 14, $noreg, implicit killed $d0, debug-location !739; test/lms.c:63:1

bb.10 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function lms_sinus.

# Machine code for function lms_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=8, align=8, at location [SP-40]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-52]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-68]
  fi#10: size=4, align=4, at location [SP-72]
  fi#11: size=8, align=8, at location [SP-80]
  fi#12: size=4, align=4, at location [SP-4]
  fi#13: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @lms_input, align=4
  cp#1: 0xBFF8A068E044FADD, align=8
  cp#2: -1770082073, align=4
  cp#3: 1103515245, align=4
  cp#4: 0x3E10000000000000, align=8
  cp#5: -1.000000e+00, align=8
  cp#6: 1.000000e+00, align=8

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 72, 14, $noreg, $noreg
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !741 :: (load (s32) from constant-pool); test/lms.c:69:16
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !741 :: (store (s32) into `float* getelementptr inbounds ([202 x float], [202 x float]* @lms_input, i32 0, i32 0)`); test/lms.c:69:16
  B %bb.1, debug-location !742; test/lms.c:73:5

bb.1.do.body:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  B %bb.2, debug-location !743; test/lms.c:80:5

bb.2.do.cond:
; predecessors: %bb.1
  successors: %bb.1, %bb.3

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !743; test/lms.c:80:5
  Bcc %bb.1, 1, killed $cpsr, debug-location !743; test/lms.c:80:5
  B %bb.3, debug-location !743; test/lms.c:80:5

bb.3.do.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  BL_pred @lms_sinus, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $d0, debug-location !746; test/lms.c:85:20
  renamable $d1 = VLDRD %const.1, 0, 14, $noreg :: (load (s64) from constant-pool)
  renamable $d0 = VADDD killed renamable $d0, killed renamable $d1, 14, $noreg, debug-location !747; test/lms.c:85:33
  renamable $s0 = VCVTSD killed renamable $d0, 14, $noreg, debug-location !746; test/lms.c:85:20
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !748 :: (load (s32) from constant-pool); test/lms.c:85:18
  VSTRS killed renamable $s0, killed renamable $r0, 1, 14, $noreg, debug-location !748 :: (store (s32) into `float* getelementptr inbounds ([202 x float], [202 x float]* @lms_input, i32 0, i32 1)`); test/lms.c:85:18
  renamable $r0 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.4, debug-location !749; test/lms.c:88:45

bb.4.for.cond:
; predecessors: %bb.3, %bb.9
  successors: %bb.5, %bb.10

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !750 :: (load (s32) from %stack.1); test/lms.c:0
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !750 :: (load (s32) from %stack.0); test/lms.c:0
  STRi12 killed $r1, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  CMPri renamable $r0, 200, 14, $noreg, implicit-def $cpsr, debug-location !752; test/lms.c:88:40
  Bcc %bb.10, 8, killed $cpsr, debug-location !752; test/lms.c:88:40
  B %bb.5, debug-location !752; test/lms.c:88:40

bb.5.for.body:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $r11, -16, 14, $noreg :: (load (s32) from %stack.3)
  STRi12 killed $r0, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
  B %bb.6, debug-location !753; test/lms.c:91:5

bb.6.do.body18:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !750 :: (load (s32) from %stack.4); test/lms.c:0
  $r3 = MOVi 57, 14, $noreg, $noreg
  $r3 = ORRri $r3, 12288, 14, $noreg, $noreg
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MLAv5 killed renamable $r0, renamable $r2, renamable $r3, 14, $noreg, $noreg, debug-location !755; test/lms.c:93:32
  renamable $r0 = BICri renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !756; test/lms.c:94:18
  $s0 = VMOVSR killed $r0, 14, $noreg, debug-location !757; test/lms.c:94:12
  renamable $d2 = VUITOD killed renamable $s0, 14, $noreg, debug-location !757; test/lms.c:94:12
  renamable $d3 = VLDRD %const.4, 0, 14, $noreg :: (load (s64) from constant-pool)
  renamable $d0 = VLDRD %const.5, 0, 14, $noreg :: (load (s64) from constant-pool)
  $d1 = VMOVD $d0, 14, $noreg, debug-location !758; test/lms.c:94:50
  renamable $d1 = VMLAD renamable $d1(tied-def 0), killed renamable $d2, renamable $d3, 14, $noreg, debug-location !758; test/lms.c:94:50
  VSTRD $d1, $sp, 4, 14, $noreg :: (store (s64) into %stack.8)
  early-clobber renamable $r0 = MLAv5 killed renamable $r1, killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !760; test/lms.c:95:32
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !760; test/lms.c:95:32
  STRi12 killed $r1, $sp, 28, 14, $noreg :: (store (s32) into %stack.7)
  renamable $r0 = BICri killed renamable $r0, -2147483648, 14, $noreg, $noreg, debug-location !761; test/lms.c:96:18
  $s4 = VMOVSR killed $r0, 14, $noreg, debug-location !762; test/lms.c:96:12
  renamable $d2 = VUITOD killed renamable $s4, 14, $noreg, debug-location !762; test/lms.c:96:12
  renamable $d0 = VMLAD renamable $d0(tied-def 0), killed renamable $d2, killed renamable $d3, 14, $noreg, debug-location !763; test/lms.c:96:50
  VSTRD $d0, $sp, 8, 14, $noreg :: (store (s64) into %stack.6)
  renamable $d0 = VMULD renamable $d0, renamable $d0, 14, $noreg, debug-location !764; test/lms.c:97:24
  renamable $d0 = VMLAD renamable $d0(tied-def 0), renamable $d1, renamable $d1, 14, $noreg, debug-location !765; test/lms.c:97:19
  VSTRD killed $d0, $r11, 264, 14, $noreg :: (store (s64) into %stack.5)
  B %bb.7, debug-location !766; test/lms.c:98:5

bb.7.do.cond31:
; predecessors: %bb.6
  successors: %bb.6, %bb.8

  $r0 = LDRi12 $sp, 28, 14, $noreg :: (load (s32) from %stack.7)
  $d0 = VLDRD $r11, 264, 14, $noreg :: (load (s64) from %stack.5)
  renamable $d1 = VLDRD %const.6, 0, 14, $noreg :: (load (s64) from constant-pool)
  VCMPD renamable $d0, killed renamable $d1, 14, $noreg, implicit-def $fpscr_nzcv, debug-location !766; test/lms.c:98:5
  FMSTAT 14, $noreg, implicit-def $cpsr, implicit killed $fpscr_nzcv, debug-location !766; test/lms.c:98:5
  STRi12 killed $r0, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
  Bcc %bb.6, 12, killed $cpsr, debug-location !766; test/lms.c:98:5
  B %bb.8, debug-location !766; test/lms.c:98:5

bb.8.do.end34:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $r11, -12, 14, $noreg :: (load (s32) from %stack.2)
  $d1 = VLDRD $r11, 264, 14, $noreg :: (load (s64) from %stack.5)
  renamable $d0 = VLDRD %const.6, 0, 14, $noreg :: (load (s64) from constant-pool)
  renamable $d0 = VDIVD killed renamable $d0, renamable $d1, 14, $noreg, debug-location !770; test/lms.c:102:22
  VSTRD $d0, $sp, 0, 14, $noreg :: (store (s64) into %stack.11)
  BL_pred @lms_sinus, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $d0, debug-location !771; test/lms.c:103:20
  $d2 = VLDRD $sp, 8, 14, $noreg, debug-location !771 :: (load (s64) from %stack.6); test/lms.c:103:20
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !771 :: (load (s32) from %stack.2); test/lms.c:103:20
  $d1 = VLDRD $sp, 0, 14, $noreg, debug-location !771 :: (load (s64) from %stack.11); test/lms.c:103:20
  renamable $d0 = VMLAD renamable $d0(tied-def 0), renamable $d1, renamable $d2, 14, $noreg, debug-location !772; test/lms.c:103:33
  renamable $s0 = VCVTSD killed renamable $d0, 14, $noreg, debug-location !771; test/lms.c:103:20
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !773 :: (load (s32) from constant-pool); test/lms.c:103:5
  STRi12 $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.9)
  renamable $r1 = ADDrsi renamable $r1, renamable $r0, 18, 14, $noreg, $noreg, debug-location !773; test/lms.c:103:5
  VSTRS killed renamable $s0, killed renamable $r1, 0, 14, $noreg, debug-location !774 :: (store (s32) into %ir.arrayidx); test/lms.c:103:18
  renamable $r0 = ORRri renamable $r0, 1, 14, $noreg, $noreg, debug-location !775; test/lms.c:104:36
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.10)
  BL_pred @lms_sinus, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $d0, debug-location !776; test/lms.c:104:24
  $d2 = VLDRD $sp, 4, 14, $noreg, debug-location !776 :: (load (s64) from %stack.8); test/lms.c:104:24
  $d1 = VLDRD $sp, 0, 14, $noreg, debug-location !776 :: (load (s64) from %stack.11); test/lms.c:104:24
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !776 :: (load (s32) from %stack.10); test/lms.c:104:24
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !776 :: (load (s32) from %stack.9); test/lms.c:104:24
  renamable $d0 = VMLAD renamable $d0(tied-def 0), killed renamable $d1, renamable $d2, 14, $noreg, debug-location !777; test/lms.c:104:41
  renamable $s0 = VCVTSD killed renamable $d0, 14, $noreg, debug-location !776; test/lms.c:104:24
  renamable $r0 = ADDrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !779; test/lms.c:104:5
  VSTRS killed renamable $s0, killed renamable $r0, 0, 14, $noreg, debug-location !780 :: (store (s32) into %ir.arrayidx45); test/lms.c:104:22
  B %bb.9, debug-location !781; test/lms.c:105:3

bb.9.for.inc:
; predecessors: %bb.8
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !782 :: (load (s32) from %stack.7); test/lms.c:88:61
  $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !782 :: (load (s32) from %stack.2); test/lms.c:88:61
  renamable $r1 = nuw nsw ADDri renamable $r1, 2, 14, $noreg, $noreg, debug-location !782; test/lms.c:88:61
  STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.4, debug-location !752; test/lms.c:88:40

bb.10.for.end:
; predecessors: %bb.4

  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !784; test/lms.c:106:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !784; test/lms.c:106:1
  BX_RET 14, $noreg, debug-location !784; test/lms.c:106:1

bb.11 (align 8):
  CONSTPOOL_ENTRY 1, %const.1, 8
  CONSTPOOL_ENTRY 4, %const.4, 8
  CONSTPOOL_ENTRY 5, %const.5, 8
  CONSTPOOL_ENTRY 6, %const.6, 8
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function lms_init.

# Machine code for function lms_calc: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-24]
  fi#6: size=4, align=4, at location [SP-28]
  fi#7: size=4, align=4, at location [SP-32]
  fi#8: size=4, align=4, at location [SP-36]
  fi#9: size=4, align=4, at location [SP-40]
  fi#10: size=4, align=4, at location [SP-44]
  fi#11: size=4, align=4, at location [SP-48]
  fi#12: size=4, align=4, at location [SP-52]
  fi#13: size=4, align=4, at location [SP-56]
  fi#14: size=4, align=4, at location [SP-60]
  fi#15: size=4, align=4, at location [SP-64]
  fi#16: size=4, align=4, at location [SP-68]
  fi#17: size=4, align=4, at location [SP-72]
Constant Pool:
  cp#0: 1.000000e+00, align=4
  cp#1: 0.000000e+00, align=4
Function Live Ins: $s0, $s1, $r0, $r1, $s2, $s3, $r2, $r3

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $s0, $s1, $r0, $r1, $s2, $s3, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 72, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 72
  STRi12 killed $r3, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 40, 14, $noreg :: (store (s32) into %stack.7)
  VSTRS killed $s3, $sp, 11, 14, $noreg :: (store (s32) into %stack.6)
  VSTRS killed $s2, $sp, 12, 14, $noreg :: (store (s32) into %stack.5)
  STRi12 $r1, $sp, 52, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed $r0, $sp, 56, 14, $noreg :: (store (s32) into %stack.3)
  VSTRS killed $s1, $sp, 15, 14, $noreg :: (store (s32) into %stack.2)
  VSTRS killed $s0, $sp, 16, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r1, $sp, 68, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !786; test/lms.c:113:43

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.2, %bb.4

  $r0 = LDRi12 $sp, 68, 14, $noreg, debug-location !787 :: (load (s32) from %stack.0); test/lms.c:0
  STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !789; test/lms.c:113:38
  Bcc %bb.4, 11, killed $cpsr, debug-location !789; test/lms.c:113:38
  B %bb.2, debug-location !789; test/lms.c:113:38

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 40, 14, $noreg, debug-location !792 :: (load (s32) from %stack.7); test/lms.c:113:63
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !792 :: (load (s32) from %stack.9); test/lms.c:113:63
  renamable $r0 = ADDrsi renamable $r1, renamable $r2, 18, 14, $noreg, $noreg, debug-location !792; test/lms.c:113:63
  renamable $r0 = LDRi12 killed renamable $r0, -4, 14, $noreg, debug-location !791 :: (load (s32) from %ir.arrayidx); test/lms.c:114:7
  STRrs killed renamable $r0, renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !793 :: (store (s32) into %ir.arrayidx1); test/lms.c:113:74
  B %bb.3, debug-location !792; test/lms.c:113:63

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !794 :: (load (s32) from %stack.9); test/lms.c:113:59
  renamable $r0 = nsw SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !794; test/lms.c:113:59
  STRi12 killed $r0, $sp, 68, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !789; test/lms.c:113:38

bb.4.for.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 52, 14, $noreg, debug-location !797 :: (load (s32) from %stack.4); test/lms.c:115:14
  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !797 :: (load (s32) from %stack.8); test/lms.c:115:14
  $s4 = VLDRS $sp, 16, 14, $noreg, debug-location !797 :: (load (s32) from %stack.1); test/lms.c:115:14
  $s6 = VLDRS $sp, 11, 14, $noreg, debug-location !797 :: (load (s32) from %stack.6); test/lms.c:115:14
  $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !797 :: (load (s32) from %stack.7); test/lms.c:115:14
  VSTRS renamable $s4, renamable $r2, 0, 14, $noreg, debug-location !797 :: (store (s32) into %ir.history); test/lms.c:115:14
  renamable $s2 = VMULS renamable $s6, renamable $s4, 14, $noreg, debug-location !798; test/lms.c:119:18
  renamable $s0 = VLDRS %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $s0 = VSUBS killed renamable $s0, renamable $s6, 14, $noreg, debug-location !799; test/lms.c:119:31
  renamable $s6 = VLDRS renamable $r1, 0, 14, $noreg, debug-location !800 :: (load (s32) from %ir.sigma); test/lms.c:119:43
  renamable $s0 = VMULS killed renamable $s0, killed renamable $s6, 14, $noreg, debug-location !801; test/lms.c:119:40
  renamable $s0 = VMLAS renamable $s0(tied-def 0), killed renamable $s2, renamable $s4, 14, $noreg, debug-location !802; test/lms.c:119:26
  VSTRS killed renamable $s0, renamable $r1, 0, 14, $noreg, debug-location !803 :: (store (s32) into %ir.sigma); test/lms.c:119:10
  renamable $r0 = ORRrsi renamable $r0, renamable $r0, 249, 14, $noreg, $noreg, debug-location !804; test/lms.c:121:43
  renamable $r0 = nsw ADDri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !804; test/lms.c:121:43
  STRi12 killed $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.12)
  renamable $s0 = VLDRS %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
  VSTRS killed $s0, $sp, 7, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.5, debug-location !804; test/lms.c:121:43

bb.5.for.cond6:
; predecessors: %bb.4, %bb.7
  successors: %bb.8, %bb.6

  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !787 :: (load (s32) from %stack.12); test/lms.c:0
  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !787 :: (load (s32) from %stack.11); test/lms.c:0
  $s0 = VLDRS $sp, 7, 14, $noreg, debug-location !787 :: (load (s32) from %stack.10); test/lms.c:0
  VSTRS killed $s0, $sp, 3, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !806; test/lms.c:121:38
  Bcc %bb.8, 0, killed $cpsr, debug-location !806; test/lms.c:121:38
  B %bb.6, debug-location !806; test/lms.c:121:38

bb.6.for.body8:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !807; test/lms.c:121:63

bb.7.for.inc12:
; predecessors: %bb.6
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !808 :: (load (s32) from %stack.13); test/lms.c:122:7
  $s0 = VLDRS $sp, 3, 14, $noreg, debug-location !808 :: (load (s32) from %stack.14); test/lms.c:122:7
  $r1 = LDRi12 $sp, 40, 14, $noreg, debug-location !808 :: (load (s32) from %stack.7); test/lms.c:122:7
  $r2 = LDRi12 $sp, 56, 14, $noreg, debug-location !808 :: (load (s32) from %stack.3); test/lms.c:122:7
  renamable $r2 = ADDrsi renamable $r2, renamable $r0, 18, 14, $noreg, $noreg, debug-location !808; test/lms.c:122:7
  renamable $s2 = VLDRS killed renamable $r2, 0, 14, $noreg, debug-location !808 :: (load (s32) from %ir.arrayidx9); test/lms.c:122:7
  renamable $r1 = ADDrsi renamable $r1, renamable $r0, 18, 14, $noreg, $noreg, debug-location !809; test/lms.c:122:14
  renamable $s4 = VLDRS killed renamable $r1, 0, 14, $noreg, debug-location !809 :: (load (s32) from %ir.arrayidx10); test/lms.c:122:14
  renamable $s0 = VMLAS renamable $s0(tied-def 0), killed renamable $s2, killed renamable $s4, 14, $noreg, debug-location !810; test/lms.c:121:65
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !811; test/lms.c:121:59
  STRi12 killed $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
  VSTRS killed $s0, $sp, 7, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.5, debug-location !806; test/lms.c:121:38

bb.8.for.end13:
; predecessors: %bb.5
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !814 :: (load (s32) from %stack.8); test/lms.c:125:21
  $s2 = VLDRS $sp, 12, 14, $noreg, debug-location !814 :: (load (s32) from %stack.5); test/lms.c:125:21
  $s0 = VLDRS $sp, 15, 14, $noreg, debug-location !814 :: (load (s32) from %stack.2); test/lms.c:125:21
  $s4 = VLDRS $sp, 3, 14, $noreg, debug-location !814 :: (load (s32) from %stack.14); test/lms.c:125:21
  renamable $s0 = VSUBS renamable $s0, renamable $s4, 14, $noreg, debug-location !814; test/lms.c:125:21
  renamable $s0 = VMULS killed renamable $s0, renamable $s2, 14, $noreg, debug-location !815; test/lms.c:125:16
  renamable $s2 = VLDRS renamable $r0, 0, 14, $noreg, debug-location !816 :: (load (s32) from %ir.sigma); test/lms.c:125:29
  renamable $s0 = VDIVS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !817; test/lms.c:125:26
  VSTRS killed $s0, $sp, 1, 14, $noreg :: (store (s32) into %stack.16)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
  B %bb.9, debug-location !818; test/lms.c:127:43

bb.9.for.cond16:
; predecessors: %bb.8, %bb.11
  successors: %bb.12, %bb.10

  $r1 = LDRi12 $sp, 20, 14, $noreg, debug-location !787 :: (load (s32) from %stack.12); test/lms.c:0
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !787 :: (load (s32) from %stack.15); test/lms.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.17)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !820; test/lms.c:127:38
  Bcc %bb.12, 0, killed $cpsr, debug-location !820; test/lms.c:127:38
  B %bb.10, debug-location !820; test/lms.c:127:38

bb.10.for.body18:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $s2 = VLDRS $sp, 1, 14, $noreg, debug-location !821 :: (load (s32) from %stack.16); test/lms.c:128:11
  $r0 = LDRi12 $sp, 56, 14, $noreg, debug-location !821 :: (load (s32) from %stack.3); test/lms.c:128:11
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !821 :: (load (s32) from %stack.17); test/lms.c:128:11
  $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !821 :: (load (s32) from %stack.7); test/lms.c:128:11
  renamable $r2 = ADDrsi renamable $r2, renamable $r1, 18, 14, $noreg, $noreg, debug-location !821; test/lms.c:128:11
  renamable $s4 = VLDRS killed renamable $r2, 0, 14, $noreg, debug-location !821 :: (load (s32) from %ir.arrayidx19); test/lms.c:128:11
  renamable $r0 = ADDrsi renamable $r0, renamable $r1, 18, 14, $noreg, $noreg, debug-location !822; test/lms.c:127:63
  renamable $s0 = VLDRS renamable $r0, 0, 14, $noreg, debug-location !823 :: (load (s32) from %ir.arrayidx21); test/lms.c:127:68
  renamable $s0 = VMLAS renamable $s0(tied-def 0), renamable $s2, killed renamable $s4, 14, $noreg, debug-location !823; test/lms.c:127:68
  VSTRS killed renamable $s0, killed renamable $r0, 0, 14, $noreg, debug-location !823 :: (store (s32) into %ir.arrayidx21); test/lms.c:127:68
  B %bb.11, debug-location !822; test/lms.c:127:63

bb.11.for.inc22:
; predecessors: %bb.10
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !824 :: (load (s32) from %stack.17); test/lms.c:127:59
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !824; test/lms.c:127:59
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
  B %bb.9, debug-location !820; test/lms.c:127:38

bb.12.for.end24:
; predecessors: %bb.9

  $s0 = VLDRS $sp, 3, 14, $noreg, debug-location !827 :: (load (s32) from %stack.14); test/lms.c:130:3
  $sp = frame-destroy ADDri killed $sp, 72, 14, $noreg, $noreg, debug-location !827; test/lms.c:130:3
  BX_RET 14, $noreg, implicit killed $s0, debug-location !827; test/lms.c:130:3

bb.13 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function lms_calc.

# Machine code for function lms_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=84, align=4, at location [SP-92]
  fi#1: size=84, align=4, at location [SP-176]
  fi#2: size=4, align=4, at location [SP-180]
  fi#3: size=4, align=4, at location [SP-184]
  fi#4: size=4, align=4, at location [SP-188]
  fi#5: size=4, align=4, at location [SP-192]
  fi#6: size=4, align=4, at location [SP-196]
  fi#7: size=4, align=4, at location [SP-4]
  fi#8: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @lms_input, align=4
  cp#1: 0x3F4F352680000000, align=4
  cp#2: 0x3F847AE140000000, align=4
  cp#3: @lms_output, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 192, 14, $noreg, $noreg
  renamable $r0 = MOVi 1073741824, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 20, 14, $noreg, debug-location !829 :: (store (s32) into %ir.sigma); test/lms.c:137:9
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.1, debug-location !830; test/lms.c:139:43

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !831 :: (load (s32) from %stack.3); test/lms.c:0
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  CMPri renamable $r0, 21, 14, $noreg, implicit-def $cpsr, debug-location !833; test/lms.c:139:38
  Bcc %bb.4, 0, killed $cpsr, debug-location !833; test/lms.c:139:38
  B %bb.2, debug-location !833; test/lms.c:139:38

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r1 = SUBri $r11, 84, 14, $noreg, $noreg
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !835 :: (store (s32) into %ir.arrayidx); test/lms.c:140:10
  renamable $r1 = ADDri $sp, 24, 14, $noreg, $noreg
  STRrs killed renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !837 :: (store (s32) into %ir.arrayidx1); test/lms.c:141:16
  B %bb.3, debug-location !838; test/lms.c:142:3

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !839 :: (load (s32) from %stack.4); test/lms.c:139:59
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !839; test/lms.c:139:59
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.1, debug-location !833; test/lms.c:139:38

bb.4.for.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.5, debug-location !841; test/lms.c:144:45

bb.5.for.cond2:
; predecessors: %bb.4, %bb.7
  successors: %bb.8, %bb.6

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !831 :: (load (s32) from %stack.5); test/lms.c:0
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  CMPri renamable $r0, 201, 14, $noreg, implicit-def $cpsr, debug-location !843; test/lms.c:144:40
  Bcc %bb.8, 0, killed $cpsr, debug-location !843; test/lms.c:144:40
  B %bb.6, debug-location !843; test/lms.c:144:40

bb.6.for.body4:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !844 :: (load (s32) from %stack.6); test/lms.c:145:30
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !844 :: (load (s32) from constant-pool); test/lms.c:145:30
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 18, 14, $noreg, $noreg, debug-location !844; test/lms.c:145:30
  renamable $s0 = VLDRS renamable $r0, 0, 14, $noreg, debug-location !844 :: (load (s32) from %ir.arrayidx5); test/lms.c:145:30
  renamable $s1 = VLDRS killed renamable $r0, 1, 14, $noreg, debug-location !846 :: (load (s32) from %ir.arrayidx6); test/lms.c:145:44
  renamable $r0 = SUBri $r11, 84, 14, $noreg, $noreg
  renamable $r1 = MOVi 20, 14, $noreg, $noreg
  renamable $s2 = VLDRS %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $s3 = VLDRS %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ADDri $sp, 24, 14, $noreg, $noreg
  renamable $r3 = ADDri $sp, 20, 14, $noreg, $noreg
  BL_pred @lms_calc, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $s0, implicit killed $s1, implicit killed $r0, implicit killed $r1, implicit killed $s2, implicit killed $s3, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $s0, debug-location !849; test/lms.c:145:21
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !849 :: (load (s32) from %stack.6); test/lms.c:145:21
  renamable $r0 = LDRi12 %const.3, 0, 14, $noreg, debug-location !850 :: (load (s32) from constant-pool); test/lms.c:145:5
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r1, 18, 14, $noreg, $noreg, debug-location !850; test/lms.c:145:5
  VSTRS killed renamable $s0, killed renamable $r0, 0, 14, $noreg, debug-location !851 :: (store (s32) into %ir.arrayidx8); test/lms.c:145:19
  B %bb.7, debug-location !852; test/lms.c:147:3

bb.7.for.inc9:
; predecessors: %bb.6
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !853 :: (load (s32) from %stack.6); test/lms.c:144:60
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !853; test/lms.c:144:60
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.5, debug-location !843; test/lms.c:144:40

bb.8.for.end11:
; predecessors: %bb.5

  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !855; test/lms.c:148:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !855; test/lms.c:148:1
  BX_RET 14, $noreg, debug-location !855; test/lms.c:148:1

bb.9 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function lms_main.

# Machine code for function lms_return: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=4, align=4, at location [SP-28]
Constant Pool:
  cp#0: 0.000000e+00, align=8
  cp#1: @lms_output, align=4
  cp#2: 0x4012D2A80064A9CE, align=8
  cp#3: 1.000000e+06, align=8

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $sp = frame-setup SUBri killed $sp, 32, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $d0 = VLDRD %const.0, 0, 14, $noreg :: (load (s64) from constant-pool)
  VSTRD killed $d0, $sp, 4, 14, $noreg :: (store (s64) into %stack.1)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !857; test/lms.c:154:45

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $d0 = VLDRD $sp, 4, 14, $noreg, debug-location !858 :: (load (s64) from %stack.1); test/lms.c:0
  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !858 :: (load (s32) from %stack.0); test/lms.c:0
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  VSTRD killed $d0, $sp, 2, 14, $noreg :: (store (s64) into %stack.2)
  CMPri renamable $r0, 201, 14, $noreg, implicit-def $cpsr, debug-location !860; test/lms.c:154:40
  Bcc %bb.4, 0, killed $cpsr, debug-location !860; test/lms.c:154:40
  B %bb.2, debug-location !860; test/lms.c:154:40

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  B %bb.3, debug-location !861; test/lms.c:156:3

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !862 :: (load (s32) from %stack.3); test/lms.c:155:12
  $d0 = VLDRD $sp, 2, 14, $noreg, debug-location !862 :: (load (s64) from %stack.2); test/lms.c:155:12
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !862 :: (load (s32) from constant-pool); test/lms.c:155:12
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r0, 18, 14, $noreg, $noreg, debug-location !862; test/lms.c:155:12
  renamable $s2 = VLDRS killed renamable $r1, 0, 14, $noreg, debug-location !862 :: (load (s32) from %ir.arrayidx); test/lms.c:155:12
  renamable $d1 = VCVTDS killed renamable $s2, 14, $noreg, debug-location !862; test/lms.c:155:12
  renamable $d0 = VADDD renamable $d0, killed renamable $d1, 14, $noreg, debug-location !863; test/lms.c:155:9
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !864; test/lms.c:154:60
  VSTRD killed $d0, $sp, 4, 14, $noreg :: (store (s64) into %stack.1)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !860; test/lms.c:154:40

bb.4.for.end:
; predecessors: %bb.1

  $d0 = VLDRD $sp, 2, 14, $noreg :: (load (s64) from %stack.2)
  renamable $d1 = VLDRD %const.2, 0, 14, $noreg :: (load (s64) from constant-pool)
  renamable $d0 = VADDD killed renamable $d0, killed renamable $d1, 14, $noreg, debug-location !866; test/lms.c:158:33
  renamable $d1 = VLDRD %const.3, 0, 14, $noreg :: (load (s64) from constant-pool)
  renamable $d0 = VMULD killed renamable $d0, killed renamable $d1, 14, $noreg, debug-location !867; test/lms.c:158:26
  renamable $s0 = VTOSIZD killed renamable $d0, 14, $noreg, debug-location !868; test/lms.c:158:10
  $r0 = VMOVRS killed $s0, 14, $noreg, debug-location !868; test/lms.c:158:10
  $sp = frame-destroy ADDri killed $sp, 32, 14, $noreg, $noreg, debug-location !869; test/lms.c:158:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !869; test/lms.c:158:3

bb.5 (align 8):
  CONSTPOOL_ENTRY 0, %const.0, 8
  CONSTPOOL_ENTRY 2, %const.2, 8
  CONSTPOOL_ENTRY 3, %const.3, 8
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function lms_return.

# Machine code for function lms: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  BL_pred @lms_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !871; test/lms.c:164:3
  BL_pred @lms_main, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !872; test/lms.c:165:3
  BL_pred @lms_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !873; test/lms.c:166:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !874; test/lms.c:167:1
  BX_RET 14, $noreg, debug-location !874; test/lms.c:167:1

# End machine code for function lms.

# Machine code for function matmult: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @ArrayA, align=4
  cp#1: @ArrayB, align=4
  cp#2: @ResultArray, align=4

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  BL_pred @InitSeed, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !877; test/matmult.c:54:4
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !878 :: (load (s32) from constant-pool); test/matmult.c:61:4
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !878 :: (load (s32) from constant-pool); test/matmult.c:61:4
  renamable $r2 = LDRi12 %const.2, 0, 14, $noreg, debug-location !878 :: (load (s32) from constant-pool); test/matmult.c:61:4
  BL_pred @Test, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !878; test/matmult.c:61:4
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !879; test/matmult.c:62:1
  BX_RET 14, $noreg, debug-location !879; test/matmult.c:62:1

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function matmult.

# Machine code for function InitSeed: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @Seed, align=4

bb.0.entry:
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !881 :: (load (s32) from constant-pool); test/matmult.c:73:8
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !881 :: (store (s32) into @Seed); test/matmult.c:73:8
  BX_RET 14, $noreg, debug-location !882; test/matmult.c:74:1

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function InitSeed.

# Machine code for function Test: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  BL_pred @Initialize, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, debug-location !884; test/matmult.c:88:4
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !884 :: (load (s32) from %stack.1); test/matmult.c:88:4
  BL_pred @Initialize, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, debug-location !885; test/matmult.c:89:4
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !885 :: (load (s32) from %stack.2); test/matmult.c:89:4
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !885 :: (load (s32) from %stack.1); test/matmult.c:89:4
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !885 :: (load (s32) from %stack.0); test/matmult.c:89:4
  BL_pred @Multiply, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !886; test/matmult.c:96:4
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !887; test/matmult.c:105:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !887; test/matmult.c:105:1
  BX_RET 14, $noreg, debug-location !887; test/matmult.c:105:1

# End machine code for function Test.

# Machine code for function Initialize: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-4]
  fi#6: size=4, align=4, at location [SP-8]
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !889; test/matmult.c:115:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !890 :: (load (s32) from %stack.0); test/matmult.c:0
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.2)
  CMPri renamable $r0, 20, 14, $noreg, implicit-def $cpsr, debug-location !892; test/matmult.c:115:4
  Bcc %bb.8, 0, killed $cpsr, debug-location !892; test/matmult.c:115:4
  B %bb.2, debug-location !892; test/matmult.c:115:4

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.3, debug-location !893; test/matmult.c:116:12

bb.3.for.cond1:
; predecessors: %bb.2, %bb.5
  successors: %bb.6, %bb.4

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !890 :: (load (s32) from %stack.3); test/matmult.c:0
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.4)
  CMPri renamable $r0, 20, 14, $noreg, implicit-def $cpsr, debug-location !895; test/matmult.c:116:7
  Bcc %bb.6, 0, killed $cpsr, debug-location !895; test/matmult.c:116:7
  B %bb.4, debug-location !895; test/matmult.c:116:7

bb.4.for.body3:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  BL_pred @RandomInteger, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !896; test/matmult.c:117:42
  $r3 = LDRi12 $sp, 12, 14, $noreg, debug-location !896 :: (load (s32) from %stack.2); test/matmult.c:117:42
  $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !896 :: (load (s32) from %stack.1); test/matmult.c:117:42
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !896 :: (load (s32) from %stack.4); test/matmult.c:117:42
  renamable $r3 = ADDrsi renamable $r3, renamable $r3, 18, 14, $noreg, $noreg, debug-location !897; test/matmult.c:117:10
  renamable $r1 = ADDrsi renamable $r1, killed renamable $r3, 34, 14, $noreg, $noreg, debug-location !897; test/matmult.c:117:10
  STRrs killed renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !898 :: (store (s32) into %ir.arrayidx4); test/matmult.c:117:40
  B %bb.5, debug-location !897; test/matmult.c:117:10

bb.5.for.inc:
; predecessors: %bb.4
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !899 :: (load (s32) from %stack.4); test/matmult.c:116:63
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !899; test/matmult.c:116:63
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
  B %bb.3, debug-location !895; test/matmult.c:116:7

bb.6.for.end:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !901; test/matmult.c:117:56

bb.7.for.inc5:
; predecessors: %bb.6
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !902 :: (load (s32) from %stack.2); test/matmult.c:115:60
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !902; test/matmult.c:115:60
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !892; test/matmult.c:115:4

bb.8.for.end7:
; predecessors: %bb.1

  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !904; test/matmult.c:118:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !904; test/matmult.c:118:1
  BX_RET 14, $noreg, debug-location !904; test/matmult.c:118:1

# End machine code for function Initialize.

# Machine code for function Multiply: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
  fi#7: size=4, align=4, at location [SP-40]
  fi#8: size=4, align=4, at location [SP-44]
  fi#9: size=4, align=4, at location [SP-4]
  fi#10: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 36, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !906; test/matmult.c:154:9

bb.1.for.cond:
; predecessors: %bb.0, %bb.11
  successors: %bb.12, %bb.2

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !907 :: (load (s32) from %stack.0); test/matmult.c:0
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.4)
  CMPri renamable $r0, 20, 14, $noreg, implicit-def $cpsr, debug-location !909; test/matmult.c:154:4
  Bcc %bb.12, 0, killed $cpsr, debug-location !909; test/matmult.c:154:4
  B %bb.2, debug-location !909; test/matmult.c:154:4

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.3, debug-location !910; test/matmult.c:155:12

bb.3.for.cond1:
; predecessors: %bb.2, %bb.9
  successors: %bb.10, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !907 :: (load (s32) from %stack.5); test/matmult.c:0
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.6)
  CMPri renamable $r0, 20, 14, $noreg, implicit-def $cpsr, debug-location !912; test/matmult.c:155:7
  Bcc %bb.10, 0, killed $cpsr, debug-location !912; test/matmult.c:155:7
  B %bb.4, debug-location !912; test/matmult.c:155:7

bb.4.for.body3:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !913 :: (load (s32) from %stack.6); test/matmult.c:157:10
  $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !913 :: (load (s32) from %stack.3); test/matmult.c:157:10
  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !913 :: (load (s32) from %stack.4); test/matmult.c:157:10
  renamable $r1 = ADDrsi renamable $r1, renamable $r1, 18, 14, $noreg, $noreg, debug-location !913; test/matmult.c:157:10
  renamable $r1 = ADDrsi renamable $r0, killed renamable $r1, 34, 14, $noreg, $noreg, debug-location !913; test/matmult.c:157:10
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRrs renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !914 :: (store (s32) into %ir.arrayidx4); test/matmult.c:157:29
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.7)
  B %bb.5, debug-location !915; test/matmult.c:158:15

bb.5.for.cond5:
; predecessors: %bb.4, %bb.7
  successors: %bb.8, %bb.6

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !907 :: (load (s32) from %stack.7); test/matmult.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.8)
  CMPri renamable $r0, 20, 14, $noreg, implicit-def $cpsr, debug-location !917; test/matmult.c:158:10
  Bcc %bb.8, 0, killed $cpsr, debug-location !917; test/matmult.c:158:10
  B %bb.6, debug-location !917; test/matmult.c:158:10

bb.6.for.body7:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !918 :: (load (s32) from %stack.6); test/matmult.c:160:16
  $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !918 :: (load (s32) from %stack.3); test/matmult.c:160:16
  $r12 = LDRi12 $r11, -12, 14, $noreg, debug-location !918 :: (load (s32) from %stack.2); test/matmult.c:160:16
  $lr = LDRi12 $sp, 0, 14, $noreg, debug-location !918 :: (load (s32) from %stack.8); test/matmult.c:160:16
  $r3 = LDRi12 $r11, -8, 14, $noreg, debug-location !918 :: (load (s32) from %stack.1); test/matmult.c:160:16
  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !918 :: (load (s32) from %stack.4); test/matmult.c:160:16
  renamable $r1 = ADDrsi renamable $r1, renamable $r1, 18, 14, $noreg, $noreg, debug-location !918; test/matmult.c:160:16
  renamable $r3 = ADDrsi renamable $r3, renamable $r1, 34, 14, $noreg, $noreg, debug-location !918; test/matmult.c:160:16
  renamable $r3 = LDRrs killed renamable $r3, renamable $lr, 16386, 14, $noreg, debug-location !918 :: (load (s32) from %ir.arrayidx9); test/matmult.c:160:16
  renamable $lr = ADDrsi renamable $lr, renamable $lr, 18, 14, $noreg, $noreg, debug-location !919; test/matmult.c:160:34
  renamable $r12 = ADDrsi renamable $r12, killed renamable $lr, 34, 14, $noreg, $noreg, debug-location !919; test/matmult.c:160:34
  renamable $r12 = LDRrs killed renamable $r12, renamable $r2, 16386, 14, $noreg, debug-location !919 :: (load (s32) from %ir.arrayidx11); test/matmult.c:160:34
  renamable $r1 = ADDrsi renamable $r0, killed renamable $r1, 34, 14, $noreg, $noreg, debug-location !921; test/matmult.c:159:13
  renamable $lr = LDRrs renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !922 :: (load (s32) from %ir.arrayidx13); test/matmult.c:159:32
  early-clobber renamable $r0 = nsw MLAv5 killed renamable $r3, killed renamable $r12, killed renamable $lr, 14, $noreg, $noreg, debug-location !922; test/matmult.c:159:32
  STRrs killed renamable $r0, killed renamable $r1, renamable $r2, 16386, 14, $noreg, debug-location !922 :: (store (s32) into %ir.arrayidx13); test/matmult.c:159:32
  B %bb.7, debug-location !921; test/matmult.c:159:13

bb.7.for.inc:
; predecessors: %bb.6
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !923 :: (load (s32) from %stack.8); test/matmult.c:158:51
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !923; test/matmult.c:158:51
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.7)
  B %bb.5, debug-location !917; test/matmult.c:158:10

bb.8.for.end:
; predecessors: %bb.5
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  B %bb.9, debug-location !926; test/matmult.c:161:8

bb.9.for.inc14:
; predecessors: %bb.8
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !927 :: (load (s32) from %stack.6); test/matmult.c:155:48
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !927; test/matmult.c:155:48
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.3, debug-location !912; test/matmult.c:155:7

bb.10.for.end16:
; predecessors: %bb.3
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  B %bb.11, debug-location !926; test/matmult.c:161:8

bb.11.for.inc17:
; predecessors: %bb.10
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !929 :: (load (s32) from %stack.4); test/matmult.c:154:45
  renamable $r0 = nuw nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !929; test/matmult.c:154:45
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !909; test/matmult.c:154:4

bb.12.for.end19:
; predecessors: %bb.1

  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !931; test/matmult.c:162:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !931; test/matmult.c:162:1
  BX_RET 14, $noreg, debug-location !931; test/matmult.c:162:1

# End machine code for function Multiply.

# Machine code for function RandomInteger: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @Seed, align=4
  cp#1: 271652039, align=4

bb.0.entry:
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !933 :: (load (s32) from constant-pool); test/matmult.c:126:13
  renamable $r2 = LDRi12 renamable $r1, 0, 14, $noreg, debug-location !933 :: (dereferenceable load (s32) from @Seed); test/matmult.c:126:13
  renamable $r3 = MOVi 133, 14, $noreg, $noreg
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !934; test/matmult.c:126:18
  renamable $r0 = nsw ADDri killed renamable $r0, 81, 14, $noreg, $noreg, debug-location !935; test/matmult.c:126:25
  renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  dead early-clobber renamable $r2, early-clobber renamable $r3 = SMULLv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !936; test/matmult.c:126:31
  renamable $r2 = MOVsi renamable $r3, 73, 14, $noreg, $noreg, debug-location !936; test/matmult.c:126:31
  renamable $r3 = ADDrsi killed renamable $r2, killed renamable $r3, 251, 14, $noreg, $noreg, debug-location !936; test/matmult.c:126:31
  $r12 = MOVi 159, 14, $noreg, $noreg
  $r12 = ORRri $r12, 7936, 14, $noreg, $noreg
  early-clobber renamable $r2 = MULv5 killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !936; test/matmult.c:126:31
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !936; test/matmult.c:126:31
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !937 :: (store (s32) into @Seed); test/matmult.c:126:9
  BX_RET 14, $noreg, implicit killed $r0, debug-location !938; test/matmult.c:127:4

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function RandomInteger.

# Machine code for function rad2deg_init: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: @rad2deg_X, align=4
  cp#1: @rad2deg_Y, align=4

bb.0.entry:
  renamable $r1 = LDRi12 %const.0, 0, 14, $noreg, debug-location !941 :: (load (s32) from constant-pool); test/rad2deg.c:48:13
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !941 :: (store (s32) into @rad2deg_X); test/rad2deg.c:48:13
  renamable $r1 = LDRi12 %const.1, 0, 14, $noreg, debug-location !942 :: (load (s32) from constant-pool); test/rad2deg.c:49:13
  STRi12 killed renamable $r0, killed renamable $r1, 0, 14, $noreg, debug-location !942 :: (store (s32) into @rad2deg_Y); test/rad2deg.c:49:13
  BX_RET 14, $noreg, debug-location !943; test/rad2deg.c:50:1

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function rad2deg_init.

# Machine code for function rad2deg_return: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: @rad2deg_Y, align=4

bb.0.entry:
  successors: %bb.1, %bb.2

  $sp = frame-setup SUBri killed $sp, 4, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 4
  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !945 :: (load (s32) from constant-pool); test/rad2deg.c:57:14
  renamable $s0 = VLDRS killed renamable $r0, 0, 14, $noreg, debug-location !945 :: (dereferenceable load (s32) from @rad2deg_Y); test/rad2deg.c:57:14
  renamable $s0 = VTOSIZS killed renamable $s0, 14, $noreg, debug-location !945; test/rad2deg.c:57:14
  $r0 = VMOVRS killed $s0, 14, $noreg, debug-location !945; test/rad2deg.c:57:14
  $r1 = MOVi 108, 14, $noreg, $noreg
  $r1 = ORRri $r1, 64512, 14, $noreg, $noreg
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !947; test/rad2deg.c:59:7
  Bcc %bb.2, 1, killed $cpsr, debug-location !947; test/rad2deg.c:59:7
  B %bb.1, debug-location !947; test/rad2deg.c:59:7

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.3, debug-location !948; test/rad2deg.c:60:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MVNi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.3, debug-location !949; test/rad2deg.c:62:5

bb.3.return:
; predecessors: %bb.2, %bb.1

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !950 :: (load (s32) from %stack.0); test/rad2deg.c:0
  $sp = frame-destroy ADDri killed $sp, 4, 14, $noreg, $noreg, debug-location !951; test/rad2deg.c:63:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !951; test/rad2deg.c:63:1

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4

# End machine code for function rad2deg_return.

# Machine code for function rad2deg_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: 0.000000e+00, align=4
  cp#1: @rad2deg_X, align=4
  cp#2: 0x40191EB8A0000000, align=4
  cp#3: 1.800000e+02, align=4
  cp#4: 0x40091EB860000000, align=4
  cp#5: @rad2deg_Y, align=4
  cp#6: 0x3F91DCF4E0000000, align=4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $sp = frame-setup SUBri killed $sp, 4, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 4
  renamable $s0 = VLDRS %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  VSTRS killed $s0, $sp, 0, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !953; test/rad2deg.c:70:45

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $s0 = VLDRS $sp, 0, 14, $noreg, debug-location !954 :: (load (s32) from %stack.0); test/rad2deg.c:0
  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !954 :: (load (s32) from constant-pool); test/rad2deg.c:0
  VSTRS renamable $s0, killed renamable $r0, 0, 14, $noreg, debug-location !954 :: (store (s32) into @rad2deg_X); test/rad2deg.c:0
  renamable $s2 = VLDRS %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  VCMPS killed renamable $s0, killed renamable $s2, 14, $noreg, implicit-def $fpscr_nzcv, debug-location !956; test/rad2deg.c:70:40
  FMSTAT 14, $noreg, implicit-def $cpsr, implicit killed $fpscr_nzcv, debug-location !956; test/rad2deg.c:70:40
  Bcc %bb.4, 8, killed $cpsr, debug-location !956; test/rad2deg.c:70:40
  B %bb.2, debug-location !956; test/rad2deg.c:70:40

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !957 :: (load (s32) from constant-pool); test/rad2deg.c:73:20
  renamable $s0 = VLDRS killed renamable $r0, 0, 14, $noreg, debug-location !957 :: (dereferenceable load (s32) from @rad2deg_X); test/rad2deg.c:73:20
  renamable $s2 = VLDRS %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $s0 = VMULS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !957; test/rad2deg.c:73:20
  renamable $s2 = VLDRS %const.4, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $s2 = VDIVS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !957; test/rad2deg.c:73:20
  renamable $r0 = LDRi12 %const.5, 0, 14, $noreg, debug-location !958 :: (load (s32) from constant-pool); test/rad2deg.c:73:17
  renamable $s0 = VLDRS renamable $r0, 0, 14, $noreg, debug-location !958 :: (dereferenceable load (s32) from @rad2deg_Y); test/rad2deg.c:73:17
  renamable $s0 = VADDS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !958; test/rad2deg.c:73:17
  VSTRS killed renamable $s0, killed renamable $r0, 0, 14, $noreg, debug-location !958 :: (store (s32) into @rad2deg_Y); test/rad2deg.c:73:17
  B %bb.3, debug-location !959; test/rad2deg.c:73:7

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $r0 = LDRi12 %const.1, 0, 14, $noreg, debug-location !960 :: (load (s32) from constant-pool); test/rad2deg.c:72:55
  renamable $s0 = VLDRS killed renamable $r0, 0, 14, $noreg, debug-location !960 :: (dereferenceable load (s32) from @rad2deg_X); test/rad2deg.c:72:55
  renamable $s2 = VLDRS %const.6, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $s0 = VADDS killed renamable $s0, killed renamable $s2, 14, $noreg, debug-location !960; test/rad2deg.c:72:55
  VSTRS killed $s0, $sp, 0, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !956; test/rad2deg.c:70:40

bb.4.for.end:
; predecessors: %bb.1

  $sp = frame-destroy ADDri killed $sp, 4, 14, $noreg, $noreg, debug-location !962; test/rad2deg.c:74:1
  BX_RET 14, $noreg, debug-location !962; test/rad2deg.c:74:1

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4
  CONSTPOOL_ENTRY 4, %const.4, 4
  CONSTPOOL_ENTRY 5, %const.5, 4
  CONSTPOOL_ENTRY 6, %const.6, 4

# End machine code for function rad2deg_main.

# Machine code for function rad2deg: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]

bb.0.entry:
  liveins: $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  BL_pred @rad2deg_init, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !964; test/rad2deg.c:77:3
  BL_pred @rad2deg_main, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, debug-location !965; test/rad2deg.c:78:3
  BL_pred @rad2deg_return, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def $r0, debug-location !966; test/rad2deg.c:79:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !967; test/rad2deg.c:80:1
  BX_RET 14, $noreg, debug-location !967; test/rad2deg.c:80:1

# End machine code for function rad2deg.

# Machine code for function __absvdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str, align=4
  cp#1: @__func__.__absvdi2, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !969; ../absvdi2.c:25:11
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !969; ../absvdi2.c:25:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !970; ../absvdi2.c:25:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !970; ../absvdi2.c:25:9
  B %bb.1, debug-location !970; ../absvdi2.c:25:9

bb.1.if.then:
; predecessors: %bb.0

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !971 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !971 :: (load (s32) from constant-pool); ../absvdi2.c:26:9
  renamable $r1 = MOVi 26, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !971; ../absvdi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0

  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !972 :: (load (s32) from %stack.1); ../absvdi2.c:28:20
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !972 :: (load (s32) from %stack.0); ../absvdi2.c:28:20
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !972; ../absvdi2.c:28:20
  renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !972; ../absvdi2.c:28:20
  renamable $r1 = ADCrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !972; ../absvdi2.c:28:20
  renamable $r1 = EORrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, debug-location !972; ../absvdi2.c:28:20
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !973; ../absvdi2.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !973; ../absvdi2.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !973; ../absvdi2.c:28:5

bb.3 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __absvdi2.

# Machine code for function compilerrt_abort_impl: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten

bb.0.entry:

# End machine code for function compilerrt_abort_impl.

# Machine code for function __absvsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @__func__.__absvsi2, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !978; ../absvsi2.c:25:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !978; ../absvsi2.c:25:9
  B %bb.1, debug-location !978; ../absvsi2.c:25:9

bb.1.if.then:
; predecessors: %bb.0

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !979 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !979 :: (load (s32) from constant-pool); ../absvsi2.c:26:9
  renamable $r1 = MOVi 26, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !979; ../absvsi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !980 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !980; ../absvsi2.c:28:20
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  Bcc %bb.4, 5, killed $cpsr, debug-location !980; ../absvsi2.c:28:20

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !980 :: (load (s32) from %stack.0); ../absvsi2.c:28:20
  renamable $r0 = RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !980; ../absvsi2.c:28:20
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)

bb.4.if.end:
; predecessors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !980 :: (load (s32) from %stack.1); ../absvsi2.c:28:20
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !981; ../absvsi2.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !981; ../absvsi2.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !981; ../absvsi2.c:28:5

bb.5 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __absvsi2.

# Machine code for function __addvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.2, align=4
  cp#1: @__func__.__addvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  $r12 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !983; ../addvdi3.c:24:27
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = ADCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !983; ../addvdi3.c:24:27
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !985; ../addvdi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !985; ../addvdi3.c:25:9
  B %bb.1, debug-location !985; ../addvdi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !986 :: (load (s32) from %stack.0); ../addvdi3.c:27:15
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !986 :: (load (s32) from %stack.3); ../addvdi3.c:27:15
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !986 :: (load (s32) from %stack.1); ../addvdi3.c:27:15
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !986 :: (load (s32) from %stack.2); ../addvdi3.c:27:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !986; ../addvdi3.c:27:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !986; ../addvdi3.c:27:15
  Bcc %bb.3, 10, killed $cpsr, debug-location !987; ../addvdi3.c:27:13
  B %bb.2, debug-location !987; ../addvdi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !988 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !988 :: (load (s32) from constant-pool); ../addvdi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !988; ../addvdi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !989; ../addvdi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !990 :: (load (s32) from %stack.0); ../addvdi3.c:32:15
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !990 :: (load (s32) from %stack.3); ../addvdi3.c:32:15
  $r2 = LDRi12 $sp, 8, 14, $noreg, debug-location !990 :: (load (s32) from %stack.1); ../addvdi3.c:32:15
  $r3 = LDRi12 $sp, 4, 14, $noreg, debug-location !990 :: (load (s32) from %stack.2); ../addvdi3.c:32:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !990; ../addvdi3.c:32:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !990; ../addvdi3.c:32:15
  Bcc %bb.6, 11, killed $cpsr, debug-location !991; ../addvdi3.c:32:13
  B %bb.5, debug-location !991; ../addvdi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !992 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !992 :: (load (s32) from constant-pool); ../addvdi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !992; ../addvdi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !993 :: (load (s32) from %stack.0); ../addvdi3.c:35:5
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !993 :: (load (s32) from %stack.1); ../addvdi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !993; ../addvdi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !993; ../addvdi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !993; ../addvdi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __addvdi3.

# Machine code for function __addvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.3, align=4
  cp#1: @__func__.__addvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = ADDrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !995; ../addvsi3.c:24:27
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !997; ../addvsi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !997; ../addvsi3.c:25:9
  B %bb.1, debug-location !997; ../addvsi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !999 :: (load (s32) from %stack.0); ../addvsi3.c:27:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !999 :: (load (s32) from %stack.1); ../addvsi3.c:27:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !999; ../addvsi3.c:27:13
  Bcc %bb.3, 10, killed $cpsr, debug-location !999; ../addvsi3.c:27:13
  B %bb.2, debug-location !999; ../addvsi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1000 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1000 :: (load (s32) from constant-pool); ../addvsi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1000; ../addvsi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1001; ../addvsi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1003 :: (load (s32) from %stack.0); ../addvsi3.c:32:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1003 :: (load (s32) from %stack.1); ../addvsi3.c:32:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1003; ../addvsi3.c:32:13
  Bcc %bb.6, 11, killed $cpsr, debug-location !1003; ../addvsi3.c:32:13
  B %bb.5, debug-location !1003; ../addvsi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1004 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1004 :: (load (s32) from constant-pool); ../addvsi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1004; ../addvsi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1005 :: (load (s32) from %stack.0); ../addvsi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1005; ../addvsi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1005; ../addvsi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1005; ../addvsi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __addvsi3.

# Machine code for function __ashldi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !1008 :: (store (s32) into %ir.all + 4, basealign 8); ../ashldi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !1008 :: (store (s32) into %ir.all, align 8); ../ashldi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !1010; ../ashldi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !1010; ../ashldi3.c:30:9
  B %bb.1, debug-location !1010; ../ashldi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1012 :: (store (s32) into %ir.low, align 8); ../ashldi3.c:32:22
  renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !1013 :: (dereferenceable load (s32) from %ir.low2, align 8); ../ashldi3.c:33:33
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !1014; ../ashldi3.c:33:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !1015; ../ashldi3.c:33:37
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1018 :: (store (s32) into %ir.high); ../ashldi3.c:33:23
  B %bb.5, debug-location !1019; ../ashldi3.c:34:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1021 :: (load (s32) from %stack.4); ../ashldi3.c:37:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1021; ../ashldi3.c:37:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1021; ../ashldi3.c:37:13
  B %bb.3, debug-location !1021; ../ashldi3.c:37:13

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1022; ../ashldi3.c:38:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !1023 :: (load (s32) from %stack.4); ../ashldi3.c:39:33
  renamable $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !1023 :: (dereferenceable load (s32) from %ir.low6, align 8); ../ashldi3.c:39:33
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !1024; ../ashldi3.c:39:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1026 :: (store (s32) into %ir.low9, align 8); ../ashldi3.c:39:23
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !1030 :: (dereferenceable load (s32) from %ir.low14, align 8); ../ashldi3.c:40:56
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1028 :: (dereferenceable load (s32) from %ir.high11); ../ashldi3.c:40:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 2, 14, $noreg, $noreg, debug-location !1029; ../ashldi3.c:40:39
  renamable $r2 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !1031; ../ashldi3.c:40:77
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !1033; ../ashldi3.c:40:45
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1036 :: (store (s32) into %ir.high17); ../ashldi3.c:40:23
  B %bb.5

bb.5.if.end18:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1037 :: (dereferenceable load (s32) from %ir.all19, align 8); ../ashldi3.c:42:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1037 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../ashldi3.c:42:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1038; ../ashldi3.c:42:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1039 :: (load (s32) from %stack.6); ../ashldi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1039 :: (load (s32) from %stack.5); ../ashldi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !1040; ../ashldi3.c:43:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1040; ../ashldi3.c:43:1

# End machine code for function __ashldi3.

# Machine code for function __ashrdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !1043 :: (store (s32) into %ir.all + 4, basealign 8); ../ashrdi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !1043 :: (store (s32) into %ir.all, align 8); ../ashrdi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !1045; ../ashrdi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !1045; ../ashrdi3.c:30:9
  B %bb.1, debug-location !1045; ../ashrdi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1047 :: (load (s32) from %stack.4); ../ashrdi3.c:33:33
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1047 :: (dereferenceable load (s32) from %ir.high); ../ashrdi3.c:33:33
  renamable $r0 = MOVsi killed renamable $r0, 249, 14, $noreg, $noreg, debug-location !1048; ../ashrdi3.c:33:38
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1051 :: (store (s32) into %ir.high2); ../ashrdi3.c:33:23
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1053 :: (dereferenceable load (s32) from %ir.high4); ../ashrdi3.c:34:32
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !1054; ../ashrdi3.c:34:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 1, 14, $noreg, $noreg, debug-location !1055; ../ashrdi3.c:34:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1057 :: (store (s32) into %ir.low, align 8); ../ashrdi3.c:34:22
  B %bb.5, debug-location !1058; ../ashrdi3.c:35:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1060 :: (load (s32) from %stack.4); ../ashrdi3.c:38:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1060; ../ashrdi3.c:38:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1060; ../ashrdi3.c:38:13
  B %bb.3, debug-location !1060; ../ashrdi3.c:38:13

bb.3.if.then7:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1061; ../ashrdi3.c:39:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !1063 :: (load (s32) from %stack.4); ../ashrdi3.c:40:34
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1063 :: (dereferenceable load (s32) from %ir.high9); ../ashrdi3.c:40:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 1, 14, $noreg, $noreg, debug-location !1064; ../ashrdi3.c:40:39
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1067 :: (store (s32) into %ir.high12); ../ashrdi3.c:40:24
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !1072 :: (dereferenceable load (s32) from %ir.low17, align 8); ../ashrdi3.c:41:72
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1069 :: (dereferenceable load (s32) from %ir.high14); ../ashrdi3.c:41:33
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !1070; ../ashrdi3.c:41:55
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1071; ../ashrdi3.c:41:38
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1074; ../ashrdi3.c:41:61
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1076 :: (store (s32) into %ir.low20, align 8); ../ashrdi3.c:41:22
  B %bb.5

bb.5.if.end21:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1077 :: (dereferenceable load (s32) from %ir.all22, align 8); ../ashrdi3.c:43:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1077 :: (dereferenceable load (s32) from %ir.all22 + 4, basealign 8); ../ashrdi3.c:43:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1078; ../ashrdi3.c:43:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1079 :: (load (s32) from %stack.6); ../ashrdi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1079 :: (load (s32) from %stack.5); ../ashrdi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !1080; ../ashrdi3.c:44:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1080; ../ashrdi3.c:44:1

# End machine code for function __ashrdi3.

# Machine code for function __clzdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !1083 :: (store (s32) into %ir.all + 4, basealign 8); ../clzdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !1083 :: (store (s32) into %ir.all, align 8); ../clzdi2.c:25:11
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1089 :: (dereferenceable load (s32) from %ir.low, align 8); ../clzdi2.c:27:49
  renamable $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1085 :: (dereferenceable load (s32) from %ir.high2); ../clzdi2.c:26:28
  CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !1090; ../clzdi2.c:27:42
  $r0 = MOVr $r2, 14, $noreg, $noreg, debug-location !1090; ../clzdi2.c:27:42
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !1090; ../clzdi2.c:27:42
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !1091; ../clzdi2.c:27:12
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !1094; ../clzdi2.c:27:59
  CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !1094; ../clzdi2.c:27:59
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !1094; ../clzdi2.c:27:59
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !1095; ../clzdi2.c:27:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1095; ../clzdi2.c:27:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __clzdi2.

# Machine code for function __clzsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $r3 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  CMPri renamable $r3, 65536, 14, $noreg, implicit-def $cpsr
  $r2 = MOVi 1, 3, killed $cpsr, $noreg, implicit renamable $r2
  renamable $r0 = MOVsi renamable $r2, 34, 14, $noreg, $noreg, debug-location !1098; ../clzsi2.c:25:40
  renamable $r1 = MOVi 16, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r1, killed renamable $r2, 34, 14, $noreg, $noreg, debug-location !1099; ../clzsi2.c:26:14
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !1100; ../clzsi2.c:26:7
  renamable $r1 = MOVi 65280, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !1101; ../clzsi2.c:29:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1101; ../clzsi2.c:29:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1101; ../clzsi2.c:29:13
  renamable $r3 = MOVi 8, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r3, renamable $r1, 26, 14, $noreg, $noreg, debug-location !1104; ../clzsi2.c:30:13
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !1105; ../clzsi2.c:30:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !1106; ../clzsi2.c:31:7
  renamable $r1 = MOVi 240, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !1107; ../clzsi2.c:33:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1107; ../clzsi2.c:33:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1107; ../clzsi2.c:33:13
  renamable $r2 = MOVi 4, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi killed renamable $r2, renamable $r1, 18, 14, $noreg, $noreg, debug-location !1110; ../clzsi2.c:34:13
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !1111; ../clzsi2.c:34:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !1112; ../clzsi2.c:35:7
  renamable $r1 = MOVi 12, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !1113; ../clzsi2.c:37:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1113; ../clzsi2.c:37:13
  renamable $lr = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1113; ../clzsi2.c:37:13
  renamable $r1 = MOVi 2, 14, $noreg, $noreg
  renamable $r12 = nuw nsw SUBrsi renamable $r1, renamable $lr, 10, 14, $noreg, $noreg, debug-location !1116; ../clzsi2.c:38:13
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !1117; ../clzsi2.c:38:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $lr, 10, 14, $noreg, $noreg, debug-location !1118; ../clzsi2.c:39:7
  renamable $r1 = SUBrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !1119; ../clzsi2.c:52:20
  renamable $r2 = MVNi 1, 14, $noreg, $noreg
  renamable $r2 = ORRrsi killed renamable $r2, killed renamable $r3, 11, 14, $noreg, $noreg, debug-location !1120; ../clzsi2.c:52:37
  renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !1120; ../clzsi2.c:52:37
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1121; ../clzsi2.c:52:25
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1122; ../clzsi2.c:52:14
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1123; ../clzsi2.c:52:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1123; ../clzsi2.c:52:5

# End machine code for function __clzsi2.

# Machine code for function __cmpdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !1126 :: (store (s32) into %ir.all + 4, basealign 8); ../cmpdi2.c:26:11
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !1126 :: (store (s32) into %ir.all, align 8); ../cmpdi2.c:26:11
  STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !1128 :: (store (s32) into %ir.all1 + 4, basealign 8); ../cmpdi2.c:28:11
  STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !1128 :: (store (s32) into %ir.all1, align 8); ../cmpdi2.c:28:11
  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1130 :: (dereferenceable load (s32) from %ir.high); ../cmpdi2.c:29:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1132 :: (dereferenceable load (s32) from %ir.high3); ../cmpdi2.c:29:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1134; ../cmpdi2.c:29:9
  Bcc %bb.2, 10, killed $cpsr, debug-location !1134; ../cmpdi2.c:29:9
  B %bb.1, debug-location !1134; ../cmpdi2.c:29:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1135; ../cmpdi2.c:30:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1137 :: (dereferenceable load (s32) from %ir.high5); ../cmpdi2.c:31:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1139 :: (dereferenceable load (s32) from %ir.high7); ../cmpdi2.c:31:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1141; ../cmpdi2.c:31:9
  Bcc %bb.4, 13, killed $cpsr, debug-location !1141; ../cmpdi2.c:31:9
  B %bb.3, debug-location !1141; ../cmpdi2.c:31:9

bb.3.if.then9:
; predecessors: %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1142; ../cmpdi2.c:32:9

bb.4.if.end10:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1143 :: (dereferenceable load (s32) from %ir.low, align 8); ../cmpdi2.c:33:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1144 :: (dereferenceable load (s32) from %ir.low13, align 8); ../cmpdi2.c:33:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1146; ../cmpdi2.c:33:9
  Bcc %bb.6, 2, killed $cpsr, debug-location !1146; ../cmpdi2.c:33:9
  B %bb.5, debug-location !1146; ../cmpdi2.c:33:9

bb.5.if.then15:
; predecessors: %bb.4
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1147; ../cmpdi2.c:34:9

bb.6.if.end16:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1148 :: (dereferenceable load (s32) from %ir.low18, align 8); ../cmpdi2.c:35:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1149 :: (dereferenceable load (s32) from %ir.low20, align 8); ../cmpdi2.c:35:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1151; ../cmpdi2.c:35:9
  Bcc %bb.8, 9, killed $cpsr, debug-location !1151; ../cmpdi2.c:35:9
  B %bb.7, debug-location !1151; ../cmpdi2.c:35:9

bb.7.if.then22:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1152; ../cmpdi2.c:36:9

bb.8.if.end23:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1153; ../cmpdi2.c:37:5

bb.9.return:
; predecessors: %bb.8, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1154 :: (load (s32) from %stack.2); ../cmpdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !1155; ../cmpdi2.c:38:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1155; ../cmpdi2.c:38:1

# End machine code for function __cmpdi2.

# Machine code for function __aeabi_lcmp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  BL_pred @__cmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !1157; ../cmpdi2.c:48:9
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !1158; ../cmpdi2.c:48:24
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1159; ../cmpdi2.c:48:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1159; ../cmpdi2.c:48:2

# End machine code for function __aeabi_lcmp.

# Machine code for function __ctzdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !1162 :: (store (s32) into %ir.all + 4, basealign 8); ../ctzdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !1162 :: (store (s32) into %ir.all, align 8); ../ctzdi2.c:25:11
  renamable $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1163 :: (dereferenceable load (s32) from %ir.low, align 8); ../ctzdi2.c:26:28
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1166 :: (dereferenceable load (s32) from %ir.high); ../ctzdi2.c:27:31
  CMPri renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !1167; ../ctzdi2.c:27:41
  $r1 = MOVr $r2, 14, $noreg, $noreg, debug-location !1167; ../ctzdi2.c:27:41
  $r1 = MOVr killed renamable $r0, 0, killed $cpsr, $noreg, implicit renamable $r1, debug-location !1167; ../ctzdi2.c:27:41
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r3, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r3, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r3 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r0 = MOVsi renamable $r3, 195, 14, $noreg, $noreg, debug-location !1168; ../ctzdi2.c:27:12
  renamable $r1 = MOVi 32, 14, $noreg, $noreg
  renamable $r1 = ADDrsi killed renamable $r1, killed renamable $r3, 195, 14, $noreg, $noreg, debug-location !1170; ../ctzdi2.c:27:59
  CMPri killed renamable $r2, 0, 14, $noreg, implicit-def $cpsr, debug-location !1170; ../ctzdi2.c:27:59
  $r0 = MOVr killed renamable $r1, 0, killed $cpsr, $noreg, implicit renamable $r0, debug-location !1170; ../ctzdi2.c:27:59
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !1171; ../ctzdi2.c:27:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1171; ../ctzdi2.c:27:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ctzdi2.

# Machine code for function __ctzsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  $r0 = MOVi 255, 14, $noreg, $noreg
  $r0 = ORRri $r0, 65280, 14, $noreg, $noreg
  renamable $r0 = ANDrr renamable $r2, killed renamable $r0, 14, $noreg, $noreg, debug-location !1173; ../ctzsi2.c:25:20
  renamable $r1 = RSBri renamable $r0, 0, 14, $noreg, def $cpsr, debug-location !1173; ../ctzsi2.c:25:20
  renamable $r0 = ADCrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1173; ../ctzsi2.c:25:20
  renamable $r0 = MOVsi killed renamable $r0, 34, 14, $noreg, $noreg, debug-location !1175; ../ctzsi2.c:25:40
  renamable $r3 = MOVsr renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !1176; ../ctzsi2.c:26:7
  renamable $r1 = MOVi 255, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !1177; ../ctzsi2.c:29:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1177; ../ctzsi2.c:29:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1177; ../ctzsi2.c:29:13
  renamable $r12 = MOVsi renamable $r1, 26, 14, $noreg, $noreg, debug-location !1179; ../ctzsi2.c:29:29
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !1180; ../ctzsi2.c:30:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 26, 14, $noreg, $noreg, debug-location !1181; ../ctzsi2.c:31:7
  renamable $r1 = MOVi 15, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !1182; ../ctzsi2.c:33:13
  renamable $r3 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1182; ../ctzsi2.c:33:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1182; ../ctzsi2.c:33:13
  renamable $r12 = MOVsi renamable $r1, 18, 14, $noreg, $noreg, debug-location !1184; ../ctzsi2.c:33:27
  renamable $r3 = MOVsr renamable $r2, renamable $r12, 3, 14, $noreg, $noreg, debug-location !1185; ../ctzsi2.c:34:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 18, 14, $noreg, $noreg, debug-location !1186; ../ctzsi2.c:35:7
  renamable $r1 = MOVi 3, 14, $noreg, $noreg
  renamable $r1 = ANDrsr killed renamable $r1, killed renamable $r2, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !1187; ../ctzsi2.c:37:13
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1187; ../ctzsi2.c:37:13
  renamable $r1 = ADCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1187; ../ctzsi2.c:37:13
  renamable $r12 = MOVsi renamable $r1, 10, 14, $noreg, $noreg, debug-location !1189; ../ctzsi2.c:37:26
  renamable $r2 = MOVsr renamable $r3, renamable $r12, 3, 14, $noreg, $noreg, debug-location !1190; ../ctzsi2.c:38:7
  renamable $r0 = ORRrsi killed renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1191; ../ctzsi2.c:40:7
  renamable $r1 = MOVi 1, 14, $noreg, $noreg
  renamable $r1 = ANDrsi killed renamable $r1, killed renamable $r2, 11, 14, $noreg, $noreg, debug-location !1192; ../ctzsi2.c:56:25
  renamable $r1 = nuw nsw RSBri killed renamable $r1, 2, 14, $noreg, $noreg, debug-location !1193; ../ctzsi2.c:56:20
  renamable $r2 = MVNi 1, 14, $noreg, $noreg
  renamable $r2 = ORRrsr killed renamable $r2, killed renamable $r3, killed renamable $r12, 3, 14, $noreg, $noreg, debug-location !1194; ../ctzsi2.c:56:44
  renamable $r2 = nsw ADDri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !1194; ../ctzsi2.c:56:44
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1195; ../ctzsi2.c:56:32
  renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1196; ../ctzsi2.c:56:14
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1197; ../ctzsi2.c:56:5

# End machine code for function __ctzsi2.

# Machine code for function __divdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $lr = MOVr killed $r3, 14, $noreg, $noreg
  $r3 = MOVr killed $r1, 14, $noreg, $noreg
  dead renamable $r1 = KILL renamable $lr
  dead renamable $r1 = KILL renamable $r2
  dead renamable $r1 = KILL renamable $r3
  dead renamable $r1 = KILL renamable $r0
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !1199; ../divdi3.c:23:20
  renamable $r0 = EORrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1201; ../divdi3.c:25:12
  renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1201; ../divdi3.c:25:12
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1202; ../divdi3.c:25:19
  renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1202; ../divdi3.c:25:19
  renamable $r2 = EORrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, $noreg, debug-location !1203; ../divdi3.c:26:12
  renamable $r3 = EORrsi renamable $lr, renamable $lr, 249, 14, $noreg, $noreg, debug-location !1203; ../divdi3.c:26:12
  renamable $r2 = SUBrsi killed renamable $r2, renamable $lr, 249, 14, $noreg, def $cpsr, debug-location !1204; ../divdi3.c:26:19
  renamable $r3 = SBCrsi killed renamable $r3, renamable $lr, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1204; ../divdi3.c:26:19
  renamable $r12 = EORrsi killed renamable $r12, killed renamable $lr, 249, 14, $noreg, $noreg, debug-location !1205; ../divdi3.c:27:9
  STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1206; ../divdi3.c:28:13
  renamable $r12 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1206 :: (store (s32) into stack); ../divdi3.c:28:13
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1206; ../divdi3.c:28:13
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1206 :: (load (s32) from %stack.0); ../divdi3.c:28:13
  renamable $r1 = EORrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1207; ../divdi3.c:28:44
  renamable $r0 = EORrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !1207; ../divdi3.c:28:44
  renamable $r0 = SUBrr killed renamable $r0, renamable $r2, 14, $noreg, def $cpsr, debug-location !1208; ../divdi3.c:28:51
  renamable $r1 = SBCrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1208; ../divdi3.c:28:51
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1209; ../divdi3.c:28:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1209; ../divdi3.c:28:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1209; ../divdi3.c:28:5

# End machine code for function __divdi3.

# Machine code for function __udivmoddi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=4, align=4, at location [SP-52]
  fi#7: size=4, align=4, at location [SP-56]
  fi#8: size=4, align=4, at location [SP-60]
  fi#9: size=4, align=4, at location [SP-64]
  fi#10: size=4, align=4, at location [SP-68]
  fi#11: size=4, align=4, at location [SP-72]
  fi#12: size=4, align=4, at location [SP-76]
  fi#13: size=4, align=4, at location [SP-80]
  fi#14: size=4, align=4, at location [SP-84]
  fi#15: size=4, align=4, at location [SP-88]
  fi#16: size=4, align=4, at location [SP-92]
  fi#17: size=4, align=4, at location [SP-96]
  fi#18: size=4, align=4, at location [SP-4]
  fi#19: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.8
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 88, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  renamable $r12 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 killed $r12, $r11, -36, 14, $noreg :: (store (s32) into %stack.4)
  STRi12 killed renamable $r1, $r11, -4, 14, $noreg, debug-location !1212 :: (store (s32) into %ir.all + 4, basealign 8); ../udivmoddi4.c:29:11
  STRi12 killed renamable $r0, $r11, -8, 14, $noreg, debug-location !1212 :: (store (s32) into %ir.all, align 8); ../udivmoddi4.c:29:11
  STRi12 killed renamable $r3, $r11, -12, 14, $noreg, debug-location !1214 :: (store (s32) into %ir.all1 + 4, basealign 8); ../udivmoddi4.c:31:11
  STRi12 killed renamable $r2, $r11, -16, 14, $noreg, debug-location !1214 :: (store (s32) into %ir.all1, align 8); ../udivmoddi4.c:31:11
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1216 :: (dereferenceable load (s32) from %ir.high); ../udivmoddi4.c:36:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1218; ../udivmoddi4.c:36:9
  Bcc %bb.8, 1, killed $cpsr, debug-location !1218; ../udivmoddi4.c:36:9
  B %bb.1, debug-location !1218; ../udivmoddi4.c:36:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.5

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1220 :: (dereferenceable load (s32) from %ir.high3); ../udivmoddi4.c:38:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1222; ../udivmoddi4.c:38:13
  Bcc %bb.5, 1, killed $cpsr, debug-location !1222; ../udivmoddi4.c:38:13
  B %bb.2, debug-location !1222; ../udivmoddi4.c:38:13

bb.2.if.then5:
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1223 :: (load (s32) from %stack.4); ../udivmoddi4.c:44:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1223; ../udivmoddi4.c:44:17
  Bcc %bb.4, 0, killed $cpsr, debug-location !1223; ../udivmoddi4.c:44:17
  B %bb.3, debug-location !1223; ../udivmoddi4.c:44:17

bb.3.if.then6:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1224 :: (dereferenceable load (s32) from %ir.low, align 8); ../udivmoddi4.c:45:28
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1225 :: (dereferenceable load (s32) from %ir.low9, align 8); ../udivmoddi4.c:45:38
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1226; ../udivmoddi4.c:45:32
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1226 :: (load (s32) from %stack.4); ../udivmoddi4.c:45:32
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1228 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:45:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1228 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:45:22
  B %bb.4, debug-location !1229; ../udivmoddi4.c:45:17

bb.4.if.end:
; predecessors: %bb.2, %bb.3
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1230 :: (dereferenceable load (s32) from %ir.low12, align 8); ../udivmoddi4.c:46:24
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1231 :: (dereferenceable load (s32) from %ir.low14, align 8); ../udivmoddi4.c:46:34
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1232; ../udivmoddi4.c:46:28
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !1232; ../udivmoddi4.c:46:28
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1234; ../udivmoddi4.c:46:13

bb.5.if.end16:
; predecessors: %bb.1
  successors: %bb.7, %bb.6

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1235 :: (load (s32) from %stack.4); ../udivmoddi4.c:52:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1235; ../udivmoddi4.c:52:13
  Bcc %bb.7, 0, killed $cpsr, debug-location !1235; ../udivmoddi4.c:52:13
  B %bb.6, debug-location !1235; ../udivmoddi4.c:52:13

bb.6.if.then18:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1236 :: (load (s32) from %stack.4); ../udivmoddi4.c:53:24
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1236 :: (dereferenceable load (s32) from %ir.low20, align 8); ../udivmoddi4.c:53:24
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1238 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:53:18
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1238 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:53:18
  B %bb.7, debug-location !1239; ../udivmoddi4.c:53:13

bb.7.if.end22:
; predecessors: %bb.5, %bb.6
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1240; ../udivmoddi4.c:54:9

bb.8.if.end23:
; predecessors: %bb.0
  successors: %bb.9, %bb.26

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1241 :: (dereferenceable load (s32) from %ir.low25, align 8); ../udivmoddi4.c:57:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1243; ../udivmoddi4.c:57:9
  Bcc %bb.26, 1, killed $cpsr, debug-location !1243; ../udivmoddi4.c:57:9
  B %bb.9, debug-location !1243; ../udivmoddi4.c:57:9

bb.9.if.then28:
; predecessors: %bb.8
  successors: %bb.10, %bb.13

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1245 :: (dereferenceable load (s32) from %ir.high30); ../udivmoddi4.c:59:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1247; ../udivmoddi4.c:59:13
  Bcc %bb.13, 1, killed $cpsr, debug-location !1247; ../udivmoddi4.c:59:13
  B %bb.10, debug-location !1247; ../udivmoddi4.c:59:13

bb.10.if.then33:
; predecessors: %bb.9
  successors: %bb.12, %bb.11

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1248 :: (load (s32) from %stack.4); ../udivmoddi4.c:65:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1248; ../udivmoddi4.c:65:17
  Bcc %bb.12, 0, killed $cpsr, debug-location !1248; ../udivmoddi4.c:65:17
  B %bb.11, debug-location !1248; ../udivmoddi4.c:65:17

bb.11.if.then35:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1250 :: (dereferenceable load (s32) from %ir.high37); ../udivmoddi4.c:66:28
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1251 :: (dereferenceable load (s32) from %ir.low39, align 8); ../udivmoddi4.c:66:39
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1252; ../udivmoddi4.c:66:33
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1252 :: (load (s32) from %stack.4); ../udivmoddi4.c:66:33
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1254 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:66:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1254 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:66:22
  B %bb.12, debug-location !1255; ../udivmoddi4.c:66:17

bb.12.if.end42:
; predecessors: %bb.10, %bb.11
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1257 :: (dereferenceable load (s32) from %ir.high44); ../udivmoddi4.c:67:24
  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1258 :: (dereferenceable load (s32) from %ir.low46, align 8); ../udivmoddi4.c:67:35
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1259; ../udivmoddi4.c:67:29
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !1259; ../udivmoddi4.c:67:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1261; ../udivmoddi4.c:67:13

bb.13.if.end49:
; predecessors: %bb.9
  successors: %bb.14, %bb.17

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1262 :: (dereferenceable load (s32) from %ir.low51, align 8); ../udivmoddi4.c:70:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1264; ../udivmoddi4.c:70:13
  Bcc %bb.17, 1, killed $cpsr, debug-location !1264; ../udivmoddi4.c:70:13
  B %bb.14, debug-location !1264; ../udivmoddi4.c:70:13

bb.14.if.then54:
; predecessors: %bb.13
  successors: %bb.16, %bb.15

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1265 :: (load (s32) from %stack.4); ../udivmoddi4.c:76:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1265; ../udivmoddi4.c:76:17
  Bcc %bb.16, 0, killed $cpsr, debug-location !1265; ../udivmoddi4.c:76:17
  B %bb.15, debug-location !1265; ../udivmoddi4.c:76:17

bb.15.if.then56:
; predecessors: %bb.14
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1267 :: (dereferenceable load (s32) from %ir.high58); ../udivmoddi4.c:78:32
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !1269 :: (dereferenceable load (s32) from %ir.high60); ../udivmoddi4.c:78:43
  BL &__umodsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1270; ../udivmoddi4.c:78:37
  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1270 :: (load (s32) from %stack.4); ../udivmoddi4.c:78:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1273 :: (store (s32) into %ir.high63); ../udivmoddi4.c:78:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1275 :: (store (s32) into %ir.low65, align 8); ../udivmoddi4.c:79:25
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !1276 :: (dereferenceable load (s32) from %ir.all66, align 8); ../udivmoddi4.c:80:26
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !1276 :: (dereferenceable load (s32) from %ir.all66 + 4, basealign 8); ../udivmoddi4.c:80:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1277 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:80:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1277 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:80:22
  B %bb.16, debug-location !1278; ../udivmoddi4.c:81:13

bb.16.if.end67:
; predecessors: %bb.14, %bb.15
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1280 :: (dereferenceable load (s32) from %ir.high69); ../udivmoddi4.c:82:24
  renamable $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !1282 :: (dereferenceable load (s32) from %ir.high71); ../udivmoddi4.c:82:35
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1283; ../udivmoddi4.c:82:29
  $r1 = MOVr killed $r0, 14, $noreg, $noreg, debug-location !1283; ../udivmoddi4.c:82:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1285; ../udivmoddi4.c:82:13

bb.17.if.end74:
; predecessors: %bb.13
  successors: %bb.18, %bb.21

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1287 :: (dereferenceable load (s32) from %ir.high78); ../udivmoddi4.c:88:18
  renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1290; ../udivmoddi4.c:88:35
  TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1293; ../udivmoddi4.c:88:13
  Bcc %bb.21, 1, killed $cpsr, debug-location !1293; ../udivmoddi4.c:88:13
  B %bb.18, debug-location !1293; ../udivmoddi4.c:88:13

bb.18.if.then81:
; predecessors: %bb.17
  successors: %bb.20, %bb.19

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1294 :: (load (s32) from %stack.4); ../udivmoddi4.c:90:17
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1294; ../udivmoddi4.c:90:17
  Bcc %bb.20, 0, killed $cpsr, debug-location !1294; ../udivmoddi4.c:90:17
  B %bb.19, debug-location !1294; ../udivmoddi4.c:90:17

bb.19.if.then83:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1295 :: (load (s32) from %stack.4); ../udivmoddi4.c:92:31
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1295 :: (dereferenceable load (s32) from %ir.low85, align 8); ../udivmoddi4.c:92:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1297 :: (store (s32) into %ir.low87, align 8); ../udivmoddi4.c:92:25
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1299 :: (dereferenceable load (s32) from %ir.high89); ../udivmoddi4.c:93:32
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !1301 :: (dereferenceable load (s32) from %ir.high91); ../udivmoddi4.c:93:44
  renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !1302; ../udivmoddi4.c:93:49
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1303; ../udivmoddi4.c:93:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1306 :: (store (s32) into %ir.high95); ../udivmoddi4.c:93:26
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !1307 :: (dereferenceable load (s32) from %ir.all96, align 8); ../udivmoddi4.c:94:26
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !1307 :: (dereferenceable load (s32) from %ir.all96 + 4, basealign 8); ../udivmoddi4.c:94:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1308 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:94:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1308 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:94:22
  B %bb.20, debug-location !1309; ../udivmoddi4.c:95:13

bb.20.if.end97:
; predecessors: %bb.18, %bb.19
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1311 :: (dereferenceable load (s32) from %ir.high99); ../udivmoddi4.c:96:24
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !1313 :: (dereferenceable load (s32) from %ir.high101); ../udivmoddi4.c:96:50
  renamable $r1 = SUBri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r1 = BICrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r2 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrsi killed renamable $r2, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r3 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrsi renamable $r3, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r1 = MOVsi killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1314; ../udivmoddi4.c:96:32
  renamable $r1 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !1315; ../udivmoddi4.c:96:29
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1317; ../udivmoddi4.c:96:13

bb.21.if.end103:
; predecessors: %bb.17
  successors: %bb.22, %bb.25

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1319 :: (dereferenceable load (s32) from %ir.high105); ../udivmoddi4.c:102:32
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !1320; ../udivmoddi4.c:102:14
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1322 :: (dereferenceable load (s32) from %ir.high107); ../udivmoddi4.c:102:58
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1323; ../udivmoddi4.c:102:40
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1324; ../udivmoddi4.c:102:38
  STRi12 $r0, $sp, 40, 14, $noreg :: (store (s32) into %stack.7)
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1326; ../udivmoddi4.c:104:13
  Bcc %bb.25, 3, killed $cpsr, debug-location !1326; ../udivmoddi4.c:104:13
  B %bb.22, debug-location !1326; ../udivmoddi4.c:104:13

bb.22.if.then111:
; predecessors: %bb.21
  successors: %bb.24, %bb.23

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1327 :: (load (s32) from %stack.4); ../udivmoddi4.c:106:16
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1327; ../udivmoddi4.c:106:16
  Bcc %bb.24, 0, killed $cpsr, debug-location !1327; ../udivmoddi4.c:106:16
  B %bb.23, debug-location !1327; ../udivmoddi4.c:106:16

bb.23.if.then113:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1328 :: (load (s32) from %stack.4); ../udivmoddi4.c:107:26
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1328 :: (dereferenceable load (s32) from %ir.all114, align 8); ../udivmoddi4.c:107:26
  renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1328 :: (dereferenceable load (s32) from %ir.all114 + 4, basealign 8); ../udivmoddi4.c:107:26
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1329 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:107:22
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1329 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:107:22
  B %bb.24, debug-location !1330; ../udivmoddi4.c:107:17

bb.24.if.end115:
; predecessors: %bb.22, %bb.23
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1331; ../udivmoddi4.c:108:13

bb.25.if.end116:
; predecessors: %bb.21
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  $r2 = LDRi12 $sp, 40, 14, $noreg, debug-location !1332 :: (load (s32) from %stack.7); ../udivmoddi4.c:110:9
  renamable $r0 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1332; ../udivmoddi4.c:110:9
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !1334 :: (store (s32) into %ir.low118, align 8); ../udivmoddi4.c:113:17
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1335 :: (dereferenceable load (s32) from %ir.low120, align 8); ../udivmoddi4.c:114:24
  renamable $r3 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !1336; ../udivmoddi4.c:114:45
  renamable $r1 = MOVsr killed renamable $r1, renamable $r3, 2, 14, $noreg, $noreg, debug-location !1337; ../udivmoddi4.c:114:28
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !1340 :: (store (s32) into %ir.high123); ../udivmoddi4.c:114:18
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1342 :: (dereferenceable load (s32) from %ir.high125); ../udivmoddi4.c:116:24
  renamable $r1 = MOVsr killed renamable $r1, renamable $r0, 3, 14, $noreg, $noreg, debug-location !1343; ../udivmoddi4.c:116:29
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !1346 :: (store (s32) into %ir.high128); ../udivmoddi4.c:116:18
  renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1351 :: (dereferenceable load (s32) from %ir.low134, align 8); ../udivmoddi4.c:117:60
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1348 :: (dereferenceable load (s32) from %ir.high130); ../udivmoddi4.c:117:24
  renamable $r1 = MOVsr killed renamable $r1, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1350; ../udivmoddi4.c:117:29
  renamable $r1 = ORRrsr killed renamable $r1, killed renamable $r2, renamable $r0, 3, 14, $noreg, $noreg, debug-location !1353; ../udivmoddi4.c:117:53
  STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !1355 :: (store (s32) into %ir.low137, align 8); ../udivmoddi4.c:117:17
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.49, debug-location !1356; ../udivmoddi4.c:118:5

bb.26.if.else:
; predecessors: %bb.8
  successors: %bb.27, %bb.40

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1358 :: (dereferenceable load (s32) from %ir.high139); ../udivmoddi4.c:121:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1360; ../udivmoddi4.c:121:13
  Bcc %bb.40, 1, killed $cpsr, debug-location !1360; ../udivmoddi4.c:121:13
  B %bb.27, debug-location !1360; ../udivmoddi4.c:121:13

bb.27.if.then142:
; predecessors: %bb.26
  successors: %bb.28, %bb.33

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1361 :: (dereferenceable load (s32) from %ir.low144, align 8); ../udivmoddi4.c:127:22
  renamable $r1 = SUBri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1363; ../udivmoddi4.c:127:17
  TSTrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1363; ../udivmoddi4.c:127:17
  Bcc %bb.33, 1, killed $cpsr, debug-location !1363; ../udivmoddi4.c:127:17
  B %bb.28, debug-location !1363; ../udivmoddi4.c:127:17

bb.28.if.then151:
; predecessors: %bb.27
  successors: %bb.30, %bb.29

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1364 :: (load (s32) from %stack.4); ../udivmoddi4.c:129:21
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1364; ../udivmoddi4.c:129:21
  Bcc %bb.30, 0, killed $cpsr, debug-location !1364; ../udivmoddi4.c:129:21
  B %bb.29, debug-location !1364; ../udivmoddi4.c:129:21

bb.29.if.then153:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1365 :: (load (s32) from %stack.4); ../udivmoddi4.c:130:32
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1365 :: (dereferenceable load (s32) from %ir.low155, align 8); ../udivmoddi4.c:130:32
  renamable $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1366 :: (dereferenceable load (s32) from %ir.low157, align 8); ../udivmoddi4.c:130:43
  renamable $r2 = SUBri killed renamable $r2, 1, 14, $noreg, $noreg, debug-location !1367; ../udivmoddi4.c:130:47
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1368; ../udivmoddi4.c:130:36
  renamable $r2 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1370 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:130:26
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1370 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:130:26
  B %bb.30, debug-location !1371; ../udivmoddi4.c:130:21

bb.30.if.end161:
; predecessors: %bb.28, %bb.29
  successors: %bb.31, %bb.32

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1372 :: (dereferenceable load (s32) from %ir.low163, align 8); ../udivmoddi4.c:131:25
  CMPri killed renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1374; ../udivmoddi4.c:131:21
  Bcc %bb.32, 1, killed $cpsr, debug-location !1374; ../udivmoddi4.c:131:21
  B %bb.31, debug-location !1374; ../udivmoddi4.c:131:21

bb.31.if.then166:
; predecessors: %bb.30
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1375 :: (dereferenceable load (s32) from %ir.all167, align 8); ../udivmoddi4.c:132:30
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1375 :: (dereferenceable load (s32) from %ir.all167 + 4, basealign 8); ../udivmoddi4.c:132:30
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1376; ../udivmoddi4.c:132:21

bb.32.if.end168:
; predecessors: %bb.30
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1377 :: (dereferenceable load (s32) from %ir.low170, align 8); ../udivmoddi4.c:133:40
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r1 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r12 = MULv5 killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r2 = MOVsi renamable $r12, 195, 14, $noreg, $noreg, debug-location !1378; ../udivmoddi4.c:133:22
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1380 :: (dereferenceable load (s32) from %ir.high172); ../udivmoddi4.c:134:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1381; ../udivmoddi4.c:134:37
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1384 :: (store (s32) into %ir.high175); ../udivmoddi4.c:134:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1389 :: (dereferenceable load (s32) from %ir.low181, align 8); ../udivmoddi4.c:135:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1386 :: (dereferenceable load (s32) from %ir.high177); ../udivmoddi4.c:135:32
  renamable $r3 = MOVi 32, 14, $noreg, $noreg
  renamable $r3 = nuw nsw SUBrsi killed renamable $r3, killed renamable $r12, 195, 14, $noreg, $noreg, debug-location !1387; ../udivmoddi4.c:135:54
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1388; ../udivmoddi4.c:135:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !1391; ../udivmoddi4.c:135:61
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !1393 :: (store (s32) into %ir.low185, align 8); ../udivmoddi4.c:135:25
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1394 :: (dereferenceable load (s32) from %ir.all186, align 8); ../udivmoddi4.c:136:26
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1394 :: (dereferenceable load (s32) from %ir.all186 + 4, basealign 8); ../udivmoddi4.c:136:26
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1395; ../udivmoddi4.c:136:17

bb.33.if.end187:
; predecessors: %bb.27
  successors: %bb.34, %bb.35

  renamable $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1396 :: (dereferenceable load (s32) from %ir.low189, align 8); ../udivmoddi4.c:142:55
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !1397; ../udivmoddi4.c:142:37
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1400 :: (dereferenceable load (s32) from %ir.high191); ../udivmoddi4.c:142:80
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1401; ../udivmoddi4.c:142:62
  renamable $r0 = SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1402; ../udivmoddi4.c:142:60
  renamable $r0 = ADDri killed renamable $r0, 33, 14, $noreg, $noreg, debug-location !1402; ../udivmoddi4.c:142:60
  STRi12 $r0, $sp, 32, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1404; ../udivmoddi4.c:147:17
  Bcc %bb.35, 1, killed $cpsr, debug-location !1404; ../udivmoddi4.c:147:17
  B %bb.34, debug-location !1404; ../udivmoddi4.c:147:17

bb.34.if.then195:
; predecessors: %bb.33
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 renamable $r0, $r11, -24, 14, $noreg, debug-location !1406 :: (store (s32) into %ir.low197, align 8); ../udivmoddi4.c:149:25
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1407 :: (dereferenceable load (s32) from %ir.low199, align 8); ../udivmoddi4.c:150:32
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !1410 :: (store (s32) into %ir.high201); ../udivmoddi4.c:150:26
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1413 :: (store (s32) into %ir.high203); ../udivmoddi4.c:151:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1415 :: (dereferenceable load (s32) from %ir.high205); ../udivmoddi4.c:152:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1417 :: (store (s32) into %ir.low207, align 8); ../udivmoddi4.c:152:25
  B %bb.39, debug-location !1418; ../udivmoddi4.c:153:13

bb.35.if.else208:
; predecessors: %bb.33
  successors: %bb.36, %bb.37

  $r0 = LDRi12 $sp, 32, 14, $noreg, debug-location !1420 :: (load (s32) from %stack.9); ../udivmoddi4.c:154:22
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1420; ../udivmoddi4.c:154:22
  Bcc %bb.37, 8, killed $cpsr, debug-location !1420; ../udivmoddi4.c:154:22
  B %bb.36, debug-location !1420; ../udivmoddi4.c:154:22

bb.36.if.then211:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r2 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !1422 :: (store (s32) into %ir.low213, align 8); ../udivmoddi4.c:156:25
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1423 :: (dereferenceable load (s32) from %ir.low215, align 8); ../udivmoddi4.c:157:32
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !1424; ../udivmoddi4.c:157:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !1425; ../udivmoddi4.c:157:36
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1428 :: (store (s32) into %ir.high219); ../udivmoddi4.c:157:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1430 :: (dereferenceable load (s32) from %ir.high221); ../udivmoddi4.c:158:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1431; ../udivmoddi4.c:158:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1434 :: (store (s32) into %ir.high224); ../udivmoddi4.c:158:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1439 :: (dereferenceable load (s32) from %ir.low230, align 8); ../udivmoddi4.c:159:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1436 :: (dereferenceable load (s32) from %ir.high226); ../udivmoddi4.c:159:32
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1438; ../udivmoddi4.c:159:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1441; ../udivmoddi4.c:159:61
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1443 :: (store (s32) into %ir.low234, align 8); ../udivmoddi4.c:159:25
  B %bb.38, debug-location !1444; ../udivmoddi4.c:160:13

bb.37.if.else235:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !1445 :: (load (s32) from %stack.9); ../udivmoddi4.c:163:31
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1445 :: (dereferenceable load (s32) from %ir.low237, align 8); ../udivmoddi4.c:163:31
  renamable $r3 = nsw RSBri renamable $r1, 64, 14, $noreg, $noreg, debug-location !1446; ../udivmoddi4.c:163:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !1447; ../udivmoddi4.c:163:35
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !1449 :: (store (s32) into %ir.low241, align 8); ../udivmoddi4.c:163:25
  renamable $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1454 :: (dereferenceable load (s32) from %ir.low247, align 8); ../udivmoddi4.c:165:33
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1451 :: (dereferenceable load (s32) from %ir.high243); ../udivmoddi4.c:164:33
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1453; ../udivmoddi4.c:164:38
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !1455; ../udivmoddi4.c:165:44
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r2, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1457; ../udivmoddi4.c:164:63
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1460 :: (store (s32) into %ir.high252); ../udivmoddi4.c:164:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1463 :: (store (s32) into %ir.high254); ../udivmoddi4.c:166:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1465 :: (dereferenceable load (s32) from %ir.high256); ../udivmoddi4.c:167:31
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !1467; ../udivmoddi4.c:167:36
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1469 :: (store (s32) into %ir.low260, align 8); ../udivmoddi4.c:167:25
  B %bb.38

bb.38.if.end261:
; predecessors: %bb.37, %bb.36
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  B %bb.39

bb.39.if.end262:
; predecessors: %bb.38, %bb.34
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  $r0 = LDRi12 $sp, 32, 14, $noreg :: (load (s32) from %stack.9)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.48, debug-location !1470; ../udivmoddi4.c:169:9

bb.40.if.else263:
; predecessors: %bb.26
  successors: %bb.41, %bb.44

  renamable $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1472 :: (dereferenceable load (s32) from %ir.high265); ../udivmoddi4.c:176:36
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = MVNr killed renamable $r0, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $lr = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $lr, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = ANDrr killed renamable $r0, renamable $lr, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r0, renamable $r2, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r3 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r0 = MULv5 killed renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r0 = MOVsi killed renamable $r0, 195, 14, $noreg, $noreg, debug-location !1473; ../udivmoddi4.c:176:18
  renamable $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1475 :: (dereferenceable load (s32) from %ir.high267); ../udivmoddi4.c:176:62
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 67, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r1, 131, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = MVNr killed renamable $r1, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r12 = ANDrsi killed renamable $r12, renamable $r1, 11, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r12 = ANDrsi renamable $lr, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $lr, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r12, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r2 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1476; ../udivmoddi4.c:176:44
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1477; ../udivmoddi4.c:176:42
  STRi12 $r0, $sp, 24, 14, $noreg :: (store (s32) into %stack.11)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1479; ../udivmoddi4.c:178:17
  Bcc %bb.44, 3, killed $cpsr, debug-location !1479; ../udivmoddi4.c:178:17
  B %bb.41, debug-location !1479; ../udivmoddi4.c:178:17

bb.41.if.then271:
; predecessors: %bb.40
  successors: %bb.43, %bb.42

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1480 :: (load (s32) from %stack.4); ../udivmoddi4.c:180:21
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1480; ../udivmoddi4.c:180:21
  Bcc %bb.43, 0, killed $cpsr, debug-location !1480; ../udivmoddi4.c:180:21
  B %bb.42, debug-location !1480; ../udivmoddi4.c:180:21

bb.42.if.then273:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1481 :: (load (s32) from %stack.4); ../udivmoddi4.c:181:30
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1481 :: (dereferenceable load (s32) from %ir.all274, align 8); ../udivmoddi4.c:181:30
  renamable $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1481 :: (dereferenceable load (s32) from %ir.all274 + 4, basealign 8); ../udivmoddi4.c:181:30
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1482 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:181:26
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1482 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:181:26
  B %bb.43, debug-location !1483; ../udivmoddi4.c:181:21

bb.43.if.end275:
; predecessors: %bb.41, %bb.42
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  $r1 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1484; ../udivmoddi4.c:182:17

bb.44.if.end276:
; predecessors: %bb.40
  successors: %bb.45, %bb.46

  $r0 = LDRi12 $sp, 24, 14, $noreg, debug-location !1485 :: (load (s32) from %stack.11); ../udivmoddi4.c:184:13
  renamable $r0 = nsw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1485; ../udivmoddi4.c:184:13
  STRi12 $r0, $sp, 20, 14, $noreg :: (store (s32) into %stack.12)
  renamable $r1 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r1, $r11, -24, 14, $noreg, debug-location !1487 :: (store (s32) into %ir.low279, align 8); ../udivmoddi4.c:187:21
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1489; ../udivmoddi4.c:188:17
  Bcc %bb.46, 1, killed $cpsr, debug-location !1489; ../udivmoddi4.c:188:17
  B %bb.45, debug-location !1489; ../udivmoddi4.c:188:17

bb.45.if.then282:
; predecessors: %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1490 :: (dereferenceable load (s32) from %ir.low284, align 8); ../udivmoddi4.c:190:32
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1493 :: (store (s32) into %ir.high286); ../udivmoddi4.c:190:26
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1496 :: (store (s32) into %ir.high288); ../udivmoddi4.c:191:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1498 :: (dereferenceable load (s32) from %ir.high290); ../udivmoddi4.c:192:31
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1500 :: (store (s32) into %ir.low292, align 8); ../udivmoddi4.c:192:25
  B %bb.47, debug-location !1501; ../udivmoddi4.c:193:13

bb.46.if.else293:
; predecessors: %bb.44
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !1502 :: (load (s32) from %stack.12); ../udivmoddi4.c:196:32
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1502 :: (load (s32) from %stack.11); ../udivmoddi4.c:196:32
  renamable $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1502 :: (dereferenceable load (s32) from %ir.low295, align 8); ../udivmoddi4.c:196:32
  renamable $r3 = nsw RSBri renamable $r1, 31, 14, $noreg, $noreg, debug-location !1503; ../udivmoddi4.c:196:53
  renamable $r0 = MOVsr killed renamable $r0, renamable $r3, 2, 14, $noreg, $noreg, debug-location !1504; ../udivmoddi4.c:196:36
  STRi12 killed renamable $r0, $r11, -20, 14, $noreg, debug-location !1507 :: (store (s32) into %ir.high299); ../udivmoddi4.c:196:26
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1509 :: (dereferenceable load (s32) from %ir.high301); ../udivmoddi4.c:197:32
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1510; ../udivmoddi4.c:197:37
  STRi12 killed renamable $r0, $r11, -28, 14, $noreg, debug-location !1513 :: (store (s32) into %ir.high304); ../udivmoddi4.c:197:26
  renamable $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1518 :: (dereferenceable load (s32) from %ir.low310, align 8); ../udivmoddi4.c:198:68
  renamable $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1515 :: (dereferenceable load (s32) from %ir.high306); ../udivmoddi4.c:198:32
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1517; ../udivmoddi4.c:198:37
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1520; ../udivmoddi4.c:198:61
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1522 :: (store (s32) into %ir.low314, align 8); ../udivmoddi4.c:198:25
  B %bb.47

bb.47.if.end315:
; predecessors: %bb.46, %bb.45
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  $r0 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.12)
  STRi12 killed $r0, $sp, 28, 14, $noreg :: (store (s32) into %stack.10)
  B %bb.48

bb.48.if.end316:
; predecessors: %bb.47, %bb.39
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1523 :: (load (s32) from %stack.10); ../udivmoddi4.c:0
  STRi12 killed $r0, $sp, 36, 14, $noreg :: (store (s32) into %stack.8)
  B %bb.49

bb.49.if.end317:
; predecessors: %bb.48, %bb.25
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $sp, 36, 14, $noreg, debug-location !1523 :: (load (s32) from %stack.8); ../udivmoddi4.c:0
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.50, debug-location !1524; ../udivmoddi4.c:209:5

bb.50.for.cond:
; predecessors: %bb.49, %bb.52
  successors: %bb.53, %bb.51

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1523 :: (load (s32) from %stack.14); ../udivmoddi4.c:0
  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1523 :: (load (s32) from %stack.13); ../udivmoddi4.c:0
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.16)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.15)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1524; ../udivmoddi4.c:209:5
  Bcc %bb.53, 0, killed $cpsr, debug-location !1524; ../udivmoddi4.c:209:5
  B %bb.51, debug-location !1524; ../udivmoddi4.c:209:5

bb.51.for.body:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1528 :: (load (s32) from %stack.16); ../udivmoddi4.c:212:43
  renamable $r1 = LDRi12 $r11, -32, 14, $noreg, debug-location !1528 :: (dereferenceable load (s32) from %ir.low324, align 8); ../udivmoddi4.c:212:43
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !1527 :: (dereferenceable load (s32) from %ir.high321); ../udivmoddi4.c:212:25
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !1529; ../udivmoddi4.c:212:36
  renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !1529; ../udivmoddi4.c:212:36
  STRi12 killed renamable $r2, $r11, -28, 14, $noreg, debug-location !1532 :: (store (s32) into %ir.high328); ../udivmoddi4.c:212:18
  renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1534 :: (dereferenceable load (s32) from %ir.high333); ../udivmoddi4.c:213:43
  renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1535; ../udivmoddi4.c:213:36
  renamable $r1 = ORRrsi killed renamable $r1, killed renamable $r2, 251, 14, $noreg, $noreg, debug-location !1535; ../udivmoddi4.c:213:36
  STRi12 killed renamable $r1, $r11, -32, 14, $noreg, debug-location !1537 :: (store (s32) into %ir.low337, align 8); ../udivmoddi4.c:213:18
  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1540 :: (dereferenceable load (s32) from %ir.low342, align 8); ../udivmoddi4.c:214:43
  renamable $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1539 :: (dereferenceable load (s32) from %ir.high339); ../udivmoddi4.c:214:25
  renamable $r2 = MOVsi killed renamable $r2, 10, 14, $noreg, $noreg, debug-location !1541; ../udivmoddi4.c:214:36
  renamable $r2 = ORRrsi killed renamable $r2, renamable $r1, 251, 14, $noreg, $noreg, debug-location !1541; ../udivmoddi4.c:214:36
  STRi12 killed renamable $r2, $r11, -20, 14, $noreg, debug-location !1544 :: (store (s32) into %ir.high346); ../udivmoddi4.c:214:18
  renamable $r0 = ORRrsi renamable $r0, killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1546; ../udivmoddi4.c:215:36
  STRi12 killed renamable $r0, $r11, -24, 14, $noreg, debug-location !1548 :: (store (s32) into %ir.low352, align 8); ../udivmoddi4.c:215:18
  renamable $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !1549 :: (dereferenceable load (s32) from %ir.all354, align 8); ../udivmoddi4.c:223:37
  renamable $r2 = LDRi12 $r11, -12, 14, $noreg, debug-location !1549 :: (dereferenceable load (s32) from %ir.all354 + 4, basealign 8); ../udivmoddi4.c:223:37
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !1550 :: (dereferenceable load (s32) from %ir.all355, align 8); ../udivmoddi4.c:223:45
  renamable $r1 = LDRi12 $r11, -28, 14, $noreg, debug-location !1550 :: (dereferenceable load (s32) from %ir.all355 + 4, basealign 8); ../udivmoddi4.c:223:45
  renamable $r3 = MVNr renamable $r1, 14, $noreg, $noreg, debug-location !1551; ../udivmoddi4.c:223:49
  renamable $lr = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1551; ../udivmoddi4.c:223:49
  dead renamable $lr = ADDrr renamable $r12, killed renamable $lr, 14, $noreg, def $cpsr, debug-location !1551; ../udivmoddi4.c:223:49
  renamable $r3 = ADCrr renamable $r2, killed renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1551; ../udivmoddi4.c:223:49
  STRi12 $r3, $sp, 0, 14, $noreg :: (store (s32) into %stack.17)
  renamable $r12 = SUBrr renamable $r0, killed renamable $r12, 14, $noreg, def $cpsr, debug-location !1554; ../udivmoddi4.c:225:15
  renamable $r2 = SBCrr renamable $r1, killed renamable $r2, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1554; ../udivmoddi4.c:225:15
  CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1554; ../udivmoddi4.c:225:15
  $r0 = MOVr killed renamable $r12, 4, killed $cpsr, $noreg, implicit renamable $r0, debug-location !1554; ../udivmoddi4.c:225:15
  CMPri renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1554; ../udivmoddi4.c:225:15
  $r1 = MOVr killed renamable $r2, 4, killed $cpsr, $noreg, implicit renamable $r1, debug-location !1554; ../udivmoddi4.c:225:15
  STRi12 killed renamable $r1, $r11, -28, 14, $noreg, debug-location !1554 :: (store (s32) into %ir.all363 + 4, basealign 8); ../udivmoddi4.c:225:15
  STRi12 killed renamable $r0, $r11, -32, 14, $noreg, debug-location !1554 :: (store (s32) into %ir.all363, align 8); ../udivmoddi4.c:225:15
  B %bb.52, debug-location !1555; ../udivmoddi4.c:226:5

bb.52.for.inc:
; predecessors: %bb.51
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1556 :: (load (s32) from %stack.15); ../udivmoddi4.c:224:19
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1556 :: (load (s32) from %stack.17); ../udivmoddi4.c:224:19
  renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1556; ../udivmoddi4.c:224:19
  renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1558; ../udivmoddi4.c:209:20
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.14)
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.50, debug-location !1524; ../udivmoddi4.c:209:5

bb.53.for.end:
; predecessors: %bb.50
  successors: %bb.55, %bb.54

  $r0 = LDRi12 $r11, -36, 14, $noreg, debug-location !1560 :: (load (s32) from %stack.4); ../udivmoddi4.c:227:16
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1560 :: (load (s32) from %stack.16); ../udivmoddi4.c:227:16
  renamable $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1560 :: (dereferenceable load (s32) from %ir.all365, align 8); ../udivmoddi4.c:227:16
  renamable $r1 = LDRi12 $r11, -20, 14, $noreg, debug-location !1560 :: (dereferenceable load (s32) from %ir.all365 + 4, basealign 8); ../udivmoddi4.c:227:16
  renamable $r1 = MOVsi killed renamable $r1, 10, 14, $noreg, $noreg, debug-location !1561; ../udivmoddi4.c:227:20
  renamable $r1 = ORRrsi killed renamable $r1, renamable $r3, 251, 14, $noreg, $noreg, debug-location !1561; ../udivmoddi4.c:227:20
  renamable $r2 = ORRrsi renamable $r2, killed renamable $r3, 10, 14, $noreg, $noreg, debug-location !1563; ../udivmoddi4.c:227:26
  STRi12 killed renamable $r2, $r11, -24, 14, $noreg, debug-location !1565 :: (store (s32) into %ir.all369, align 8); ../udivmoddi4.c:227:11
  STRi12 killed renamable $r1, $r11, -20, 14, $noreg, debug-location !1565 :: (store (s32) into %ir.all369 + 4, basealign 8); ../udivmoddi4.c:227:11
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1566; ../udivmoddi4.c:228:9
  Bcc %bb.55, 0, killed $cpsr, debug-location !1566; ../udivmoddi4.c:228:9
  B %bb.54, debug-location !1566; ../udivmoddi4.c:228:9

bb.54.if.then371:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  $r1 = LDRi12 $r11, -36, 14, $noreg, debug-location !1567 :: (load (s32) from %stack.4); ../udivmoddi4.c:229:18
  renamable $r0 = LDRi12 $r11, -32, 14, $noreg, debug-location !1567 :: (dereferenceable load (s32) from %ir.all372, align 8); ../udivmoddi4.c:229:18
  renamable $r2 = LDRi12 $r11, -28, 14, $noreg, debug-location !1567 :: (dereferenceable load (s32) from %ir.all372 + 4, basealign 8); ../udivmoddi4.c:229:18
  STRi12 killed renamable $r2, renamable $r1, 4, 14, $noreg, debug-location !1568 :: (store (s32) into %ir.rem + 4, basealign 8); ../udivmoddi4.c:229:14
  STRi12 killed renamable $r0, renamable $r1, 0, 14, $noreg, debug-location !1568 :: (store (s32) into %ir.rem, align 8); ../udivmoddi4.c:229:14
  B %bb.55, debug-location !1569; ../udivmoddi4.c:229:9

bb.55.if.end373:
; predecessors: %bb.53, %bb.54
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  renamable $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1570 :: (dereferenceable load (s32) from %ir.all374, align 8); ../udivmoddi4.c:230:14
  renamable $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1570 :: (dereferenceable load (s32) from %ir.all374 + 4, basealign 8); ../udivmoddi4.c:230:14
  STRi12 killed $r1, $sp, 44, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -40, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.56, debug-location !1571; ../udivmoddi4.c:230:5

bb.56.return:
; predecessors: %bb.43, %bb.32, %bb.31, %bb.55, %bb.24, %bb.20, %bb.16, %bb.12, %bb.7, %bb.4

  $r0 = LDRi12 $sp, 44, 14, $noreg, debug-location !1523 :: (load (s32) from %stack.6); ../udivmoddi4.c:0
  $r1 = LDRi12 $r11, -40, 14, $noreg, debug-location !1523 :: (load (s32) from %stack.5); ../udivmoddi4.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1572; ../udivmoddi4.c:231:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1572; ../udivmoddi4.c:231:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1572; ../udivmoddi4.c:231:1

bb.57 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __udivmoddi4.

# Machine code for function __divmoddi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#-1: size=4, align=8, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-36]
  fi#3: size=4, align=4, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
  fi#6: size=4, align=4, at location [SP-12]
  fi#7: size=4, align=4, at location [SP-16]
  fi#8: size=4, align=4, at location [SP-20]
  fi#9: size=4, align=4, at location [SP-24]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r7, -12
  frame-setup CFI_INSTRUCTION offset $r6, -16
  frame-setup CFI_INSTRUCTION offset $r5, -20
  frame-setup CFI_INSTRUCTION offset $r4, -24
  $r11 = frame-setup ADDri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.0)
  $r5 = MOVr killed $r2, 14, $noreg, $noreg
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  dead renamable $r2 = KILL renamable $r3
  dead renamable $r2 = KILL renamable $r5
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  renamable $r2 = LDRi12 $r11, 8, 14, $noreg :: (load (s32) from %fixed-stack.0)
  STRi12 $r2, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r5, 14, $noreg, $noreg, debug-location !1574; ../divmoddi4.c:22:14
  BL_pred @__divdi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1574; ../divmoddi4.c:22:14
  $r12 = LDRi12 $sp, 0, 14, $noreg, debug-location !1574 :: (load (s32) from %stack.3); ../divmoddi4.c:22:14
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1574 :: (load (s32) from %stack.2); ../divmoddi4.c:22:14
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1574 :: (load (s32) from %stack.1); ../divmoddi4.c:22:14
  $lr = LDRi12 $sp, 12, 14, $noreg, debug-location !1574 :: (load (s32) from %stack.0); ../divmoddi4.c:22:14
  early-clobber renamable $r4, early-clobber renamable $r7 = UMULLv5 renamable $r0, renamable $r5, 14, $noreg, $noreg, debug-location !1575; ../divmoddi4.c:23:16
  early-clobber renamable $r6 = MLAv5 renamable $r0, killed renamable $lr, killed renamable $r7, 14, $noreg, $noreg, debug-location !1575; ../divmoddi4.c:23:16
  early-clobber renamable $lr = MLAv5 renamable $r1, killed renamable $r5, killed renamable $r6, 14, $noreg, $noreg, debug-location !1575; ../divmoddi4.c:23:16
  renamable $r12 = SUBrr killed renamable $r12, killed renamable $r4, 14, $noreg, def $cpsr, debug-location !1576; ../divmoddi4.c:23:12
  renamable $r2 = SBCrr killed renamable $r2, killed renamable $lr, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1576; ../divmoddi4.c:23:12
  STRi12 killed renamable $r12, renamable $r3, 0, 14, $noreg, debug-location !1577 :: (store (s32) into %ir.rem, align 8); ../divmoddi4.c:23:8
  STRi12 killed renamable $r2, killed renamable $r3, 4, 14, $noreg, debug-location !1577 :: (store (s32) into %ir.rem + 4, basealign 8); ../divmoddi4.c:23:8
  $sp = frame-destroy SUBri killed $r11, 16, 14, $noreg, $noreg, debug-location !1578; ../divmoddi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r5, def $r6, def $r7, def $r11, def $lr, debug-location !1578; ../divmoddi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1578; ../divmoddi4.c:24:3

# End machine code for function __divmoddi4.

# Machine code for function __divmodsi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1580; ../divmodsi4.c:22:14
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1580 :: (load (s32) from %stack.2); ../divmodsi4.c:22:14
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1580 :: (load (s32) from %stack.1); ../divmodsi4.c:22:14
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1580 :: (load (s32) from %stack.0); ../divmodsi4.c:22:14
  early-clobber renamable $r3 = nsw MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1581; ../divmodsi4.c:23:16
  renamable $r1 = nsw SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1582; ../divmodsi4.c:23:12
  STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1583 :: (store (s32) into %ir.rem); ../divmodsi4.c:23:8
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1584; ../divmodsi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1584; ../divmodsi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1584; ../divmodsi4.c:24:3

# End machine code for function __divmodsi4.

# Machine code for function __divsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  $r3 = MOVr killed $r1, 14, $noreg, $noreg
  $r1 = MOVr killed $r0, 14, $noreg, $noreg
  renamable $r2 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !1586; ../divsi3.c:25:20
  renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1588; ../divsi3.c:27:12
  renamable $r0 = nsw SUBrsi killed renamable $r0, killed renamable $r1, 249, 14, $noreg, $noreg, debug-location !1589; ../divsi3.c:27:19
  renamable $r1 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1590; ../divsi3.c:28:12
  renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1591; ../divsi3.c:28:19
  renamable $r2 = EORrsi killed renamable $r2, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !1592; ../divsi3.c:29:9
  STRi12 $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL &__udivsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1593; ../divsi3.c:36:22
  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1593 :: (load (s32) from %stack.0); ../divsi3.c:36:22
  renamable $r0 = EORrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1594; ../divsi3.c:36:33
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1595; ../divsi3.c:36:40
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1596; ../divsi3.c:36:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1596; ../divsi3.c:36:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1596; ../divsi3.c:36:5

# End machine code for function __divsi3.

# Machine code for function __ffsdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 12, 14, $noreg, debug-location !1599 :: (store (s32) into %ir.all + 4, basealign 8); ../ffsdi2.c:25:11
  STRi12 killed renamable $r0, $sp, 8, 14, $noreg, debug-location !1599 :: (store (s32) into %ir.all, align 8); ../ffsdi2.c:25:11
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1600 :: (dereferenceable load (s32) from %ir.low, align 8); ../ffsdi2.c:26:13
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1602; ../ffsdi2.c:26:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !1602; ../ffsdi2.c:26:9
  B %bb.1, debug-location !1602; ../ffsdi2.c:26:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  renamable $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1604 :: (dereferenceable load (s32) from %ir.high); ../ffsdi2.c:28:17
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1606; ../ffsdi2.c:28:13
  Bcc %bb.3, 1, killed $cpsr, debug-location !1606; ../ffsdi2.c:28:13
  B %bb.2, debug-location !1606; ../ffsdi2.c:28:13

bb.2.if.then3:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1607; ../ffsdi2.c:29:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1609 :: (dereferenceable load (s32) from %ir.high5); ../ffsdi2.c:30:34
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1610; ../ffsdi2.c:30:16
  renamable $r0 = MOVi 33, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1611; ../ffsdi2.c:30:40
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1612; ../ffsdi2.c:30:9

bb.4.if.end6:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1613 :: (dereferenceable load (s32) from %ir.low8, align 8); ../ffsdi2.c:32:30
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r0 = BICrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1614; ../ffsdi2.c:32:12
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1615; ../ffsdi2.c:32:35
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.5, debug-location !1616; ../ffsdi2.c:32:5

bb.5.return:
; predecessors: %bb.4, %bb.3, %bb.2

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1617 :: (load (s32) from %stack.1); ../ffsdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 16, 14, $noreg, $noreg, debug-location !1618; ../ffsdi2.c:33:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1618; ../ffsdi2.c:33:1

bb.6 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ffsdi2.

# Machine code for function __ffssi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
  cp#3: 16843009, align=4
Function Live Ins: $r0

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1621; ../ffssi2.c:24:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !1621; ../ffssi2.c:24:9
  B %bb.1, debug-location !1621; ../ffssi2.c:24:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !1622; ../ffssi2.c:26:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1623 :: (load (s32) from %stack.0); ../ffssi2.c:28:12
  renamable $r0 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r0 = BICrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r2, renamable $r0, 19, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r2 = LDRcp %const.3, 0, 14, $noreg :: (load (s32) from constant-pool)
  early-clobber renamable $r1 = MULv5 killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1623; ../ffssi2.c:28:12
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, killed renamable $r1, 195, 14, $noreg, $noreg, debug-location !1624; ../ffssi2.c:28:29
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  B %bb.3, debug-location !1625; ../ffssi2.c:28:5

bb.3.return:
; predecessors: %bb.2, %bb.1

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1626 :: (load (s32) from %stack.1); ../ffssi2.c:0
  $sp = frame-destroy ADDri killed $sp, 8, 14, $noreg, $noreg, debug-location !1627; ../ffssi2.c:29:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1627; ../ffssi2.c:29:1

bb.4 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
  CONSTPOOL_ENTRY 3, %const.3, 4

# End machine code for function __ffssi2.

# Machine code for function __lshrdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.2, %bb.1
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 40, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 40
  STRi12 $r2, $sp, 12, 14, $noreg :: (store (s32) into %stack.4)
  $r3 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 16, 14, $noreg :: (store (s32) into %stack.3)
  $r3 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 20, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed renamable $r1, $sp, 36, 14, $noreg, debug-location !1630 :: (store (s32) into %ir.all + 4, basealign 8); ../lshrdi3.c:29:15
  STRi12 killed renamable $r0, $sp, 32, 14, $noreg, debug-location !1630 :: (store (s32) into %ir.all, align 8); ../lshrdi3.c:29:15
  TSTri renamable $r2, 32, 14, $noreg, implicit-def $cpsr, debug-location !1632; ../lshrdi3.c:30:9
  Bcc %bb.2, 0, killed $cpsr, debug-location !1632; ../lshrdi3.c:30:9
  B %bb.1, debug-location !1632; ../lshrdi3.c:30:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg :: (load (s32) from %stack.4)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1635 :: (store (s32) into %ir.high); ../lshrdi3.c:32:23
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1637 :: (dereferenceable load (s32) from %ir.high2); ../lshrdi3.c:33:32
  renamable $r1 = nsw SUBri renamable $r1, 32, 14, $noreg, $noreg, debug-location !1638; ../lshrdi3.c:33:43
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r1, 3, 14, $noreg, $noreg, debug-location !1639; ../lshrdi3.c:33:37
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1641 :: (store (s32) into %ir.low, align 8); ../lshrdi3.c:33:22
  B %bb.5, debug-location !1642; ../lshrdi3.c:34:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1644 :: (load (s32) from %stack.4); ../lshrdi3.c:37:13
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1644; ../lshrdi3.c:37:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1644; ../lshrdi3.c:37:13
  B %bb.3, debug-location !1644; ../lshrdi3.c:37:13

bb.3.if.then4:
; predecessors: %bb.2
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  $r0 = LDRi12 $sp, 16, 14, $noreg :: (load (s32) from %stack.3)
  $r1 = LDRi12 $sp, 20, 14, $noreg :: (load (s32) from %stack.2)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1645; ../lshrdi3.c:38:13

bb.4.if.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $r2 = LDRi12 $sp, 12, 14, $noreg, debug-location !1647 :: (load (s32) from %stack.4); ../lshrdi3.c:39:34
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1647 :: (dereferenceable load (s32) from %ir.high6); ../lshrdi3.c:39:34
  renamable $r0 = MOVsr killed renamable $r0, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1648; ../lshrdi3.c:39:39
  STRi12 killed renamable $r0, $sp, 28, 14, $noreg, debug-location !1651 :: (store (s32) into %ir.high9); ../lshrdi3.c:39:24
  renamable $r1 = LDRi12 $sp, 32, 14, $noreg, debug-location !1656 :: (dereferenceable load (s32) from %ir.low14, align 8); ../lshrdi3.c:40:72
  renamable $r0 = LDRi12 $sp, 36, 14, $noreg, debug-location !1653 :: (dereferenceable load (s32) from %ir.high11); ../lshrdi3.c:40:33
  renamable $r3 = nsw RSBri renamable $r2, 32, 14, $noreg, $noreg, debug-location !1654; ../lshrdi3.c:40:55
  renamable $r0 = MOVsr killed renamable $r0, killed renamable $r3, 2, 14, $noreg, $noreg, debug-location !1655; ../lshrdi3.c:40:38
  renamable $r0 = ORRrsr killed renamable $r0, killed renamable $r1, renamable $r2, 3, 14, $noreg, $noreg, debug-location !1658; ../lshrdi3.c:40:61
  STRi12 killed renamable $r0, $sp, 24, 14, $noreg, debug-location !1660 :: (store (s32) into %ir.low17, align 8); ../lshrdi3.c:40:22
  B %bb.5

bb.5.if.end18:
; predecessors: %bb.1, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1661 :: (dereferenceable load (s32) from %ir.all19, align 8); ../lshrdi3.c:42:19
  renamable $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1661 :: (dereferenceable load (s32) from %ir.all19 + 4, basealign 8); ../lshrdi3.c:42:19
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.6, debug-location !1662; ../lshrdi3.c:42:5

bb.6.return:
; predecessors: %bb.5, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1663 :: (load (s32) from %stack.6); ../lshrdi3.c:0
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1663 :: (load (s32) from %stack.5); ../lshrdi3.c:0
  $sp = frame-destroy ADDri killed $sp, 40, 14, $noreg, $noreg, debug-location !1664; ../lshrdi3.c:43:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1664; ../lshrdi3.c:43:1

# End machine code for function __lshrdi3.

# Machine code for function __moddi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  $r12 = MOVr killed $r1, 14, $noreg, $noreg
  STRi12 $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.1)
  dead renamable $r1 = KILL renamable $r3
  dead renamable $r1 = KILL renamable $r2
  dead renamable $r1 = KILL renamable $r12
  dead renamable $r1 = KILL renamable $r0
  renamable $r1 = ADDrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1666; ../moddi3.c:24:17
  renamable $r2 = EORrsi killed renamable $r1, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1666; ../moddi3.c:24:17
  renamable $r1 = ADCrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1666; ../moddi3.c:24:17
  renamable $r3 = EORrsi killed renamable $r1, killed renamable $r3, 249, 14, $noreg, $noreg, debug-location !1666; ../moddi3.c:24:17
  renamable $r0 = EORrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1668; ../moddi3.c:26:12
  renamable $r1 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1668; ../moddi3.c:26:12
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1669; ../moddi3.c:26:17
  renamable $r1 = SBCrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1669; ../moddi3.c:26:17
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1670; ../moddi3.c:28:5
  renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1670 :: (store (s32) into stack); ../moddi3.c:28:5
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1670; ../moddi3.c:28:5
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1670 :: (load (s32) from %stack.1); ../moddi3.c:28:5
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1671 :: (dereferenceable load (s32) from %ir.r, align 8); ../moddi3.c:29:21
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1671 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../moddi3.c:29:21
  renamable $r1 = EORrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1672; ../moddi3.c:29:23
  renamable $r0 = EORrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1672; ../moddi3.c:29:23
  renamable $r0 = SUBrsi killed renamable $r0, renamable $r2, 249, 14, $noreg, def $cpsr, debug-location !1673; ../moddi3.c:29:28
  renamable $r1 = SBCrsi killed renamable $r1, killed renamable $r2, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1673; ../moddi3.c:29:28
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1674; ../moddi3.c:29:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1674; ../moddi3.c:29:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1674; ../moddi3.c:29:5

# End machine code for function __moddi3.

# Machine code for function __modsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL_pred @__divsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1676; ../modsi3.c:22:16
  $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1676 :: (load (s32) from %stack.1); ../modsi3.c:22:16
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1676; ../modsi3.c:22:16
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1677 :: (load (s32) from %stack.0); ../modsi3.c:22:31
  early-clobber renamable $r1 = nsw MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1677; ../modsi3.c:22:31
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1678; ../modsi3.c:22:14
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1679; ../modsi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1679; ../modsi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1679; ../modsi3.c:22:5

# End machine code for function __modsi3.

# Machine code for function __mulvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-32]
  fi#4: size=4, align=4, at location [SP-36]
  fi#5: size=4, align=4, at location [SP-40]
  fi#6: size=4, align=4, at location [SP-44]
  fi#7: size=4, align=4, at location [SP-48]
  fi#8: size=4, align=4, at location [SP-52]
  fi#9: size=4, align=4, at location [SP-56]
  fi#10: size=4, align=4, at location [SP-60]
  fi#11: size=4, align=4, at location [SP-64]
  fi#12: size=4, align=4, at location [SP-4]
  fi#13: size=4, align=4, at location [SP-8]
  fi#14: size=4, align=4, at location [SP-12]
  fi#15: size=4, align=4, at location [SP-16]
Constant Pool:
  cp#0: @.str.8, align=4
  cp#1: @__func__.__mulvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0, $r1, $r2, $r3, $r4, $r10, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $r10, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  frame-setup CFI_INSTRUCTION offset $r10, -12
  frame-setup CFI_INSTRUCTION offset $r4, -16
  $r11 = frame-setup ADDri killed $sp, 8, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa $r11, 8
  $sp = frame-setup SUBri killed $sp, 48, 14, $noreg, $noreg
  STRi12 killed $r3, $r11, -24, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r2, $r11, -20, 14, $noreg :: (store (s32) into %stack.2)
  $r2 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -16, 14, $noreg :: (store (s32) into %stack.1)
  $r2 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r2, $r11, -12, 14, $noreg :: (store (s32) into %stack.0)
  renamable $r1 = EORri killed renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1681; ../mulvdi3.c:27:11
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1681; ../mulvdi3.c:27:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1682; ../mulvdi3.c:27:9
  Bcc %bb.5, 1, killed $cpsr, debug-location !1682; ../mulvdi3.c:27:9
  B %bb.1, debug-location !1682; ../mulvdi3.c:27:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1683 :: (load (s32) from %stack.2); ../mulvdi3.c:29:15
  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1683 :: (load (s32) from %stack.3); ../mulvdi3.c:29:15
  renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1683; ../mulvdi3.c:29:15
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1684; ../mulvdi3.c:29:20
  Bcc %bb.3, 0, killed $cpsr, debug-location !1684; ../mulvdi3.c:29:20
  B %bb.2, debug-location !1684; ../mulvdi3.c:29:20

bb.2.lor.lhs.false:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1685 :: (load (s32) from %stack.3); ../mulvdi3.c:29:25
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1685 :: (load (s32) from %stack.2); ../mulvdi3.c:29:25
  renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1685; ../mulvdi3.c:29:25
  renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1685; ../mulvdi3.c:29:25
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1686; ../mulvdi3.c:29:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1686; ../mulvdi3.c:29:13
  B %bb.3, debug-location !1686; ../mulvdi3.c:29:13

bb.3.if.then3:
; predecessors: %bb.1, %bb.2
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1687; ../mulvdi3.c:30:13

bb.4.if.end:
; predecessors: %bb.2

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1688 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1688 :: (load (s32) from constant-pool); ../mulvdi3.c:31:9
  renamable $r1 = MOVi 31, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1688; ../mulvdi3.c:31:9

bb.5.if.end4:
; predecessors: %bb.0
  successors: %bb.6, %bb.10

  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1689 :: (load (s32) from %stack.2); ../mulvdi3.c:33:11
  $r1 = LDRi12 $r11, -24, 14, $noreg, debug-location !1689 :: (load (s32) from %stack.3); ../mulvdi3.c:33:11
  renamable $r1 = EORri renamable $r1, -2147483648, 14, $noreg, $noreg, debug-location !1689; ../mulvdi3.c:33:11
  renamable $r0 = ORRrr renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1689; ../mulvdi3.c:33:11
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1690; ../mulvdi3.c:33:9
  Bcc %bb.10, 1, killed $cpsr, debug-location !1690; ../mulvdi3.c:33:9
  B %bb.6, debug-location !1690; ../mulvdi3.c:33:9

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8, %bb.7

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1691 :: (load (s32) from %stack.0); ../mulvdi3.c:35:15
  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1691 :: (load (s32) from %stack.1); ../mulvdi3.c:35:15
  renamable $r0 = ORRrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1691; ../mulvdi3.c:35:15
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1692; ../mulvdi3.c:35:20
  Bcc %bb.8, 0, killed $cpsr, debug-location !1692; ../mulvdi3.c:35:20
  B %bb.7, debug-location !1692; ../mulvdi3.c:35:20

bb.7.lor.lhs.false8:
; predecessors: %bb.6
  successors: %bb.8, %bb.9

  $r1 = LDRi12 $r11, -16, 14, $noreg, debug-location !1693 :: (load (s32) from %stack.1); ../mulvdi3.c:35:25
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1693 :: (load (s32) from %stack.0); ../mulvdi3.c:35:25
  renamable $r0 = EORri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1693; ../mulvdi3.c:35:25
  renamable $r0 = ORRrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1693; ../mulvdi3.c:35:25
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1694; ../mulvdi3.c:35:13
  Bcc %bb.9, 1, killed $cpsr, debug-location !1694; ../mulvdi3.c:35:13
  B %bb.8, debug-location !1694; ../mulvdi3.c:35:13

bb.8.if.then10:
; predecessors: %bb.6, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1695; ../mulvdi3.c:36:13

bb.9.if.end12:
; predecessors: %bb.7

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1696 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1696 :: (load (s32) from constant-pool); ../mulvdi3.c:37:9
  renamable $r1 = MOVi 37, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1696; ../mulvdi3.c:37:9

bb.10.if.end13:
; predecessors: %bb.5
  successors: %bb.12, %bb.11

  $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1697 :: (load (s32) from %stack.3); ../mulvdi3.c:39:19
  $r2 = LDRi12 $r11, -20, 14, $noreg, debug-location !1697 :: (load (s32) from %stack.2); ../mulvdi3.c:39:19
  $r12 = LDRi12 $r11, -16, 14, $noreg, debug-location !1697 :: (load (s32) from %stack.1); ../mulvdi3.c:39:19
  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1697 :: (load (s32) from %stack.0); ../mulvdi3.c:39:19
  renamable $r1 = MOVsi renamable $r12, 249, 14, $noreg, $noreg, debug-location !1697; ../mulvdi3.c:39:19
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.10)
  renamable $r1 = EORrsi renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1698; ../mulvdi3.c:40:23
  renamable $r0 = EORrsi renamable $r12, renamable $r12, 249, 14, $noreg, $noreg, debug-location !1698; ../mulvdi3.c:40:23
  renamable $r1 = SUBrsi killed renamable $r1, renamable $r12, 249, 14, $noreg, def $cpsr, debug-location !1699; ../mulvdi3.c:40:29
  STRi12 $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.9)
  renamable $r0 = SBCrsi killed renamable $r0, renamable $r12, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1699; ../mulvdi3.c:40:29
  STRi12 $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.8)
  renamable $r12 = MOVsi renamable $r3, 249, 14, $noreg, $noreg, debug-location !1700; ../mulvdi3.c:41:19
  STRi12 $r12, $sp, 16, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r12, $sp, 20, 14, $noreg :: (store (s32) into %stack.6)
  renamable $r12 = EORrsi renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1701; ../mulvdi3.c:42:23
  renamable $r2 = EORrsi renamable $r3, renamable $r3, 249, 14, $noreg, $noreg, debug-location !1701; ../mulvdi3.c:42:23
  renamable $r12 = SUBrsi killed renamable $r12, renamable $r3, 249, 14, $noreg, def $cpsr, debug-location !1702; ../mulvdi3.c:42:29
  STRi12 killed $r12, $sp, 24, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r2 = SBCrsi killed renamable $r2, renamable $r3, 249, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1702; ../mulvdi3.c:42:29
  STRi12 killed $r2, $sp, 28, 14, $noreg :: (store (s32) into %stack.4)
  dead renamable $r1 = SUBri renamable $r1, 2, 14, $noreg, def $cpsr, debug-location !1703; ../mulvdi3.c:43:15
  dead renamable $r0 = SBCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1703; ../mulvdi3.c:43:15
  Bcc %bb.12, 11, killed $cpsr, debug-location !1704; ../mulvdi3.c:43:19
  B %bb.11, debug-location !1704; ../mulvdi3.c:43:19

bb.11.lor.lhs.false18:
; predecessors: %bb.10
  successors: %bb.12, %bb.13

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1705 :: (load (s32) from %stack.4); ../mulvdi3.c:43:28
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1705 :: (load (s32) from %stack.5); ../mulvdi3.c:43:28
  dead renamable $r1 = RSBri renamable $r1, 1, 14, $noreg, def $cpsr, debug-location !1705; ../mulvdi3.c:43:28
  dead renamable $r0 = RSCri renamable $r0, 0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1705; ../mulvdi3.c:43:28
  Bcc %bb.13, 11, killed $cpsr, debug-location !1706; ../mulvdi3.c:43:9
  B %bb.12, debug-location !1706; ../mulvdi3.c:43:9

bb.12.if.then20:
; predecessors: %bb.10, %bb.11
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1707; ../mulvdi3.c:44:9

bb.13.if.end22:
; predecessors: %bb.11
  successors: %bb.14, %bb.17

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1708 :: (load (s32) from %stack.10); ../mulvdi3.c:45:12
  $r2 = LDRi12 $sp, 20, 14, $noreg, debug-location !1708 :: (load (s32) from %stack.6); ../mulvdi3.c:45:12
  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1708 :: (load (s32) from %stack.11); ../mulvdi3.c:45:12
  $r3 = LDRi12 $sp, 16, 14, $noreg, debug-location !1708 :: (load (s32) from %stack.7); ../mulvdi3.c:45:12
  renamable $r0 = EORrr renamable $r0, renamable $r3, 14, $noreg, $noreg, debug-location !1708; ../mulvdi3.c:45:12
  renamable $r1 = EORrr renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1708; ../mulvdi3.c:45:12
  renamable $r0 = ORRrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1708; ../mulvdi3.c:45:12
  CMPri killed renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1709; ../mulvdi3.c:45:9
  Bcc %bb.17, 1, killed $cpsr, debug-location !1709; ../mulvdi3.c:45:9
  B %bb.14, debug-location !1709; ../mulvdi3.c:45:9

bb.14.if.then24:
; predecessors: %bb.13
  successors: %bb.15, %bb.16

  $r3 = LDRi12 $sp, 28, 14, $noreg, debug-location !1710 :: (load (s32) from %stack.4); ../mulvdi3.c:47:25
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1710 :: (load (s32) from %stack.5); ../mulvdi3.c:47:25
  renamable $r0 = MVNi 0, 14, $noreg, $noreg
  renamable $r1 = MVNi -2147483648, 14, $noreg, $noreg
  BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1710; ../mulvdi3.c:47:25
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1710 :: (load (s32) from %stack.9); ../mulvdi3.c:47:25
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1710; ../mulvdi3.c:47:25
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1710 :: (load (s32) from %stack.8); ../mulvdi3.c:47:25
  dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1711; ../mulvdi3.c:47:19
  dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1711; ../mulvdi3.c:47:19
  Bcc %bb.16, 10, killed $cpsr, debug-location !1712; ../mulvdi3.c:47:13
  B %bb.15, debug-location !1712; ../mulvdi3.c:47:13

bb.15.if.then26:
; predecessors: %bb.14

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1713 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1713 :: (load (s32) from constant-pool); ../mulvdi3.c:48:13
  renamable $r1 = MOVi 48, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1713; ../mulvdi3.c:48:13

bb.16.if.end27:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !1714; ../mulvdi3.c:49:5

bb.17.if.else:
; predecessors: %bb.13
  successors: %bb.18, %bb.19

  $r0 = LDRi12 $sp, 28, 14, $noreg, debug-location !1715 :: (load (s32) from %stack.4); ../mulvdi3.c:52:27
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1715 :: (load (s32) from %stack.5); ../mulvdi3.c:52:27
  renamable $r2 = RSBri renamable $r1, 0, 14, $noreg, def $cpsr, debug-location !1715; ../mulvdi3.c:52:27
  renamable $r3 = RSCri renamable $r0, 0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1715; ../mulvdi3.c:52:27
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  renamable $r1 = MOVi -2147483648, 14, $noreg, $noreg
  BL &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1716; ../mulvdi3.c:52:25
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1716 :: (load (s32) from %stack.9); ../mulvdi3.c:52:25
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1716; ../mulvdi3.c:52:25
  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1716 :: (load (s32) from %stack.8); ../mulvdi3.c:52:25
  dead renamable $r2 = SUBrr killed renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1717; ../mulvdi3.c:52:19
  dead renamable $r0 = SBCrr killed renamable $r1, renamable $r0, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1717; ../mulvdi3.c:52:19
  Bcc %bb.19, 10, killed $cpsr, debug-location !1718; ../mulvdi3.c:52:13
  B %bb.18, debug-location !1718; ../mulvdi3.c:52:13

bb.18.if.then31:
; predecessors: %bb.17

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1719 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1719 :: (load (s32) from constant-pool); ../mulvdi3.c:53:13
  renamable $r1 = MOVi 53, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1719; ../mulvdi3.c:53:13

bb.19.if.end32:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20

bb.20.if.end33:
; predecessors: %bb.19, %bb.16
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1720; ../mulvdi3.c:55:5

bb.21.return:
; predecessors: %bb.20, %bb.12, %bb.8, %bb.3

  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1721 :: (load (s32) from %stack.1); ../mulvdi3.c:0
  $r3 = LDRi12 $r11, -20, 14, $noreg, debug-location !1721 :: (load (s32) from %stack.2); ../mulvdi3.c:0
  $r1 = LDRi12 $r11, -12, 14, $noreg, debug-location !1721 :: (load (s32) from %stack.0); ../mulvdi3.c:0
  $lr = LDRi12 $r11, -24, 14, $noreg, debug-location !1721 :: (load (s32) from %stack.3); ../mulvdi3.c:0
  early-clobber renamable $r0, early-clobber renamable $r4 = UMULLv5 renamable $r1, renamable $r3, 14, $noreg, $noreg, debug-location !1721; ../mulvdi3.c:0
  early-clobber renamable $r12 = MLAv5 killed renamable $r1, killed renamable $lr, killed renamable $r4, 14, $noreg, $noreg, debug-location !1721; ../mulvdi3.c:0
  early-clobber renamable $r1 = MLAv5 killed renamable $r2, killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1721; ../mulvdi3.c:0
  $sp = frame-destroy SUBri killed $r11, 8, 14, $noreg, $noreg, debug-location !1722; ../mulvdi3.c:56:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r4, def $r10, def $r11, def $lr, debug-location !1722; ../mulvdi3.c:56:1
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1722; ../mulvdi3.c:56:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __mulvdi3.

# Machine code for function __mulvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-4]
  fi#7: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.9, align=4
  cp#1: @__func__.__mulvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.5
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  STRi12 killed $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1725; ../mulvsi3.c:27:9
  Bcc %bb.5, 1, killed $cpsr, debug-location !1725; ../mulvsi3.c:27:9
  B %bb.1, debug-location !1725; ../mulvsi3.c:27:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3, %bb.2

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1727 :: (load (s32) from %stack.1); ../mulvsi3.c:29:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1727; ../mulvsi3.c:29:20
  Bcc %bb.3, 0, killed $cpsr, debug-location !1727; ../mulvsi3.c:29:20
  B %bb.2, debug-location !1727; ../mulvsi3.c:29:20

bb.2.lor.lhs.false:
; predecessors: %bb.1
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1729 :: (load (s32) from %stack.1); ../mulvsi3.c:29:13
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1729; ../mulvsi3.c:29:13
  Bcc %bb.4, 1, killed $cpsr, debug-location !1729; ../mulvsi3.c:29:13
  B %bb.3, debug-location !1729; ../mulvsi3.c:29:13

bb.3.if.then3:
; predecessors: %bb.1, %bb.2
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1730; ../mulvsi3.c:30:13

bb.4.if.end:
; predecessors: %bb.2

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1731 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1731 :: (load (s32) from constant-pool); ../mulvsi3.c:31:9
  renamable $r1 = MOVi 31, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1731; ../mulvsi3.c:31:9

bb.5.if.end4:
; predecessors: %bb.0
  successors: %bb.6, %bb.10

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1733 :: (load (s32) from %stack.1); ../mulvsi3.c:33:9
  CMPri renamable $r0, -2147483648, 14, $noreg, implicit-def $cpsr, debug-location !1733; ../mulvsi3.c:33:9
  Bcc %bb.10, 1, killed $cpsr, debug-location !1733; ../mulvsi3.c:33:9
  B %bb.6, debug-location !1733; ../mulvsi3.c:33:9

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8, %bb.7

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1735 :: (load (s32) from %stack.0); ../mulvsi3.c:35:20
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1735; ../mulvsi3.c:35:20
  Bcc %bb.8, 0, killed $cpsr, debug-location !1735; ../mulvsi3.c:35:20
  B %bb.7, debug-location !1735; ../mulvsi3.c:35:20

bb.7.lor.lhs.false8:
; predecessors: %bb.6
  successors: %bb.8, %bb.9

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1737 :: (load (s32) from %stack.0); ../mulvsi3.c:35:13
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1737; ../mulvsi3.c:35:13
  Bcc %bb.9, 1, killed $cpsr, debug-location !1737; ../mulvsi3.c:35:13
  B %bb.8, debug-location !1737; ../mulvsi3.c:35:13

bb.8.if.then10:
; predecessors: %bb.6, %bb.7
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1738; ../mulvsi3.c:36:13

bb.9.if.end12:
; predecessors: %bb.7

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1739 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1739 :: (load (s32) from constant-pool); ../mulvsi3.c:37:9
  renamable $r1 = MOVi 37, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1739; ../mulvsi3.c:37:9

bb.10.if.end13:
; predecessors: %bb.5
  successors: %bb.12, %bb.11

  $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1740 :: (load (s32) from %stack.1); ../mulvsi3.c:39:19
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1740 :: (load (s32) from %stack.0); ../mulvsi3.c:39:19
  renamable $r0 = MOVsi renamable $r1, 249, 14, $noreg, $noreg, debug-location !1740; ../mulvsi3.c:39:19
  STRi12 killed $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.5)
  renamable $r0 = EORrsi renamable $r1, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1741; ../mulvsi3.c:40:23
  renamable $r0 = nsw SUBrsi killed renamable $r0, renamable $r1, 249, 14, $noreg, $noreg, debug-location !1742; ../mulvsi3.c:40:29
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.4)
  renamable $r1 = MOVsi renamable $r2, 249, 14, $noreg, $noreg, debug-location !1743; ../mulvsi3.c:41:19
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.3)
  renamable $r1 = EORrsi renamable $r2, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1744; ../mulvsi3.c:42:23
  renamable $r1 = nsw SUBrsi killed renamable $r1, renamable $r2, 249, 14, $noreg, $noreg, debug-location !1745; ../mulvsi3.c:42:29
  STRi12 killed $r1, $sp, 12, 14, $noreg :: (store (s32) into %stack.2)
  CMPri renamable $r0, 2, 14, $noreg, implicit-def $cpsr, debug-location !1747; ../mulvsi3.c:43:19
  Bcc %bb.12, 11, killed $cpsr, debug-location !1747; ../mulvsi3.c:43:19
  B %bb.11, debug-location !1747; ../mulvsi3.c:43:19

bb.11.lor.lhs.false18:
; predecessors: %bb.10
  successors: %bb.12, %bb.13

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1749 :: (load (s32) from %stack.2); ../mulvsi3.c:43:9
  CMPri renamable $r0, 1, 14, $noreg, implicit-def $cpsr, debug-location !1749; ../mulvsi3.c:43:9
  Bcc %bb.13, 12, killed $cpsr, debug-location !1749; ../mulvsi3.c:43:9
  B %bb.12, debug-location !1749; ../mulvsi3.c:43:9

bb.12.if.then20:
; predecessors: %bb.10, %bb.11
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1750; ../mulvsi3.c:44:9

bb.13.if.end22:
; predecessors: %bb.11
  successors: %bb.14, %bb.17

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1752 :: (load (s32) from %stack.5); ../mulvsi3.c:45:9
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1752 :: (load (s32) from %stack.3); ../mulvsi3.c:45:9
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1752; ../mulvsi3.c:45:9
  Bcc %bb.17, 1, killed $cpsr, debug-location !1752; ../mulvsi3.c:45:9
  B %bb.14, debug-location !1752; ../mulvsi3.c:45:9

bb.14.if.then24:
; predecessors: %bb.13
  successors: %bb.15, %bb.16

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1753 :: (load (s32) from %stack.2); ../mulvsi3.c:47:25
  renamable $r0 = MVNi -2147483648, 14, $noreg, $noreg
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1753; ../mulvsi3.c:47:25
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1753; ../mulvsi3.c:47:25
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1755 :: (load (s32) from %stack.4); ../mulvsi3.c:47:13
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1755; ../mulvsi3.c:47:13
  Bcc %bb.16, 13, killed $cpsr, debug-location !1755; ../mulvsi3.c:47:13
  B %bb.15, debug-location !1755; ../mulvsi3.c:47:13

bb.15.if.then26:
; predecessors: %bb.14

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1756 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1756 :: (load (s32) from constant-pool); ../mulvsi3.c:48:13
  renamable $r1 = MOVi 48, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1756; ../mulvsi3.c:48:13

bb.16.if.end27:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20, debug-location !1757; ../mulvsi3.c:49:5

bb.17.if.else:
; predecessors: %bb.13
  successors: %bb.18, %bb.19

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1758 :: (load (s32) from %stack.2); ../mulvsi3.c:52:27
  renamable $r1 = nsw RSBri renamable $r0, 0, 14, $noreg, $noreg, debug-location !1758; ../mulvsi3.c:52:27
  renamable $r0 = MOVi -2147483648, 14, $noreg, $noreg
  BL &__divsi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1759; ../mulvsi3.c:52:25
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1759; ../mulvsi3.c:52:25
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1761 :: (load (s32) from %stack.4); ../mulvsi3.c:52:13
  CMPrr renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1761; ../mulvsi3.c:52:13
  Bcc %bb.19, 13, killed $cpsr, debug-location !1761; ../mulvsi3.c:52:13
  B %bb.18, debug-location !1761; ../mulvsi3.c:52:13

bb.18.if.then31:
; predecessors: %bb.17

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1762 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1762 :: (load (s32) from constant-pool); ../mulvsi3.c:53:13
  renamable $r1 = MOVi 53, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1762; ../mulvsi3.c:53:13

bb.19.if.end32:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  B %bb.20

bb.20.if.end33:
; predecessors: %bb.19, %bb.16
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  B %bb.21, debug-location !1763; ../mulvsi3.c:55:5

bb.21.return:
; predecessors: %bb.20, %bb.12, %bb.8, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1764 :: (load (s32) from %stack.0); ../mulvsi3.c:0
  $r2 = LDRi12 $r11, -8, 14, $noreg, debug-location !1764 :: (load (s32) from %stack.1); ../mulvsi3.c:0
  early-clobber renamable $r0 = nsw MULv5 killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1764; ../mulvsi3.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1765; ../mulvsi3.c:56:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1765; ../mulvsi3.c:56:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1765; ../mulvsi3.c:56:1

bb.22 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __mulvsi3.

# Machine code for function __paritydi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  dead renamable $r2 = KILL renamable $r1
  dead renamable $r2 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 4, 14, $noreg, debug-location !1768 :: (store (s32) into %ir.all + 4, basealign 8); ../paritydi2.c:23:11
  STRi12 killed renamable $r0, $sp, 0, 14, $noreg, debug-location !1768 :: (store (s32) into %ir.all, align 8); ../paritydi2.c:23:11
  renamable $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1771 :: (dereferenceable load (s32) from %ir.low, align 8); ../paritydi2.c:24:39
  renamable $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1770 :: (dereferenceable load (s32) from %ir.high); ../paritydi2.c:24:28
  renamable $r0 = EORrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1772; ../paritydi2.c:24:33
  BL_pred @__paritysi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1773; ../paritydi2.c:24:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1774; ../paritydi2.c:24:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1774; ../paritydi2.c:24:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1774; ../paritydi2.c:24:5

# End machine code for function __paritydi2.

# Machine code for function __paritysi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1777; ../paritysi2.c:23:7
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1779; ../paritysi2.c:24:7
  renamable $r0 = EORrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1781; ../paritysi2.c:25:7
  renamable $r2 = ANDri killed renamable $r0, 15, 14, $noreg, $noreg, debug-location !1782; ../paritysi2.c:26:26
  $r1 = MOVi 150, 14, $noreg, $noreg
  $r1 = ORRri $r1, 26880, 14, $noreg, $noreg
  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  renamable $r0 = ANDrsr killed renamable $r0, killed renamable $r1, killed renamable $r2, 3, 14, $noreg, $noreg, debug-location !1784; ../paritysi2.c:26:34
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1785; ../paritysi2.c:26:5

# End machine code for function __paritysi2.

# Machine code for function __popcountdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1
  $r2 = MOVr killed $r0, 14, $noreg, $noreg
  dead renamable $r0 = KILL renamable $r1
  dead renamable $r0 = KILL renamable $r2
  $r0 = MOVsi renamable $r1, 11, 14, $noreg, def $cpsr, debug-location !1787; ../popcountdi2.c:23:20
  $r3 = MOVsi renamable $r2, 5, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1787; ../popcountdi2.c:23:20
  renamable $r12 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, renamable $r12, 14, $noreg, $noreg, debug-location !1788; ../popcountdi2.c:23:26
  renamable $r3 = ANDrr killed renamable $r3, killed renamable $r12, 14, $noreg, $noreg, debug-location !1788; ../popcountdi2.c:23:26
  renamable $r2 = SUBrr killed renamable $r2, killed renamable $r3, 14, $noreg, def $cpsr, debug-location !1789; ../popcountdi2.c:23:13
  renamable $r3 = SBCrr killed renamable $r1, killed renamable $r0, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1789; ../popcountdi2.c:23:13
  renamable $r12 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi renamable $r12, renamable $r3, 19, 14, $noreg, $noreg, debug-location !1791; ../popcountdi2.c:25:21
  renamable $r0 = ANDrsi renamable $r12, renamable $r2, 19, 14, $noreg, $noreg, debug-location !1791; ../popcountdi2.c:25:21
  renamable $r3 = ANDrr killed renamable $r3, renamable $r12, 14, $noreg, $noreg, debug-location !1792; ../popcountdi2.c:25:52
  renamable $r2 = ANDrr killed renamable $r2, killed renamable $r12, 14, $noreg, $noreg, debug-location !1792; ../popcountdi2.c:25:52
  renamable $r1 = ADDrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1793; ../popcountdi2.c:25:46
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1793; ../popcountdi2.c:25:46
  renamable $r1 = ADDrsi killed renamable $r1, renamable $r1, 35, 14, $noreg, $noreg, debug-location !1795; ../popcountdi2.c:27:14
  renamable $r0 = ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1795; ../popcountdi2.c:27:14
  renamable $r2 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrr killed renamable $r1, renamable $r2, 14, $noreg, $noreg, debug-location !1796; ../popcountdi2.c:27:27
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r2, 14, $noreg, $noreg, debug-location !1796; ../popcountdi2.c:27:27
  renamable $r0 = ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1798; ../popcountdi2.c:29:28
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1801; ../popcountdi2.c:32:11
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1803; ../popcountdi2.c:35:15
  renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1804; ../popcountdi2.c:35:27
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1805; ../popcountdi2.c:35:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function __popcountdi2.

# Machine code for function __popcountsi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Constant Pool:
  cp#0: 1431655765, align=4
  cp#1: 858993459, align=4
  cp#2: 252645135, align=4
Function Live Ins: $r0

bb.0.entry:
  liveins: $r0
  renamable $r1 = LDRcp %const.0, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r1 = ANDrsi killed renamable $r1, renamable $r0, 11, 14, $noreg, $noreg, debug-location !1808; ../popcountsi2.c:23:23
  renamable $r1 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1809; ../popcountsi2.c:23:11
  renamable $r2 = LDRcp %const.1, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrsi renamable $r2, renamable $r1, 19, 14, $noreg, $noreg, debug-location !1811; ../popcountsi2.c:25:19
  renamable $r1 = ANDrr killed renamable $r1, killed renamable $r2, 14, $noreg, $noreg, debug-location !1812; ../popcountsi2.c:25:38
  renamable $r0 = nuw nsw ADDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1813; ../popcountsi2.c:25:33
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 35, 14, $noreg, $noreg, debug-location !1815; ../popcountsi2.c:27:12
  renamable $r1 = LDRcp %const.2, 0, 14, $noreg :: (load (s32) from constant-pool)
  renamable $r0 = ANDrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1816; ../popcountsi2.c:27:24
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 131, 14, $noreg, $noreg, debug-location !1818; ../popcountsi2.c:29:12
  renamable $r0 = nuw nsw ADDrsi killed renamable $r0, renamable $r0, 67, 14, $noreg, $noreg, debug-location !1820; ../popcountsi2.c:32:15
  renamable $r0 = ANDri killed renamable $r0, 255, 14, $noreg, $noreg, debug-location !1821; ../popcountsi2.c:32:27
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1822; ../popcountsi2.c:32:5

bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4

# End machine code for function __popcountsi2.

# Machine code for function __subvdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-4]
  fi#5: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.12, align=4
  cp#1: @__func__.__subvdi3, align=4
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  $r12 = MOVr $r1, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 0, 14, $noreg :: (store (s32) into %stack.3)
  $r12 = MOVr $r0, 14, $noreg, $noreg
  STRi12 killed $r12, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r2, 14, $noreg, def $cpsr, debug-location !1824; ../subvdi3.c:24:27
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = SBCrr killed renamable $r1, renamable $r3, 14, $noreg, $noreg, implicit killed $cpsr, debug-location !1824; ../subvdi3.c:24:27
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r3, 0, 14, $noreg, implicit-def $cpsr, debug-location !1826; ../subvdi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !1826; ../subvdi3.c:25:9
  B %bb.1, debug-location !1826; ../subvdi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1827 :: (load (s32) from %stack.3); ../subvdi3.c:27:15
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1827 :: (load (s32) from %stack.0); ../subvdi3.c:27:15
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1827 :: (load (s32) from %stack.2); ../subvdi3.c:27:15
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1827 :: (load (s32) from %stack.1); ../subvdi3.c:27:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1827; ../subvdi3.c:27:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1827; ../subvdi3.c:27:15
  Bcc %bb.3, 10, killed $cpsr, debug-location !1828; ../subvdi3.c:27:13
  B %bb.2, debug-location !1828; ../subvdi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1829 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1829 :: (load (s32) from constant-pool); ../subvdi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1829; ../subvdi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1830; ../subvdi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1831 :: (load (s32) from %stack.3); ../subvdi3.c:32:15
  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1831 :: (load (s32) from %stack.0); ../subvdi3.c:32:15
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1831 :: (load (s32) from %stack.2); ../subvdi3.c:32:15
  $r3 = LDRi12 $sp, 8, 14, $noreg, debug-location !1831 :: (load (s32) from %stack.1); ../subvdi3.c:32:15
  dead renamable $r2 = SUBrr renamable $r2, renamable $r3, 14, $noreg, def $cpsr, debug-location !1831; ../subvdi3.c:32:15
  dead renamable $r0 = SBCrr renamable $r0, renamable $r1, 14, $noreg, def $cpsr, implicit killed $cpsr, debug-location !1831; ../subvdi3.c:32:15
  Bcc %bb.6, 11, killed $cpsr, debug-location !1832; ../subvdi3.c:32:13
  B %bb.5, debug-location !1832; ../subvdi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1833 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1833 :: (load (s32) from constant-pool); ../subvdi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1833; ../subvdi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r1 = LDRi12 $r11, -4, 14, $noreg, debug-location !1834 :: (load (s32) from %stack.0); ../subvdi3.c:35:5
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1834 :: (load (s32) from %stack.1); ../subvdi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1834; ../subvdi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1834; ../subvdi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1834; ../subvdi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __subvdi3.

# Machine code for function __subvsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Constant Pool:
  cp#0: @.str.13, align=4
  cp#1: @__func__.__subvsi3, align=4
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.4
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = SUBrr renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1836; ../subvsi3.c:24:27
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri killed renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1838; ../subvsi3.c:25:9
  Bcc %bb.4, 4, killed $cpsr, debug-location !1838; ../subvsi3.c:25:9
  B %bb.1, debug-location !1838; ../subvsi3.c:25:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1840 :: (load (s32) from %stack.0); ../subvsi3.c:27:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1840 :: (load (s32) from %stack.1); ../subvsi3.c:27:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1840; ../subvsi3.c:27:13
  Bcc %bb.3, 13, killed $cpsr, debug-location !1840; ../subvsi3.c:27:13
  B %bb.2, debug-location !1840; ../subvsi3.c:27:13

bb.2.if.then2:
; predecessors: %bb.1

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1841 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1841 :: (load (s32) from constant-pool); ../subvsi3.c:28:13
  renamable $r1 = MOVi 28, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1841; ../subvsi3.c:28:13

bb.3.if.end:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7, debug-location !1842; ../subvsi3.c:29:5

bb.4.if.else:
; predecessors: %bb.0
  successors: %bb.6, %bb.5

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1844 :: (load (s32) from %stack.0); ../subvsi3.c:32:13
  $r1 = LDRi12 $sp, 0, 14, $noreg, debug-location !1844 :: (load (s32) from %stack.1); ../subvsi3.c:32:13
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1844; ../subvsi3.c:32:13
  Bcc %bb.6, 12, killed $cpsr, debug-location !1844; ../subvsi3.c:32:13
  B %bb.5, debug-location !1844; ../subvsi3.c:32:13

bb.5.if.then4:
; predecessors: %bb.4

  renamable $r0 = LDRi12 %const.0, 0, 14, $noreg, debug-location !1845 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
  renamable $r2 = LDRi12 %const.1, 0, 14, $noreg, debug-location !1845 :: (load (s32) from constant-pool); ../subvsi3.c:33:13
  renamable $r1 = MOVi 33, 14, $noreg, $noreg
  BL @compilerrt_abort_impl, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, debug-location !1845; ../subvsi3.c:33:13

bb.6.if.end5:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  B %bb.7

bb.7.if.end6:
; predecessors: %bb.6, %bb.3

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1846 :: (load (s32) from %stack.0); ../subvsi3.c:35:5
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1846; ../subvsi3.c:35:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1846; ../subvsi3.c:35:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1846; ../subvsi3.c:35:5

bb.8 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4

# End machine code for function __subvsi3.

# Machine code for function __ucmpdi2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-8]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $r2, $r3
  $sp = frame-setup SUBri killed $sp, 24, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  STRi12 killed renamable $r1, $sp, 20, 14, $noreg, debug-location !1849 :: (store (s32) into %ir.all + 4, basealign 8); ../ucmpdi2.c:26:11
  STRi12 killed renamable $r0, $sp, 16, 14, $noreg, debug-location !1849 :: (store (s32) into %ir.all, align 8); ../ucmpdi2.c:26:11
  STRi12 killed renamable $r3, $sp, 12, 14, $noreg, debug-location !1851 :: (store (s32) into %ir.all1 + 4, basealign 8); ../ucmpdi2.c:28:11
  STRi12 killed renamable $r2, $sp, 8, 14, $noreg, debug-location !1851 :: (store (s32) into %ir.all1, align 8); ../ucmpdi2.c:28:11
  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1853 :: (dereferenceable load (s32) from %ir.high); ../ucmpdi2.c:29:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1855 :: (dereferenceable load (s32) from %ir.high3); ../ucmpdi2.c:29:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1857; ../ucmpdi2.c:29:9
  Bcc %bb.2, 2, killed $cpsr, debug-location !1857; ../ucmpdi2.c:29:9
  B %bb.1, debug-location !1857; ../ucmpdi2.c:29:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1858; ../ucmpdi2.c:30:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  renamable $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1860 :: (dereferenceable load (s32) from %ir.high5); ../ucmpdi2.c:31:13
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1862 :: (dereferenceable load (s32) from %ir.high7); ../ucmpdi2.c:31:24
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1864; ../ucmpdi2.c:31:9
  Bcc %bb.4, 9, killed $cpsr, debug-location !1864; ../ucmpdi2.c:31:9
  B %bb.3, debug-location !1864; ../ucmpdi2.c:31:9

bb.3.if.then9:
; predecessors: %bb.2
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1865; ../ucmpdi2.c:32:9

bb.4.if.end10:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1866 :: (dereferenceable load (s32) from %ir.low, align 8); ../ucmpdi2.c:33:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1867 :: (dereferenceable load (s32) from %ir.low13, align 8); ../ucmpdi2.c:33:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1869; ../ucmpdi2.c:33:9
  Bcc %bb.6, 2, killed $cpsr, debug-location !1869; ../ucmpdi2.c:33:9
  B %bb.5, debug-location !1869; ../ucmpdi2.c:33:9

bb.5.if.then15:
; predecessors: %bb.4
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1870; ../ucmpdi2.c:34:9

bb.6.if.end16:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  renamable $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1871 :: (dereferenceable load (s32) from %ir.low18, align 8); ../ucmpdi2.c:35:13
  renamable $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1872 :: (dereferenceable load (s32) from %ir.low20, align 8); ../ucmpdi2.c:35:23
  CMPrr killed renamable $r0, killed renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1874; ../ucmpdi2.c:35:9
  Bcc %bb.8, 9, killed $cpsr, debug-location !1874; ../ucmpdi2.c:35:9
  B %bb.7, debug-location !1874; ../ucmpdi2.c:35:9

bb.7.if.then22:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 2, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1875; ../ucmpdi2.c:36:9

bb.8.if.end23:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  renamable $r0 = MOVi 1, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.9, debug-location !1876; ../ucmpdi2.c:37:5

bb.9.return:
; predecessors: %bb.8, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1877 :: (load (s32) from %stack.2); ../ucmpdi2.c:0
  $sp = frame-destroy ADDri killed $sp, 24, 14, $noreg, $noreg, debug-location !1878; ../ucmpdi2.c:38:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1878; ../ucmpdi2.c:38:1

# End machine code for function __ucmpdi2.

# Machine code for function __aeabi_ulcmp: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  BL_pred @__ucmpdi2, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, debug-location !1880; ../ucmpdi2.c:48:9
  renamable $r0 = nsw SUBri killed renamable $r0, 1, 14, $noreg, $noreg, debug-location !1881; ../ucmpdi2.c:48:25
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1882; ../ucmpdi2.c:48:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1882; ../ucmpdi2.c:48:2

# End machine code for function __aeabi_ulcmp.

# Machine code for function __udivdi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1884; ../udivdi3.c:22:12
  renamable $r12 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1884 :: (store (s32) into stack); ../udivdi3.c:22:12
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1884; ../udivdi3.c:22:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1885; ../udivdi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1885; ../udivdi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1885; ../udivdi3.c:22:5

# End machine code for function __udivdi3.

# Machine code for function __udivmodsi4: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-4]
  fi#4: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  liveins: $r0, $r1, $r2, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  STRi12 $r2, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  STRi12 $r1, $sp, 4, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.1)
  BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1887; ../udivmodsi4.c:22:14
  $r12 = LDRi12 $sp, 4, 14, $noreg, debug-location !1887 :: (load (s32) from %stack.2); ../udivmodsi4.c:22:14
  $r1 = LDRi12 $sp, 8, 14, $noreg, debug-location !1887 :: (load (s32) from %stack.1); ../udivmodsi4.c:22:14
  $r2 = LDRi12 $r11, -4, 14, $noreg, debug-location !1887 :: (load (s32) from %stack.0); ../udivmodsi4.c:22:14
  early-clobber renamable $r3 = MULv5 renamable $r0, killed renamable $r12, 14, $noreg, $noreg, debug-location !1888; ../udivmodsi4.c:23:16
  renamable $r1 = SUBrr killed renamable $r1, killed renamable $r3, 14, $noreg, $noreg, debug-location !1889; ../udivmodsi4.c:23:12
  STRi12 killed renamable $r1, killed renamable $r2, 0, 14, $noreg, debug-location !1890 :: (store (s32) into %ir.rem); ../udivmodsi4.c:23:8
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1891; ../udivmodsi4.c:24:3
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1891; ../udivmodsi4.c:24:3
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1891; ../udivmodsi4.c:24:3

# End machine code for function __udivmodsi4.

# Machine code for function __udivsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-32]
  fi#6: size=4, align=4, at location [SP-36]
  fi#7: size=4, align=4, at location [SP-40]
  fi#8: size=4, align=4, at location [SP-44]
  fi#9: size=4, align=4, at location [SP-48]
  fi#10: size=4, align=4, at location [SP-52]
  fi#11: size=4, align=4, at location [SP-56]
  fi#12: size=4, align=4, at location [SP-60]
  fi#13: size=4, align=4, at location [SP-64]
  fi#14: size=4, align=4, at location [SP-68]
  fi#15: size=4, align=4, at location [SP-4]
  fi#16: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  successors: %bb.1, %bb.2
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 64, 14, $noreg, $noreg
  STRi12 $r1, $r11, -8, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 killed $r0, $r11, -4, 14, $noreg :: (store (s32) into %stack.0)
  CMPri renamable $r1, 0, 14, $noreg, implicit-def $cpsr, debug-location !1894; ../udivsi3.c:32:9
  Bcc %bb.2, 1, killed $cpsr, debug-location !1894; ../udivsi3.c:32:9
  B %bb.1, debug-location !1894; ../udivsi3.c:32:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1895; ../udivsi3.c:33:9

bb.2.if.end:
; predecessors: %bb.0
  successors: %bb.3, %bb.4

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1897 :: (load (s32) from %stack.0); ../udivsi3.c:34:9
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1897; ../udivsi3.c:34:9
  Bcc %bb.4, 1, killed $cpsr, debug-location !1897; ../udivsi3.c:34:9
  B %bb.3, debug-location !1897; ../udivsi3.c:34:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1898; ../udivsi3.c:35:9

bb.4.if.end3:
; predecessors: %bb.2
  successors: %bb.5, %bb.6

  $r0 = LDRi12 $r11, -8, 14, $noreg, debug-location !1899 :: (load (s32) from %stack.1); ../udivsi3.c:36:10
  BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1899; ../udivsi3.c:36:10
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1899; ../udivsi3.c:36:10
  $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 $r1, $r11, -20, 14, $noreg :: (store (s32) into %stack.4)
  BL &__clzsi2, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0, debug-location !1900; ../udivsi3.c:36:29
  $r1 = MOVr $r0, 14, $noreg, $noreg, debug-location !1900; ../udivsi3.c:36:29
  $r0 = LDRi12 $r11, -20, 14, $noreg, debug-location !1901 :: (load (s32) from %stack.4); ../udivsi3.c:36:27
  renamable $r0 = nsw SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1901; ../udivsi3.c:36:27
  STRi12 $r0, $r11, -16, 14, $noreg :: (store (s32) into %stack.3)
  CMPri renamable $r0, 32, 14, $noreg, implicit-def $cpsr, debug-location !1903; ../udivsi3.c:38:9
  Bcc %bb.6, 3, killed $cpsr, debug-location !1903; ../udivsi3.c:38:9
  B %bb.5, debug-location !1903; ../udivsi3.c:38:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1904; ../udivsi3.c:39:9

bb.6.if.end6:
; predecessors: %bb.4
  successors: %bb.7, %bb.8

  $r0 = LDRi12 $r11, -16, 14, $noreg, debug-location !1906 :: (load (s32) from %stack.3); ../udivsi3.c:40:9
  CMPri renamable $r0, 31, 14, $noreg, implicit-def $cpsr, debug-location !1906; ../udivsi3.c:40:9
  Bcc %bb.8, 1, killed $cpsr, debug-location !1906; ../udivsi3.c:40:9
  B %bb.7, debug-location !1906; ../udivsi3.c:40:9

bb.7.if.then8:
; predecessors: %bb.6
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r0 = LDRi12 $r11, -4, 14, $noreg :: (load (s32) from %stack.0)
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1907; ../udivsi3.c:41:9

bb.8.if.end9:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r0 = LDRi12 $r11, -4, 14, $noreg, debug-location !1908 :: (load (s32) from %stack.0); ../udivsi3.c:42:5
  $r2 = LDRi12 $r11, -16, 14, $noreg, debug-location !1908 :: (load (s32) from %stack.3); ../udivsi3.c:42:5
  renamable $r1 = nsw ADDri renamable $r2, 1, 14, $noreg, $noreg, debug-location !1908; ../udivsi3.c:42:5
  renamable $r2 = nsw RSBri renamable $r2, 31, 14, $noreg, $noreg, debug-location !1909; ../udivsi3.c:45:28
  renamable $r3 = MOVsr renamable $r0, killed renamable $r2, 2, 14, $noreg, $noreg, debug-location !1910; ../udivsi3.c:45:11
  renamable $r2 = MOVsr renamable $r0, renamable $r1, 3, 14, $noreg, $noreg, debug-location !1911; ../udivsi3.c:46:11
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !1912; ../udivsi3.c:48:5

bb.9.for.cond:
; predecessors: %bb.8, %bb.11
  successors: %bb.12, %bb.10

  $r1 = LDRi12 $sp, 28, 14, $noreg, debug-location !1913 :: (load (s32) from %stack.8); ../udivsi3.c:0
  $r2 = LDRi12 $sp, 32, 14, $noreg, debug-location !1913 :: (load (s32) from %stack.7); ../udivsi3.c:0
  $r0 = LDRi12 $r11, -28, 14, $noreg, debug-location !1913 :: (load (s32) from %stack.6); ../udivsi3.c:0
  $r3 = LDRi12 $r11, -24, 14, $noreg, debug-location !1913 :: (load (s32) from %stack.5); ../udivsi3.c:0
  STRi12 killed $r3, $sp, 12, 14, $noreg :: (store (s32) into %stack.12)
  STRi12 $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.11)
  STRi12 killed $r2, $sp, 20, 14, $noreg :: (store (s32) into %stack.10)
  STRi12 killed $r1, $sp, 24, 14, $noreg :: (store (s32) into %stack.9)
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1912; ../udivsi3.c:48:5
  Bcc %bb.12, 0, killed $cpsr, debug-location !1912; ../udivsi3.c:48:5
  B %bb.10, debug-location !1912; ../udivsi3.c:48:5

bb.10.for.body:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  $r1 = LDRi12 $r11, -8, 14, $noreg, debug-location !1915 :: (load (s32) from %stack.1); ../udivsi3.c:51:22
  $r2 = LDRi12 $sp, 24, 14, $noreg, debug-location !1915 :: (load (s32) from %stack.9); ../udivsi3.c:51:22
  $r0 = LDRi12 $sp, 20, 14, $noreg, debug-location !1915 :: (load (s32) from %stack.10); ../udivsi3.c:51:22
  renamable $r0 = MOVsi renamable $r0, 10, 14, $noreg, $noreg, debug-location !1915; ../udivsi3.c:51:22
  renamable $r0 = ORRrsi killed renamable $r0, renamable $r2, 251, 14, $noreg, $noreg, debug-location !1915; ../udivsi3.c:51:22
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.14)
  renamable $r0 = MVNr renamable $r0, 14, $noreg, $noreg, debug-location !1916; ../udivsi3.c:60:41
  renamable $r0 = ADDrr killed renamable $r0, renamable $r1, 14, $noreg, $noreg, debug-location !1916; ../udivsi3.c:60:41
  STRi12 killed $r0, $sp, 8, 14, $noreg :: (store (s32) into %stack.13)
  B %bb.11, debug-location !1917; ../udivsi3.c:63:5

bb.11.for.inc:
; predecessors: %bb.10
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $r1 = LDRi12 $sp, 16, 14, $noreg, debug-location !1919 :: (load (s32) from %stack.11); ../udivsi3.c:62:11
  $r3 = LDRi12 $sp, 12, 14, $noreg, debug-location !1919 :: (load (s32) from %stack.12); ../udivsi3.c:62:11
  $r12 = LDRi12 $sp, 24, 14, $noreg, debug-location !1919 :: (load (s32) from %stack.9); ../udivsi3.c:62:11
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1919 :: (load (s32) from %stack.13); ../udivsi3.c:62:11
  $r2 = LDRi12 $sp, 4, 14, $noreg, debug-location !1919 :: (load (s32) from %stack.14); ../udivsi3.c:62:11
  $lr = LDRi12 $r11, -8, 14, $noreg, debug-location !1919 :: (load (s32) from %stack.1); ../udivsi3.c:62:11
  renamable $lr = SUBrr renamable $r2, renamable $lr, 14, $noreg, $noreg, debug-location !1919; ../udivsi3.c:62:11
  CMPri renamable $r0, 0, 14, $noreg, implicit-def $cpsr, debug-location !1919; ../udivsi3.c:62:11
  $r2 = MOVr killed renamable $lr, 4, killed $cpsr, $noreg, implicit renamable $r2, debug-location !1919; ../udivsi3.c:62:11
  renamable $r0 = MOVsi renamable $r0, 251, 14, $noreg, $noreg, debug-location !1920; ../udivsi3.c:61:19
  renamable $r3 = ORRrsi renamable $r3, renamable $r12, 10, 14, $noreg, $noreg, debug-location !1922; ../udivsi3.c:52:22
  renamable $r1 = SUBri renamable $r1, 1, 14, $noreg, $noreg, debug-location !1923; ../udivsi3.c:48:20
  STRi12 killed $r3, $sp, 28, 14, $noreg :: (store (s32) into %stack.8)
  STRi12 killed $r2, $sp, 32, 14, $noreg :: (store (s32) into %stack.7)
  STRi12 killed $r1, $r11, -28, 14, $noreg :: (store (s32) into %stack.6)
  STRi12 killed $r0, $r11, -24, 14, $noreg :: (store (s32) into %stack.5)
  B %bb.9, debug-location !1912; ../udivsi3.c:48:5

bb.12.for.end:
; predecessors: %bb.9
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1926 :: (load (s32) from %stack.12); ../udivsi3.c:64:18
  $r1 = LDRi12 $sp, 24, 14, $noreg, debug-location !1926 :: (load (s32) from %stack.9); ../udivsi3.c:64:18
  renamable $r0 = ORRrsi renamable $r0, renamable $r1, 10, 14, $noreg, $noreg, debug-location !1926; ../udivsi3.c:64:18
  STRi12 killed $r0, $r11, -12, 14, $noreg :: (store (s32) into %stack.2)
  B %bb.13, debug-location !1927; ../udivsi3.c:65:5

bb.13.return:
; predecessors: %bb.12, %bb.7, %bb.5, %bb.3, %bb.1

  $r0 = LDRi12 $r11, -12, 14, $noreg, debug-location !1913 :: (load (s32) from %stack.2); ../udivsi3.c:0
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1928; ../udivsi3.c:66:1
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1928; ../udivsi3.c:66:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1928; ../udivsi3.c:66:1

# End machine code for function __udivsi3.

# Machine code for function __umoddi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-4]
  fi#2: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2, $r3

bb.0.entry:
  liveins: $r0, $r1, $r2, $r3, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 16, 14, $noreg, $noreg
  dead renamable $r12 = KILL renamable $r3
  dead renamable $r12 = KILL renamable $r2
  dead renamable $r12 = KILL renamable $r1
  dead renamable $r12 = KILL renamable $r0
  $lr = MOVr $sp, 14, $noreg, $noreg, debug-location !1930; ../umoddi3.c:23:5
  renamable $r12 = ADDri $sp, 8, 14, $noreg, $noreg
  STRi12 killed renamable $r12, killed renamable $lr, 0, 14, $noreg, debug-location !1930 :: (store (s32) into stack); ../umoddi3.c:23:5
  BL_pred @__udivmoddi4, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1, debug-location !1930; ../umoddi3.c:23:5
  renamable $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1931 :: (dereferenceable load (s32) from %ir.r, align 8); ../umoddi3.c:24:12
  renamable $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1931 :: (dereferenceable load (s32) from %ir.r + 4, basealign 8); ../umoddi3.c:24:12
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1932; ../umoddi3.c:24:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1932; ../umoddi3.c:24:5
  BX_RET 14, $noreg, implicit killed $r0, implicit killed $r1, debug-location !1932; ../umoddi3.c:24:5

# End machine code for function __umoddi3.

# Machine code for function __umodsi3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=4, align=4, at location [SP-4]
  fi#3: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1

bb.0.entry:
  liveins: $r0, $r1, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r11, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r11, -8
  $r11 = frame-setup MOVr killed $sp, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_register $r11
  $sp = frame-setup SUBri killed $sp, 8, 14, $noreg, $noreg
  STRi12 $r1, $sp, 0, 14, $noreg :: (store (s32) into %stack.1)
  STRi12 $r0, $sp, 4, 14, $noreg :: (store (s32) into %stack.0)
  BL_pred @__udivsi3, 14, $noreg, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0, debug-location !1934; ../umodsi3.c:22:16
  $r3 = LDRi12 $sp, 0, 14, $noreg, debug-location !1934 :: (load (s32) from %stack.1); ../umodsi3.c:22:16
  $r2 = MOVr $r0, 14, $noreg, $noreg, debug-location !1934; ../umodsi3.c:22:16
  $r0 = LDRi12 $sp, 4, 14, $noreg, debug-location !1935 :: (load (s32) from %stack.0); ../umodsi3.c:22:32
  early-clobber renamable $r1 = MULv5 killed renamable $r2, killed renamable $r3, 14, $noreg, $noreg, debug-location !1935; ../umodsi3.c:22:32
  renamable $r0 = SUBrr killed renamable $r0, killed renamable $r1, 14, $noreg, $noreg, debug-location !1936; ../umodsi3.c:22:14
  $sp = frame-destroy MOVr $r11, 14, $noreg, $noreg, debug-location !1937; ../umodsi3.c:22:5
  $sp = frame-destroy LDMIA_UPD $sp(tied-def 0), 14, $noreg, def $r11, def $lr, debug-location !1937; ../umodsi3.c:22:5
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1937; ../umodsi3.c:22:5

# End machine code for function __umodsi3.

# Machine code for function memcpy: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1939; ../memory.c:8:6

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1940 :: (load (s32) from %stack.3); ../memory.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1940 :: (load (s32) from %stack.0); ../memory.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1942; ../memory.c:8:2
  Bcc %bb.4, 0, killed $cpsr, debug-location !1942; ../memory.c:8:2
  B %bb.2, debug-location !1942; ../memory.c:8:2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1943 :: (load (s32) from %stack.1); ../memory.c:9:21
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1943 :: (load (s32) from %stack.4); ../memory.c:9:21
  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1943 :: (load (s32) from %stack.2); ../memory.c:9:21
  renamable $r0 = LDRBrs renamable $r0, renamable $r2, 0, 14, $noreg, debug-location !1943 :: (load (s8) from %ir.arrayidx); ../memory.c:9:21
  STRBrs killed renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1945 :: (store (s8) into %ir.arrayidx1); ../memory.c:9:19
  B %bb.3, debug-location !1946; ../memory.c:10:2

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1947 :: (load (s32) from %stack.4); ../memory.c:8:26
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1947; ../memory.c:8:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1942; ../memory.c:8:2

bb.4.for.end:
; predecessors: %bb.1

  renamable $r0 = IMPLICIT_DEF
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1949; ../memory.c:11:1
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1949; ../memory.c:11:1

# End machine code for function memcpy.

# Machine code for function memset: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-20]
Function Live Ins: $r0, $r1, $r2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $r0, $r1, $r2
  $sp = frame-setup SUBri killed $sp, 20, 14, $noreg, $noreg
  frame-setup CFI_INSTRUCTION def_cfa_offset 20
  STRi12 killed $r2, $sp, 4, 14, $noreg :: (store (s32) into %stack.3)
  STRi12 killed $r1, $sp, 8, 14, $noreg :: (store (s32) into %stack.2)
  STRi12 killed $r0, $sp, 12, 14, $noreg :: (store (s32) into %stack.1)
  renamable $r0 = MOVi 0, 14, $noreg, $noreg
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1951; ../memory.c:17:6

bb.1.for.cond:
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  $r1 = LDRi12 $sp, 4, 14, $noreg, debug-location !1952 :: (load (s32) from %stack.3); ../memory.c:0
  $r0 = LDRi12 $sp, 16, 14, $noreg, debug-location !1952 :: (load (s32) from %stack.0); ../memory.c:0
  STRi12 $r0, $sp, 0, 14, $noreg :: (store (s32) into %stack.4)
  CMPrr renamable $r0, renamable $r1, 14, $noreg, implicit-def $cpsr, debug-location !1954; ../memory.c:17:2
  Bcc %bb.4, 0, killed $cpsr, debug-location !1954; ../memory.c:17:2
  B %bb.2, debug-location !1954; ../memory.c:17:2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  $r0 = LDRi12 $sp, 8, 14, $noreg, debug-location !1957 :: (load (s32) from %stack.2); ../memory.c:18:11
  $r1 = LDRi12 $sp, 12, 14, $noreg, debug-location !1957 :: (load (s32) from %stack.1); ../memory.c:18:11
  $r2 = LDRi12 $sp, 0, 14, $noreg, debug-location !1957 :: (load (s32) from %stack.4); ../memory.c:18:11
  STRBrs renamable $r0, renamable $r1, renamable $r2, 0, 14, $noreg, debug-location !1957 :: (store (s8) into %ir.arrayidx); ../memory.c:18:11
  B %bb.3, debug-location !1958; ../memory.c:19:2

bb.3.for.inc:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  $r0 = LDRi12 $sp, 0, 14, $noreg, debug-location !1959 :: (load (s32) from %stack.4); ../memory.c:17:26
  renamable $r0 = nuw ADDri renamable $r0, 1, 14, $noreg, $noreg, debug-location !1959; ../memory.c:17:26
  STRi12 killed $r0, $sp, 16, 14, $noreg :: (store (s32) into %stack.0)
  B %bb.1, debug-location !1954; ../memory.c:17:2

bb.4.for.end:
; predecessors: %bb.1

  $r0 = LDRi12 $sp, 12, 14, $noreg, debug-location !1961 :: (load (s32) from %stack.1); ../memory.c:20:2
  $sp = frame-destroy ADDri killed $sp, 20, 14, $noreg, $noreg, debug-location !1961; ../memory.c:20:2
  BX_RET 14, $noreg, implicit killed $r0, debug-location !1961; ../memory.c:20:2

# End machine code for function memset.

